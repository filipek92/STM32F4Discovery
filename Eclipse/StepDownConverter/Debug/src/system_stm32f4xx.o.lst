   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f4xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	SetSysClock:
  23              	.LFB112:
  24              		.file 1 "../src/system_stm32f4xx.c"
   1:../src/system_stm32f4xx.c **** /**
   2:../src/system_stm32f4xx.c ****   ******************************************************************************
   3:../src/system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:../src/system_stm32f4xx.c ****   * @author  MCD Application Team
   5:../src/system_stm32f4xx.c ****   * @version V1.0.0
   6:../src/system_stm32f4xx.c ****   * @date    19-September-2011
   7:../src/system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:../src/system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:../src/system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:../src/system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:../src/system_stm32f4xx.c ****   *             
  12:../src/system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../src/system_stm32f4xx.c ****   *     user application:
  14:../src/system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../src/system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../src/system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:../src/system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:../src/system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:../src/system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:../src/system_stm32f4xx.c ****   *
  21:../src/system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../src/system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:../src/system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:../src/system_stm32f4xx.c ****   *                                     
  25:../src/system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../src/system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:../src/system_stm32f4xx.c ****   *                                 during program execution.
  28:../src/system_stm32f4xx.c ****   *
  29:../src/system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:../src/system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:../src/system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:../src/system_stm32f4xx.c ****   *
  33:../src/system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../src/system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../src/system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../src/system_stm32f4xx.c ****   *
  37:../src/system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:../src/system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:../src/system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../src/system_stm32f4xx.c ****   *    value to your own configuration.
  41:../src/system_stm32f4xx.c ****   *
  42:../src/system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:../src/system_stm32f4xx.c ****   *=============================================================================
  44:../src/system_stm32f4xx.c ****   *=============================================================================
  45:../src/system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:../src/system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:../src/system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:../src/system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:../src/system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:../src/system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:../src/system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:../src/system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:../src/system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:../src/system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:../src/system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:../src/system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:../src/system_stm32f4xx.c ****   *        PLLI2S_N                               | NA
  70:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:../src/system_stm32f4xx.c ****   *        PLLI2S_R                               | NA
  72:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:../src/system_stm32f4xx.c ****   *        I2S input clock                        | NA
  74:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:../src/system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:../src/system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:../src/system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:../src/system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:../src/system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:../src/system_stm32f4xx.c ****   *        Data cache                             | ON
  86:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:../src/system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:../src/system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:../src/system_stm32f4xx.c ****   *=============================================================================
  91:../src/system_stm32f4xx.c ****   ****************************************************************************** 
  92:../src/system_stm32f4xx.c ****   * @attention
  93:../src/system_stm32f4xx.c ****   *
  94:../src/system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:../src/system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:../src/system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:../src/system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:../src/system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:../src/system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:../src/system_stm32f4xx.c ****   *
 101:../src/system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:../src/system_stm32f4xx.c ****   ******************************************************************************
 103:../src/system_stm32f4xx.c ****   */
 104:../src/system_stm32f4xx.c **** 
 105:../src/system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:../src/system_stm32f4xx.c ****   * @{
 107:../src/system_stm32f4xx.c ****   */
 108:../src/system_stm32f4xx.c **** 
 109:../src/system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:../src/system_stm32f4xx.c ****   * @{
 111:../src/system_stm32f4xx.c ****   */  
 112:../src/system_stm32f4xx.c ****   
 113:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:../src/system_stm32f4xx.c ****   * @{
 115:../src/system_stm32f4xx.c ****   */
 116:../src/system_stm32f4xx.c **** 
 117:../src/system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:../src/system_stm32f4xx.c **** 
 119:../src/system_stm32f4xx.c **** /**
 120:../src/system_stm32f4xx.c ****   * @}
 121:../src/system_stm32f4xx.c ****   */
 122:../src/system_stm32f4xx.c **** 
 123:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:../src/system_stm32f4xx.c ****   * @{
 125:../src/system_stm32f4xx.c ****   */
 126:../src/system_stm32f4xx.c **** 
 127:../src/system_stm32f4xx.c **** /**
 128:../src/system_stm32f4xx.c ****   * @}
 129:../src/system_stm32f4xx.c ****   */
 130:../src/system_stm32f4xx.c **** 
 131:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:../src/system_stm32f4xx.c ****   * @{
 133:../src/system_stm32f4xx.c ****   */
 134:../src/system_stm32f4xx.c **** 
 135:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:../src/system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:../src/system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:../src/system_stm32f4xx.c **** 
 139:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:../src/system_stm32f4xx.c ****      Internal SRAM. */
 141:../src/system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:../src/system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:../src/system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:../src/system_stm32f4xx.c **** 
 145:../src/system_stm32f4xx.c **** 
 146:../src/system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:../src/system_stm32f4xx.c **** #define PLL_M      8
 148:../src/system_stm32f4xx.c **** #define PLL_N      336
 149:../src/system_stm32f4xx.c **** 
 150:../src/system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:../src/system_stm32f4xx.c **** #define PLL_P      2
 152:../src/system_stm32f4xx.c **** 
 153:../src/system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:../src/system_stm32f4xx.c **** #define PLL_Q      7
 155:../src/system_stm32f4xx.c **** 
 156:../src/system_stm32f4xx.c **** /**
 157:../src/system_stm32f4xx.c ****   * @}
 158:../src/system_stm32f4xx.c ****   */
 159:../src/system_stm32f4xx.c **** 
 160:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 161:../src/system_stm32f4xx.c ****   * @{
 162:../src/system_stm32f4xx.c ****   */
 163:../src/system_stm32f4xx.c **** 
 164:../src/system_stm32f4xx.c **** /**
 165:../src/system_stm32f4xx.c ****   * @}
 166:../src/system_stm32f4xx.c ****   */
 167:../src/system_stm32f4xx.c **** 
 168:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 169:../src/system_stm32f4xx.c ****   * @{
 170:../src/system_stm32f4xx.c ****   */
 171:../src/system_stm32f4xx.c **** 
 172:../src/system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 173:../src/system_stm32f4xx.c **** 
 174:../src/system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 175:../src/system_stm32f4xx.c **** 
 176:../src/system_stm32f4xx.c **** /**
 177:../src/system_stm32f4xx.c ****   * @}
 178:../src/system_stm32f4xx.c ****   */
 179:../src/system_stm32f4xx.c **** 
 180:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 181:../src/system_stm32f4xx.c ****   * @{
 182:../src/system_stm32f4xx.c ****   */
 183:../src/system_stm32f4xx.c **** 
 184:../src/system_stm32f4xx.c **** static void SetSysClock(void);
 185:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 186:../src/system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 187:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 188:../src/system_stm32f4xx.c **** 
 189:../src/system_stm32f4xx.c **** /**
 190:../src/system_stm32f4xx.c ****   * @}
 191:../src/system_stm32f4xx.c ****   */
 192:../src/system_stm32f4xx.c **** 
 193:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 194:../src/system_stm32f4xx.c ****   * @{
 195:../src/system_stm32f4xx.c ****   */
 196:../src/system_stm32f4xx.c **** 
 197:../src/system_stm32f4xx.c **** /**
 198:../src/system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 199:../src/system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 200:../src/system_stm32f4xx.c ****   *         SystemFrequency variable.
 201:../src/system_stm32f4xx.c ****   * @param  None
 202:../src/system_stm32f4xx.c ****   * @retval None
 203:../src/system_stm32f4xx.c ****   */
 204:../src/system_stm32f4xx.c **** void SystemInit(void)
 205:../src/system_stm32f4xx.c **** {
 206:../src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 207:../src/system_stm32f4xx.c ****   /* Set HSION bit */
 208:../src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
 209:../src/system_stm32f4xx.c **** 
 210:../src/system_stm32f4xx.c ****   /* Reset CFGR register */
 211:../src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
 212:../src/system_stm32f4xx.c **** 
 213:../src/system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 214:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 215:../src/system_stm32f4xx.c **** 
 216:../src/system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 217:../src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
 218:../src/system_stm32f4xx.c **** 
 219:../src/system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 220:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 221:../src/system_stm32f4xx.c **** 
 222:../src/system_stm32f4xx.c ****   /* Disable all interrupts */
 223:../src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
 224:../src/system_stm32f4xx.c **** 
 225:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 226:../src/system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 227:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 228:../src/system_stm32f4xx.c ****          
 229:../src/system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 230:../src/system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 231:../src/system_stm32f4xx.c ****   SetSysClock();
 232:../src/system_stm32f4xx.c **** 
 233:../src/system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 234:../src/system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 235:../src/system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 236:../src/system_stm32f4xx.c **** #else
 237:../src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 238:../src/system_stm32f4xx.c **** #endif
 239:../src/system_stm32f4xx.c **** }
 240:../src/system_stm32f4xx.c **** 
 241:../src/system_stm32f4xx.c **** /**
 242:../src/system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 243:../src/system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 244:../src/system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 245:../src/system_stm32f4xx.c ****   *         other parameters.
 246:../src/system_stm32f4xx.c ****   *           
 247:../src/system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 248:../src/system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 249:../src/system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 250:../src/system_stm32f4xx.c ****   *     
 251:../src/system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 252:../src/system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 253:../src/system_stm32f4xx.c ****   *           constant and the selected clock source:
 254:../src/system_stm32f4xx.c ****   *             
 255:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 256:../src/system_stm32f4xx.c ****   *                                              
 257:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 258:../src/system_stm32f4xx.c ****   *                          
 259:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 260:../src/system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 261:../src/system_stm32f4xx.c ****   *         
 262:../src/system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 263:../src/system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 264:../src/system_stm32f4xx.c ****   *             in voltage and temperature.   
 265:../src/system_stm32f4xx.c ****   *    
 266:../src/system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 267:../src/system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 268:../src/system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 269:../src/system_stm32f4xx.c ****   *              have wrong result.
 270:../src/system_stm32f4xx.c ****   *                
 271:../src/system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 272:../src/system_stm32f4xx.c ****   *           value for HSE crystal.
 273:../src/system_stm32f4xx.c ****   *     
 274:../src/system_stm32f4xx.c ****   * @param  None
 275:../src/system_stm32f4xx.c ****   * @retval None
 276:../src/system_stm32f4xx.c ****   */
 277:../src/system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 278:../src/system_stm32f4xx.c **** {
 279:../src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 280:../src/system_stm32f4xx.c ****   
 281:../src/system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 282:../src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 283:../src/system_stm32f4xx.c **** 
 284:../src/system_stm32f4xx.c ****   switch (tmp)
 285:../src/system_stm32f4xx.c ****   {
 286:../src/system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 287:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 288:../src/system_stm32f4xx.c ****       break;
 289:../src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 290:../src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 291:../src/system_stm32f4xx.c ****       break;
 292:../src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 293:../src/system_stm32f4xx.c **** 
 294:../src/system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 295:../src/system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 296:../src/system_stm32f4xx.c ****          */    
 297:../src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 298:../src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 299:../src/system_stm32f4xx.c ****       
 300:../src/system_stm32f4xx.c ****       if (pllsource != 0)
 301:../src/system_stm32f4xx.c ****       {
 302:../src/system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 303:../src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 304:../src/system_stm32f4xx.c ****       }
 305:../src/system_stm32f4xx.c ****       else
 306:../src/system_stm32f4xx.c ****       {
 307:../src/system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 308:../src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 309:../src/system_stm32f4xx.c ****       }
 310:../src/system_stm32f4xx.c **** 
 311:../src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 312:../src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 313:../src/system_stm32f4xx.c ****       break;
 314:../src/system_stm32f4xx.c ****     default:
 315:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 316:../src/system_stm32f4xx.c ****       break;
 317:../src/system_stm32f4xx.c ****   }
 318:../src/system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 319:../src/system_stm32f4xx.c ****   /* Get HCLK prescaler */
 320:../src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 321:../src/system_stm32f4xx.c ****   /* HCLK frequency */
 322:../src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 323:../src/system_stm32f4xx.c **** }
 324:../src/system_stm32f4xx.c **** 
 325:../src/system_stm32f4xx.c **** /**
 326:../src/system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 327:../src/system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 328:../src/system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 329:../src/system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 330:../src/system_stm32f4xx.c ****   * @param  None
 331:../src/system_stm32f4xx.c ****   * @retval None
 332:../src/system_stm32f4xx.c ****   */
 333:../src/system_stm32f4xx.c **** static void SetSysClock(void)
 334:../src/system_stm32f4xx.c **** {
  25              		.loc 1 334 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 82B0     		sub	sp, sp, #8
  31              		.cfi_def_cfa_offset 8
 335:../src/system_stm32f4xx.c **** /******************************************************************************/
 336:../src/system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 337:../src/system_stm32f4xx.c **** /******************************************************************************/
 338:../src/system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  32              		.loc 1 338 0
  33 0002 0023     		movs	r3, #0
  34 0004 0193     		str	r3, [sp, #4]
  35 0006 0093     		str	r3, [sp]
 339:../src/system_stm32f4xx.c ****   
 340:../src/system_stm32f4xx.c ****   /* Enable HSE */
 341:../src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  36              		.loc 1 341 0
  37 0008 294B     		ldr	r3, .L12
  38 000a 1A68     		ldr	r2, [r3]
  39 000c 42F48032 		orr	r2, r2, #65536
  40 0010 1A60     		str	r2, [r3]
 342:../src/system_stm32f4xx.c ****  
 343:../src/system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 344:../src/system_stm32f4xx.c ****   do
 345:../src/system_stm32f4xx.c ****   {
 346:../src/system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  41              		.loc 1 346 0
  42 0012 1A46     		mov	r2, r3
  43              	.L3:
  44              		.loc 1 346 0 is_stmt 0 discriminator 1
  45 0014 1368     		ldr	r3, [r2]
  46 0016 03F40033 		and	r3, r3, #131072
  47 001a 0093     		str	r3, [sp]
 347:../src/system_stm32f4xx.c ****     StartUpCounter++;
  48              		.loc 1 347 0 is_stmt 1 discriminator 1
  49 001c 019B     		ldr	r3, [sp, #4]
  50 001e 0133     		adds	r3, r3, #1
  51 0020 0193     		str	r3, [sp, #4]
 348:../src/system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  52              		.loc 1 348 0 discriminator 1
  53 0022 009B     		ldr	r3, [sp]
  54 0024 1BB9     		cbnz	r3, .L2
  55 0026 019B     		ldr	r3, [sp, #4]
  56 0028 B3F5A06F 		cmp	r3, #1280
  57 002c F2D1     		bne	.L3
  58              	.L2:
 349:../src/system_stm32f4xx.c **** 
 350:../src/system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  59              		.loc 1 350 0
  60 002e 204B     		ldr	r3, .L12
  61 0030 1B68     		ldr	r3, [r3]
  62 0032 13F4003F 		tst	r3, #131072
 351:../src/system_stm32f4xx.c ****   {
 352:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
  63              		.loc 1 352 0
  64 0036 14BF     		ite	ne
  65 0038 0123     		movne	r3, #1
 353:../src/system_stm32f4xx.c ****   }
 354:../src/system_stm32f4xx.c ****   else
 355:../src/system_stm32f4xx.c ****   {
 356:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
  66              		.loc 1 356 0
  67 003a 0023     		moveq	r3, #0
  68 003c 0093     		str	r3, [sp]
 357:../src/system_stm32f4xx.c ****   }
 358:../src/system_stm32f4xx.c **** 
 359:../src/system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
  69              		.loc 1 359 0
  70 003e 009B     		ldr	r3, [sp]
  71 0040 012B     		cmp	r3, #1
  72 0042 32D1     		bne	.L1
 360:../src/system_stm32f4xx.c ****   {
 361:../src/system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 362:../src/system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
  73              		.loc 1 362 0
  74 0044 1A4B     		ldr	r3, .L12
  75 0046 1A6C     		ldr	r2, [r3, #64]
  76 0048 42F08052 		orr	r2, r2, #268435456
  77 004c 1A64     		str	r2, [r3, #64]
 363:../src/system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
  78              		.loc 1 363 0
  79 004e 194A     		ldr	r2, .L12+4
  80 0050 1168     		ldr	r1, [r2]
  81 0052 41F48041 		orr	r1, r1, #16384
  82 0056 1160     		str	r1, [r2]
 364:../src/system_stm32f4xx.c **** 
 365:../src/system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 366:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
  83              		.loc 1 366 0
  84 0058 9A68     		ldr	r2, [r3, #8]
  85 005a 9A60     		str	r2, [r3, #8]
 367:../src/system_stm32f4xx.c ****       
 368:../src/system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 369:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
  86              		.loc 1 369 0
  87 005c 9A68     		ldr	r2, [r3, #8]
  88 005e 42F40042 		orr	r2, r2, #32768
  89 0062 9A60     		str	r2, [r3, #8]
 370:../src/system_stm32f4xx.c ****     
 371:../src/system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 372:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
  90              		.loc 1 372 0
  91 0064 9A68     		ldr	r2, [r3, #8]
  92 0066 42F4A052 		orr	r2, r2, #5120
  93 006a 9A60     		str	r2, [r3, #8]
 373:../src/system_stm32f4xx.c **** 
 374:../src/system_stm32f4xx.c ****     /* Configure the main PLL */
 375:../src/system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
  94              		.loc 1 375 0
  95 006c 124A     		ldr	r2, .L12+8
  96 006e 5A60     		str	r2, [r3, #4]
 376:../src/system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 377:../src/system_stm32f4xx.c **** 
 378:../src/system_stm32f4xx.c ****     /* Enable the main PLL */
 379:../src/system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
  97              		.loc 1 379 0
  98 0070 1A68     		ldr	r2, [r3]
  99 0072 42F08072 		orr	r2, r2, #16777216
 100 0076 1A60     		str	r2, [r3]
 380:../src/system_stm32f4xx.c **** 
 381:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 382:../src/system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 101              		.loc 1 382 0
 102 0078 1A46     		mov	r2, r3
 103              	.L7:
 104              		.loc 1 382 0 is_stmt 0 discriminator 1
 105 007a 1368     		ldr	r3, [r2]
 106 007c 13F0007F 		tst	r3, #33554432
 107 0080 FBD0     		beq	.L7
 383:../src/system_stm32f4xx.c ****     {
 384:../src/system_stm32f4xx.c ****     }
 385:../src/system_stm32f4xx.c ****    
 386:../src/system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 387:../src/system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 108              		.loc 1 387 0 is_stmt 1
 109 0082 40F20562 		movw	r2, #1541
 110 0086 0D4B     		ldr	r3, .L12+12
 111 0088 1A60     		str	r2, [r3]
 388:../src/system_stm32f4xx.c **** 
 389:../src/system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 390:../src/system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 112              		.loc 1 390 0
 113 008a A3F58063 		sub	r3, r3, #1024
 114 008e 9A68     		ldr	r2, [r3, #8]
 115 0090 22F00302 		bic	r2, r2, #3
 116 0094 9A60     		str	r2, [r3, #8]
 391:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 117              		.loc 1 391 0
 118 0096 9A68     		ldr	r2, [r3, #8]
 119 0098 42F00202 		orr	r2, r2, #2
 120 009c 9A60     		str	r2, [r3, #8]
 392:../src/system_stm32f4xx.c **** 
 393:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 394:../src/system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 121              		.loc 1 394 0
 122 009e 1A46     		mov	r2, r3
 123              	.L8:
 124              		.loc 1 394 0 is_stmt 0 discriminator 1
 125 00a0 9368     		ldr	r3, [r2, #8]
 126 00a2 03F00C03 		and	r3, r3, #12
 127 00a6 082B     		cmp	r3, #8
 128 00a8 FAD1     		bne	.L8
 129              	.L1:
 395:../src/system_stm32f4xx.c ****     {
 396:../src/system_stm32f4xx.c ****     }
 397:../src/system_stm32f4xx.c ****   }
 398:../src/system_stm32f4xx.c ****   else
 399:../src/system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 400:../src/system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 401:../src/system_stm32f4xx.c ****   }
 402:../src/system_stm32f4xx.c **** 
 403:../src/system_stm32f4xx.c **** }
 130              		.loc 1 403 0 is_stmt 1
 131 00aa 02B0     		add	sp, sp, #8
 132              		@ sp needed
 133 00ac 7047     		bx	lr
 134              	.L13:
 135 00ae 00BF     		.align	2
 136              	.L12:
 137 00b0 00380240 		.word	1073887232
 138 00b4 00700040 		.word	1073770496
 139 00b8 08544007 		.word	121656328
 140 00bc 003C0240 		.word	1073888256
 141              		.cfi_endproc
 142              	.LFE112:
 144              		.align	2
 145              		.global	SystemInit
 146              		.thumb
 147              		.thumb_func
 149              	SystemInit:
 150              	.LFB110:
 205:../src/system_stm32f4xx.c **** {
 151              		.loc 1 205 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155 00c0 08B5     		push	{r3, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 3, -8
 158              		.cfi_offset 14, -4
 208:../src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
 159              		.loc 1 208 0
 160 00c2 0D4B     		ldr	r3, .L15
 161 00c4 1A68     		ldr	r2, [r3]
 162 00c6 42F00102 		orr	r2, r2, #1
 163 00ca 1A60     		str	r2, [r3]
 211:../src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
 164              		.loc 1 211 0
 165 00cc 0021     		movs	r1, #0
 166 00ce 9960     		str	r1, [r3, #8]
 214:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 167              		.loc 1 214 0
 168 00d0 1A68     		ldr	r2, [r3]
 169 00d2 22F08472 		bic	r2, r2, #17301504
 170 00d6 22F48032 		bic	r2, r2, #65536
 171 00da 1A60     		str	r2, [r3]
 217:../src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
 172              		.loc 1 217 0
 173 00dc 074A     		ldr	r2, .L15+4
 174 00de 5A60     		str	r2, [r3, #4]
 220:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 175              		.loc 1 220 0
 176 00e0 1A68     		ldr	r2, [r3]
 177 00e2 22F48022 		bic	r2, r2, #262144
 178 00e6 1A60     		str	r2, [r3]
 223:../src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
 179              		.loc 1 223 0
 180 00e8 D960     		str	r1, [r3, #12]
 231:../src/system_stm32f4xx.c ****   SetSysClock();
 181              		.loc 1 231 0
 182 00ea FFF789FF 		bl	SetSysClock
 183              	.LVL0:
 237:../src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 184              		.loc 1 237 0
 185 00ee 4FF00062 		mov	r2, #134217728
 186 00f2 034B     		ldr	r3, .L15+8
 187 00f4 9A60     		str	r2, [r3, #8]
 188 00f6 08BD     		pop	{r3, pc}
 189              	.L16:
 190              		.align	2
 191              	.L15:
 192 00f8 00380240 		.word	1073887232
 193 00fc 10300024 		.word	603992080
 194 0100 00ED00E0 		.word	-536810240
 195              		.cfi_endproc
 196              	.LFE110:
 198              		.align	2
 199              		.global	SystemCoreClockUpdate
 200              		.thumb
 201              		.thumb_func
 203              	SystemCoreClockUpdate:
 204              	.LFB111:
 278:../src/system_stm32f4xx.c **** {
 205              		.loc 1 278 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL1:
 282:../src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 211              		.loc 1 282 0
 212 0104 1E4B     		ldr	r3, .L26
 213 0106 9B68     		ldr	r3, [r3, #8]
 214 0108 03F00C03 		and	r3, r3, #12
 215              	.LVL2:
 284:../src/system_stm32f4xx.c ****   switch (tmp)
 216              		.loc 1 284 0
 217 010c 042B     		cmp	r3, #4
 218 010e 06D0     		beq	.L19
 219 0110 082B     		cmp	r3, #8
 220 0112 08D0     		beq	.L20
 221 0114 23BB     		cbnz	r3, .L25
 287:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 222              		.loc 1 287 0
 223 0116 1B4A     		ldr	r2, .L26+4
 224 0118 1B4B     		ldr	r3, .L26+8
 225              	.LVL3:
 226 011a 1A60     		str	r2, [r3]
 288:../src/system_stm32f4xx.c ****       break;
 227              		.loc 1 288 0
 228 011c 23E0     		b	.L22
 229              	.LVL4:
 230              	.L19:
 290:../src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 231              		.loc 1 290 0
 232 011e 1B4A     		ldr	r2, .L26+12
 233 0120 194B     		ldr	r3, .L26+8
 234              	.LVL5:
 235 0122 1A60     		str	r2, [r3]
 291:../src/system_stm32f4xx.c ****       break;
 236              		.loc 1 291 0
 237 0124 1FE0     		b	.L22
 238              	.LVL6:
 239              	.L20:
 297:../src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 240              		.loc 1 297 0
 241 0126 164B     		ldr	r3, .L26
 242              	.LVL7:
 243 0128 5968     		ldr	r1, [r3, #4]
 244              	.LVL8:
 298:../src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 245              		.loc 1 298 0
 246 012a 5B68     		ldr	r3, [r3, #4]
 247 012c 03F03F03 		and	r3, r3, #63
 248              	.LVL9:
 300:../src/system_stm32f4xx.c ****       if (pllsource != 0)
 249              		.loc 1 300 0
 250 0130 11F4800F 		tst	r1, #4194304
 303:../src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 251              		.loc 1 303 0
 252 0134 14BF     		ite	ne
 253 0136 154A     		ldrne	r2, .L26+12
 308:../src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 254              		.loc 1 308 0
 255 0138 124A     		ldreq	r2, .L26+4
 256 013a B2FBF3F3 		udiv	r3, r2, r3
 257              	.LVL10:
 258 013e 104A     		ldr	r2, .L26
 259 0140 5268     		ldr	r2, [r2, #4]
 260 0142 C2F38812 		ubfx	r2, r2, #6, #9
 261 0146 02FB03F2 		mul	r2, r2, r3
 262              	.LVL11:
 311:../src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 263              		.loc 1 311 0
 264 014a 0D4B     		ldr	r3, .L26
 265 014c 5B68     		ldr	r3, [r3, #4]
 266 014e C3F30143 		ubfx	r3, r3, #16, #2
 267 0152 0133     		adds	r3, r3, #1
 268 0154 5B00     		lsls	r3, r3, #1
 269              	.LVL12:
 312:../src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 270              		.loc 1 312 0
 271 0156 B2FBF3F2 		udiv	r2, r2, r3
 272              	.LVL13:
 273 015a 0B4B     		ldr	r3, .L26+8
 274              	.LVL14:
 275 015c 1A60     		str	r2, [r3]
 313:../src/system_stm32f4xx.c ****       break;
 276              		.loc 1 313 0
 277 015e 02E0     		b	.L22
 278              	.LVL15:
 279              	.L25:
 315:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 280              		.loc 1 315 0
 281 0160 084A     		ldr	r2, .L26+4
 282 0162 094B     		ldr	r3, .L26+8
 283              	.LVL16:
 284 0164 1A60     		str	r2, [r3]
 285              	.LVL17:
 286              	.L22:
 320:../src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 287              		.loc 1 320 0
 288 0166 064B     		ldr	r3, .L26
 289 0168 9A68     		ldr	r2, [r3, #8]
 290 016a C2F30312 		ubfx	r2, r2, #4, #4
 291 016e 064B     		ldr	r3, .L26+8
 292 0170 1A44     		add	r2, r2, r3
 293 0172 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 294 0174 C9B2     		uxtb	r1, r1
 295              	.LVL18:
 322:../src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 296              		.loc 1 322 0
 297 0176 1A68     		ldr	r2, [r3]
 298 0178 CA40     		lsrs	r2, r2, r1
 299 017a 1A60     		str	r2, [r3]
 300 017c 7047     		bx	lr
 301              	.L27:
 302 017e 00BF     		.align	2
 303              	.L26:
 304 0180 00380240 		.word	1073887232
 305 0184 0024F400 		.word	16000000
 306 0188 00000000 		.word	.LANCHOR0
 307 018c 00127A00 		.word	8000000
 308              		.cfi_endproc
 309              	.LFE111:
 311              		.global	AHBPrescTable
 312              		.global	SystemCoreClock
 313              		.data
 314              		.align	2
 315              		.set	.LANCHOR0,. + 0
 318              	SystemCoreClock:
 319 0000 007A030A 		.word	168000000
 322              	AHBPrescTable:
 323 0004 00       		.byte	0
 324 0005 00       		.byte	0
 325 0006 00       		.byte	0
 326 0007 00       		.byte	0
 327 0008 00       		.byte	0
 328 0009 00       		.byte	0
 329 000a 00       		.byte	0
 330 000b 00       		.byte	0
 331 000c 01       		.byte	1
 332 000d 02       		.byte	2
 333 000e 03       		.byte	3
 334 000f 04       		.byte	4
 335 0010 06       		.byte	6
 336 0011 07       		.byte	7
 337 0012 08       		.byte	8
 338 0013 09       		.byte	9
 339              		.text
 340              	.Letext0:
 341              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\mach
 342              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\stdi
 343              		.file 4 "C:\\Users\\Filip\\Eclipse\\Template\\CMSIS\\Include/core_cm4.h"
 344              		.file 5 "C:\\Users\\Filip\\Eclipse\\Template\\STM32F4xx\\Include/stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f4xx.c
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:22     .text:00000000 SetSysClock
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:137    .text:000000b0 $d
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:144    .text:000000c0 $t
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:149    .text:000000c0 SystemInit
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:192    .text:000000f8 $d
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:198    .text:00000104 $t
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:203    .text:00000104 SystemCoreClockUpdate
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:304    .text:00000180 $d
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:322    .data:00000004 AHBPrescTable
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:318    .data:00000000 SystemCoreClock
C:\Users\Filip\AppData\Local\Temp\cchXresH.s:314    .data:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.2bb9d917777380cc06007ef782f1739f
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb

NO UNDEFINED SYMBOLS
