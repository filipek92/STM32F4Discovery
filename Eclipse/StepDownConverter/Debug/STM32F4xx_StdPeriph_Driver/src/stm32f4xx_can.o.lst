   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_can.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	CheckITStatus:
  23              	.LFB134:
  24              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - Initialization and Configuration 
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - CAN Frames Transmission 
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - CAN Frames Reception    
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - Operation modes switch  
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - Error management          
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *           - Interrupts and flags        
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *  @verbatim
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                               
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          ===================================================================      
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                                   How to use this driver
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          ===================================================================
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          1.  Enable the CAN controller interface clock using 
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                  RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *              and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *  @note   In case you are using CAN2 only, you have to enable the CAN1 clock.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *     
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          2. CAN pins configuration
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               - Enable the clock for the CAN GPIOs using the following function:
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               - Connect the involved CAN pins to AF9 using the following function 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                   GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                - Configure these CAN pins in alternate function mode by calling
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                  the function  GPIO_Init();
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *    
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          3.  Initialise and configure the CAN using CAN_Init() and 
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               CAN_FilterInit() functions.   
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          4.  Transmit the desired CAN frame using CAN_Transmit() function.
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          5.  Check the transmission of a CAN frame using CAN_TransmitStatus()
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *              function.
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          6.  Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *              function.  
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          7.  Receive a CAN frame using CAN_Recieve() function.
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          8.  Release the receive FIFOs using CAN_FIFORelease() function.
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          9. Return the number of pending received frames using 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *              CAN_MessagePending() function.            
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                   
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          10. To control CAN events you can use one of the following two methods:
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               - Check on CAN flags using the CAN_GetFlagStatus() function.  
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               - Use CAN interrupts through the function CAN_ITConfig() at 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                 initialization phase and CAN_GetITStatus() function into 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *                 interrupt routines to check if the event has occurred or not.
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *             After checking on a flag you should clear it using CAN_ClearFlag()
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *             function. And after checking on an interrupt event you should 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *             clear it using CAN_ClearITPendingBit() function.            
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *               
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *              
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *  @endverbatim
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ******************************************************************************
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @attention
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ******************************************************************************  
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN 
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */ 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Flags in TSR register */
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Flags in MSR register */
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Flags in ESR register */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Mailboxes definition */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim    
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       Initialization and Configuration functions
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Initialize the CAN peripherals : Prescaler, operating mode, the maximum number 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      of time quanta to perform resynchronization, the number of time quanta in
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      Bit Segment 1 and 2 and many other modes. 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      Refer to  @ref CAN_InitTypeDef  for more details.
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Configures the CAN reception filter.                                      
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Select the start bank filter for slave CAN.
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Enables or disables the Debug Freeze mode for CAN
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Enables or disables the CAN Time Trigger Operation communication mode
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None.
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {  
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Request initialisation */
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     wait_ack++;
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check acknowledge */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else 
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    wait_ack = 0;
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    {
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      wait_ack++;
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    }
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return InitStatus;
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         contains the configuration information.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Filter Scale */
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Filter Mode */
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Filter activation */
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         in data byte 7. 
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set TGT bits */
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim    
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       CAN Frames Transmission functions
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to 
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Initiate and transmit a CAN frame message (if there is an empty mailbox).
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Check the transmission status of a CAN Frame
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    - Cancel a transmit request
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set up the Id */
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set up the DLC */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Set up the data field */
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Request transmission */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return transmit_mailbox;
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t state = 0;
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     default:
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (state)
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* transmit pending  */
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* transmit failed  */
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return (uint8_t) state;
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* abort transmission */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (Mailbox)
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     default:
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim    
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       CAN Frames Reception functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to 
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Receive a correct CAN frame
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Release a specified receive FIFO (2 FIFOs are available)
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Return the number of the pending received CAN frames
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the Id */
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the DLC */
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the FMI */
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the data field */
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Release the FIFO */
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = 0;
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return message_pending;
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim    
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       CAN Operation modes functions
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to select the CAN Operation modes
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   - sleep mode
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   - normal mode 
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   - initialization mode
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Request initialisation */
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Request Sleep mode */
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return  (uint8_t) status;
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Request Sleep mode */
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Sleep mode status */
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* return sleep mode status */
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Wake up request */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Sleep mode status */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    wait_slak--;
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* return wakeup status */
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim    
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       CAN Bus Error management functions
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to 
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Return the CANx's last error code (LEC)
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Return the CANx Receive Error Counter (REC)
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    -  Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    @note If TEC is greater than 255, The CAN is in bus-off state.
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    @note if REC or TEC are greater than 96, an Error warning flag occurs.
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    @note if REC or TEC are greater than 127, an Error Passive Flag occurs.
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                         
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval Error code: 
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the error code*/
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Return the error code*/
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return errorcode;
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *         error passive state.  
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t counter=0;
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return counter;
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t counter=0;
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return counter;
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  *
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @verbatim   
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                    Interrupts and flags management functions
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  ===============================================================================  
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   This section provides functions allowing to configure the CAN Interrupts and 
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   to get the status and clear flags and Interrupts pending bits.
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   The CAN provides 14 Interrupts sources and 15 Flags:
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ===============  
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       Flags :
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ===============
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   The 15 flags can be divided on 4 groups: 
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    A. Transmit Flags
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -----------------------
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_RQCP0, 
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_RQCP1, 
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Set when when the last request (transmit or abort) has 
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           been performed. 
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   B. Receive Flags
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -----------------------
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FMP0,
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set to signal that messages are pending in the receive 
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           FIFO.
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           These Flags are cleared only by hardware. 
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FF0,
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set when three messages are stored in the selected 
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           FIFO.                        
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FOV0              
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set when a new message has been received and passed 
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           the filter while the FIFO was full.         
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   C. Operating Mode Flags
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ----------------------- 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_WKU    : Wake up Flag
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set to signal that a SOF bit has been detected while 
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           the CAN hardware was in Sleep mode. 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_SLAK   : Sleep acknowledge Flag
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Set to signal that the CAN has entered Sleep Mode. 
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   D. Error Flags
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ----------------------- 
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_EWG    : Error Warning Flag
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Set when the warning limit has been reached (Receive 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Error Counter or Transmit Error Counter greater than 96). 
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           This Flag is cleared only by hardware.
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                             
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_EPV    : Error Passive Flag
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Set when the Error Passive limit has been reached 
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           (Receive Error Counter or Transmit Error Counter 
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           greater than 127).
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           This Flag is cleared only by hardware.
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                              
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_BOF    : Bus-Off Flag
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set when CAN enters the bus-off state. The bus-off 
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           state is entered on TEC overflow, greater than 255.
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           This Flag is cleared only by hardware.
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                    
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_FLAG_LEC    : Last error code Flag
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           set If a message has been transferred (reception or
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           transmission) with error, and the error code is hold.              
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ===============  
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    Interrupts :
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ===============
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   The 14 interrupts can be divided on 4 groups: 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    A. Transmit interrupt
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -----------------------   
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****           CAN_IT_TME   :  Transmit mailbox empty Interrupt
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when 
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           no transmit request are pending for Tx mailboxes.      
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    B. Receive Interrupts
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -----------------------          
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FMP0,
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, these interrupt sources are pending when 
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           messages are pending in the receive FIFO.
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           The corresponding interrupt pending bits are cleared 
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           only by hardware.
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FF0,              
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, these interrupt sources are pending when
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           three messages are stored in the selected FIFO.
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FOV0,        
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, these interrupt sources are pending when
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           a new message has been received and passed the filter
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           while the FIFO was full.
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    C. Operating Mode Interrupts
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -------------------------------          
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_WKU     :  Wake-up Interrupt
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when 
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           a SOF bit has been detected while the CAN hardware was 
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           in Sleep mode.
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                   
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_SLK     :  Sleep acknowledge Interrupt
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when 
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           the CAN has entered Sleep Mode.       
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    D. Error Interrupts 
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   -----------------------         
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_EWG     :  Error warning Interrupt 
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           the warning limit has been reached (Receive Error 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Counter or Transmit Error Counter=96). 
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_EPV     :  Error passive Interrupt        
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           the Error Passive limit has been reached (Receive 
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           Error Counter or Transmit Error Counter>127).
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_BOF     :  Bus-off Interrupt
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           CAN enters the bus-off state. The bus-off state is 
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           entered on TEC overflow, greater than 255.
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           This Flag is cleared only by hardware.
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                   
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_LEC     :  Last error code Interrupt        
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending  when
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           a message has been transferred (reception or
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           transmission) with error, and the error code is hold.
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         CAN_IT_ERR     :  Error Interrupt
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           if enabled, this interrupt source is pending when 
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                           an error condition is pending.      
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                       
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   Managing the CAN controller events :
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ------------------------------------ 
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   The user should identify which mode will be used in his application to manage 
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   the CAN controller events: Polling mode or Interrupt mode.
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   1.  In the Polling Mode it is advised to use the following functions:
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       - CAN_GetFlagStatus() : to check if flags events occur. 
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       - CAN_ClearFlag()     : to clear the flags events.
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       - CAN_ITConfig()       : to enable or disable the interrupt source.
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       - CAN_GetITStatus()    : to check if Interrupt occurs.
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       - CAN_ClearITPendingBit() : to clear the Interrupt pending Bit (corresponding Flag).
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       @note  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** @endverbatim
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @{
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */ 
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be: 
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   { 
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   { 
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   { 
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   { 
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   { 
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     { 
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return  bitstatus;
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Receive Flags */
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Receive Flags */
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Transmit Flags */
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  {
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     switch (CAN_IT)
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     {
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       default:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = RESET;
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     }
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     itstatus  = RESET;
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return  itstatus;
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval None
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   /* Check the parameters */
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (CAN_IT)
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        break;
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        break;
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     default:
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        break;
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    }
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  /**
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @}
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** /**
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   */
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
  25              		.loc 1 1670 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  31              		.loc 1 1673 0
  32 0000 0842     		tst	r0, r1
  33 0002 01D0     		beq	.L3
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
  34              		.loc 1 1676 0
  35 0004 0120     		movs	r0, #1
  36              	.LVL1:
  37 0006 7047     		bx	lr
  38              	.LVL2:
  39              	.L3:
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   {
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  40              		.loc 1 1681 0
  41 0008 0020     		movs	r0, #0
  42              	.LVL3:
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   }
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   return pendingbitstatus;
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
  43              		.loc 1 1684 0
  44 000a 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE134:
  48              		.align	2
  49              		.global	CAN_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	CAN_DeInit:
  54              	.LFB110:
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
  55              		.loc 1 163 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL4:
  60 000c 08B5     		push	{r3, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 3, -8
  63              		.cfi_offset 14, -4
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CANx == CAN1)
  64              		.loc 1 167 0
  65 000e 0C4B     		ldr	r3, .L7
  66 0010 9842     		cmp	r0, r3
  67 0012 0AD1     		bne	.L5
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
  68              		.loc 1 170 0
  69 0014 4FF00070 		mov	r0, #33554432
  70              	.LVL5:
  71 0018 0121     		movs	r1, #1
  72 001a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  73              	.LVL6:
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  74              		.loc 1 172 0
  75 001e 4FF00070 		mov	r0, #33554432
  76 0022 0021     		movs	r1, #0
  77 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  78              	.LVL7:
  79 0028 08BD     		pop	{r3, pc}
  80              	.LVL8:
  81              	.L5:
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
  82              		.loc 1 177 0
  83 002a 4FF08060 		mov	r0, #67108864
  84              	.LVL9:
  85 002e 0121     		movs	r1, #1
  86 0030 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              	.LVL10:
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  88              		.loc 1 179 0
  89 0034 4FF08060 		mov	r0, #67108864
  90 0038 0021     		movs	r1, #0
  91 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  92              	.LVL11:
  93 003e 08BD     		pop	{r3, pc}
  94              	.L8:
  95              		.align	2
  96              	.L7:
  97 0040 00640040 		.word	1073767424
  98              		.cfi_endproc
  99              	.LFE110:
 101              		.align	2
 102              		.global	CAN_Init
 103              		.thumb
 104              		.thumb_func
 106              	CAN_Init:
 107              	.LFB111:
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 108              		.loc 1 193 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL12:
 114 0044 10B4     		push	{r4}
 115              		.cfi_def_cfa_offset 4
 116              		.cfi_offset 4, -4
 117              	.LVL13:
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 118              		.loc 1 211 0
 119 0046 0368     		ldr	r3, [r0]
 120 0048 23F00203 		bic	r3, r3, #2
 121 004c 0360     		str	r3, [r0]
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 122              		.loc 1 214 0
 123 004e 0368     		ldr	r3, [r0]
 124 0050 43F00103 		orr	r3, r3, #1
 125 0054 0360     		str	r3, [r0]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 126              		.loc 1 195 0
 127 0056 0023     		movs	r3, #0
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 128              		.loc 1 217 0
 129 0058 4FF6FF74 		movw	r4, #65535
 130 005c 00E0     		b	.L10
 131              	.LVL14:
 132              	.L12:
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     wait_ack++;
 133              		.loc 1 219 0
 134 005e 0133     		adds	r3, r3, #1
 135              	.LVL15:
 136              	.L10:
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 137              		.loc 1 217 0 discriminator 1
 138 0060 4268     		ldr	r2, [r0, #4]
 139 0062 12F0010F 		tst	r2, #1
 140 0066 01D1     		bne	.L11
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 141              		.loc 1 217 0 is_stmt 0 discriminator 2
 142 0068 A342     		cmp	r3, r4
 143 006a F8D1     		bne	.L12
 144              	.L11:
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 145              		.loc 1 223 0 is_stmt 1
 146 006c 4368     		ldr	r3, [r0, #4]
 147              	.LVL16:
 148 006e 13F0010F 		tst	r3, #1
 149 0072 6BD0     		beq	.L29
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 150              		.loc 1 230 0
 151 0074 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 152 0076 012B     		cmp	r3, #1
 153 0078 04D1     		bne	.L14
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 154              		.loc 1 232 0
 155 007a 0368     		ldr	r3, [r0]
 156 007c 43F08003 		orr	r3, r3, #128
 157 0080 0360     		str	r3, [r0]
 158 0082 03E0     		b	.L15
 159              	.L14:
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 160              		.loc 1 236 0
 161 0084 0368     		ldr	r3, [r0]
 162 0086 23F08003 		bic	r3, r3, #128
 163 008a 0360     		str	r3, [r0]
 164              	.L15:
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 165              		.loc 1 240 0
 166 008c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 167 008e 012B     		cmp	r3, #1
 168 0090 04D1     		bne	.L16
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 169              		.loc 1 242 0
 170 0092 0368     		ldr	r3, [r0]
 171 0094 43F04003 		orr	r3, r3, #64
 172 0098 0360     		str	r3, [r0]
 173 009a 03E0     		b	.L17
 174              	.L16:
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 175              		.loc 1 246 0
 176 009c 0368     		ldr	r3, [r0]
 177 009e 23F04003 		bic	r3, r3, #64
 178 00a2 0360     		str	r3, [r0]
 179              	.L17:
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 180              		.loc 1 250 0
 181 00a4 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 182 00a6 012B     		cmp	r3, #1
 183 00a8 04D1     		bne	.L18
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 184              		.loc 1 252 0
 185 00aa 0368     		ldr	r3, [r0]
 186 00ac 43F02003 		orr	r3, r3, #32
 187 00b0 0360     		str	r3, [r0]
 188 00b2 03E0     		b	.L19
 189              	.L18:
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 190              		.loc 1 256 0
 191 00b4 0368     		ldr	r3, [r0]
 192 00b6 23F02003 		bic	r3, r3, #32
 193 00ba 0360     		str	r3, [r0]
 194              	.L19:
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 195              		.loc 1 260 0
 196 00bc 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 197 00be 012B     		cmp	r3, #1
 198 00c0 04D1     		bne	.L20
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 199              		.loc 1 262 0
 200 00c2 0368     		ldr	r3, [r0]
 201 00c4 43F01003 		orr	r3, r3, #16
 202 00c8 0360     		str	r3, [r0]
 203 00ca 03E0     		b	.L21
 204              	.L20:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 205              		.loc 1 266 0
 206 00cc 0368     		ldr	r3, [r0]
 207 00ce 23F01003 		bic	r3, r3, #16
 208 00d2 0360     		str	r3, [r0]
 209              	.L21:
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 210              		.loc 1 270 0
 211 00d4 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 212 00d6 012B     		cmp	r3, #1
 213 00d8 04D1     		bne	.L22
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 214              		.loc 1 272 0
 215 00da 0368     		ldr	r3, [r0]
 216 00dc 43F00803 		orr	r3, r3, #8
 217 00e0 0360     		str	r3, [r0]
 218 00e2 03E0     		b	.L23
 219              	.L22:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 220              		.loc 1 276 0
 221 00e4 0368     		ldr	r3, [r0]
 222 00e6 23F00803 		bic	r3, r3, #8
 223 00ea 0360     		str	r3, [r0]
 224              	.L23:
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 225              		.loc 1 280 0
 226 00ec CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 227 00ee 012B     		cmp	r3, #1
 228 00f0 04D1     		bne	.L24
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 229              		.loc 1 282 0
 230 00f2 0368     		ldr	r3, [r0]
 231 00f4 43F00403 		orr	r3, r3, #4
 232 00f8 0360     		str	r3, [r0]
 233 00fa 03E0     		b	.L25
 234              	.L24:
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 235              		.loc 1 286 0
 236 00fc 0368     		ldr	r3, [r0]
 237 00fe 23F00403 		bic	r3, r3, #4
 238 0102 0360     		str	r3, [r0]
 239              	.L25:
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 240              		.loc 1 290 0
 241 0104 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 242              		.loc 1 291 0
 243 0106 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 244 0108 1B06     		lsls	r3, r3, #24
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 245              		.loc 1 290 0
 246 010a 43EA8273 		orr	r3, r3, r2, lsl #30
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 247              		.loc 1 292 0
 248 010e 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 249              		.loc 1 291 0
 250 0110 43EA0243 		orr	r3, r3, r2, lsl #16
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 251              		.loc 1 293 0
 252 0114 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 253              		.loc 1 292 0
 254 0116 43EA0252 		orr	r2, r3, r2, lsl #20
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 255              		.loc 1 294 0
 256 011a 0B88     		ldrh	r3, [r1]
 257 011c 013B     		subs	r3, r3, #1
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 258              		.loc 1 293 0
 259 011e 1343     		orrs	r3, r3, r2
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 260              		.loc 1 290 0
 261 0120 C361     		str	r3, [r0, #28]
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 262              		.loc 1 297 0
 263 0122 0368     		ldr	r3, [r0]
 264 0124 23F00103 		bic	r3, r3, #1
 265 0128 0360     		str	r3, [r0]
 266              	.LVL17:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    wait_ack = 0;
 267              		.loc 1 300 0
 268 012a 0023     		movs	r3, #0
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 269              		.loc 1 302 0
 270 012c 4FF6FF71 		movw	r1, #65535
 271              	.LVL18:
 272 0130 00E0     		b	.L26
 273              	.LVL19:
 274              	.L28:
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      wait_ack++;
 275              		.loc 1 304 0
 276 0132 0133     		adds	r3, r3, #1
 277              	.LVL20:
 278              	.L26:
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 279              		.loc 1 302 0 discriminator 1
 280 0134 4268     		ldr	r2, [r0, #4]
 281 0136 12F0010F 		tst	r2, #1
 282 013a 01D0     		beq	.L27
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 283              		.loc 1 302 0 is_stmt 0 discriminator 2
 284 013c 8B42     		cmp	r3, r1
 285 013e F8D1     		bne	.L28
 286              	.L27:
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 287              		.loc 1 308 0 is_stmt 1
 288 0140 4368     		ldr	r3, [r0, #4]
 289              	.LVL21:
 290 0142 13F0010F 		tst	r3, #1
 291 0146 03D0     		beq	.L30
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 292              		.loc 1 310 0
 293 0148 0020     		movs	r0, #0
 294              	.LVL22:
 295 014a 02E0     		b	.L13
 296              	.LVL23:
 297              	.L29:
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 298              		.loc 1 225 0
 299 014c 0020     		movs	r0, #0
 300              	.LVL24:
 301 014e 00E0     		b	.L13
 302              	.LVL25:
 303              	.L30:
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 304              		.loc 1 314 0
 305 0150 0120     		movs	r0, #1
 306              	.LVL26:
 307              	.L13:
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 308              		.loc 1 320 0
 309 0152 5DF8044B 		ldr	r4, [sp], #4
 310 0156 7047     		bx	lr
 311              		.cfi_endproc
 312              	.LFE111:
 314              		.align	2
 315              		.global	CAN_FilterInit
 316              		.thumb
 317              		.thumb_func
 319              	CAN_FilterInit:
 320              	.LFB112:
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 321              		.loc 1 330 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326              	.LVL27:
 327 0158 70B4     		push	{r4, r5, r6}
 328              		.cfi_def_cfa_offset 12
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 5, -8
 331              		.cfi_offset 6, -4
 332              	.LVL28:
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 333              		.loc 1 339 0
 334 015a 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 335 015c 0121     		movs	r1, #1
 336 015e 9940     		lsls	r1, r1, r3
 337              	.LVL29:
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 338              		.loc 1 342 0
 339 0160 384B     		ldr	r3, .L39
 340 0162 D3F80022 		ldr	r2, [r3, #512]
 341 0166 42F00102 		orr	r2, r2, #1
 342 016a C3F80022 		str	r2, [r3, #512]
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 343              		.loc 1 345 0
 344 016e D3F81C42 		ldr	r4, [r3, #540]
 345 0172 CA43     		mvns	r2, r1
 346 0174 1440     		ands	r4, r4, r2
 347 0176 C3F81C42 		str	r4, [r3, #540]
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 348              		.loc 1 348 0
 349 017a 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 350 017c B3B9     		cbnz	r3, .L32
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 351              		.loc 1 351 0
 352 017e 314B     		ldr	r3, .L39
 353 0180 D3F80C42 		ldr	r4, [r3, #524]
 354 0184 1440     		ands	r4, r4, r2
 355 0186 C3F80C42 		str	r4, [r3, #524]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 356              		.loc 1 355 0
 357 018a 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 358              		.loc 1 356 0
 359 018c C688     		ldrh	r6, [r0, #6]
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 360              		.loc 1 357 0
 361 018e 4588     		ldrh	r5, [r0, #2]
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 362              		.loc 1 356 0
 363 0190 45EA0645 		orr	r5, r5, r6, lsl #16
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 364              		.loc 1 355 0
 365 0194 4834     		adds	r4, r4, #72
 366 0196 43F83450 		str	r5, [r3, r4, lsl #3]
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 367              		.loc 1 361 0
 368 019a 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 369              		.loc 1 362 0
 370 019c 8688     		ldrh	r6, [r0, #4]
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 371              		.loc 1 363 0
 372 019e 0488     		ldrh	r4, [r0]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 373              		.loc 1 362 0
 374 01a0 44EA0644 		orr	r4, r4, r6, lsl #16
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 375              		.loc 1 361 0
 376 01a4 4835     		adds	r5, r5, #72
 377 01a6 03EBC503 		add	r3, r3, r5, lsl #3
 378 01aa 5C60     		str	r4, [r3, #4]
 379              	.L32:
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 380              		.loc 1 366 0
 381 01ac 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 382 01ae 012B     		cmp	r3, #1
 383 01b0 16D1     		bne	.L33
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 384              		.loc 1 369 0
 385 01b2 244B     		ldr	r3, .L39
 386 01b4 D3F80C42 		ldr	r4, [r3, #524]
 387 01b8 0C43     		orrs	r4, r4, r1
 388 01ba C3F80C42 		str	r4, [r3, #524]
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 389              		.loc 1 371 0
 390 01be 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 391              		.loc 1 372 0
 392 01c0 0688     		ldrh	r6, [r0]
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 393              		.loc 1 373 0
 394 01c2 4588     		ldrh	r5, [r0, #2]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 395              		.loc 1 372 0
 396 01c4 45EA0645 		orr	r5, r5, r6, lsl #16
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 397              		.loc 1 371 0
 398 01c8 4834     		adds	r4, r4, #72
 399 01ca 43F83450 		str	r5, [r3, r4, lsl #3]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 400              		.loc 1 375 0
 401 01ce 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 402              		.loc 1 376 0
 403 01d0 8688     		ldrh	r6, [r0, #4]
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404              		.loc 1 377 0
 405 01d2 C488     		ldrh	r4, [r0, #6]
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 406              		.loc 1 376 0
 407 01d4 44EA0644 		orr	r4, r4, r6, lsl #16
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 408              		.loc 1 375 0
 409 01d8 4835     		adds	r5, r5, #72
 410 01da 03EBC503 		add	r3, r3, r5, lsl #3
 411 01de 5C60     		str	r4, [r3, #4]
 412              	.L33:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 413              		.loc 1 381 0
 414 01e0 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 415 01e2 33B9     		cbnz	r3, .L34
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 416              		.loc 1 384 0
 417 01e4 174B     		ldr	r3, .L39
 418 01e6 D3F80442 		ldr	r4, [r3, #516]
 419 01ea 1440     		ands	r4, r4, r2
 420 01ec C3F80442 		str	r4, [r3, #516]
 421 01f0 05E0     		b	.L35
 422              	.L34:
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 423              		.loc 1 389 0
 424 01f2 144B     		ldr	r3, .L39
 425 01f4 D3F80442 		ldr	r4, [r3, #516]
 426 01f8 0C43     		orrs	r4, r4, r1
 427 01fa C3F80442 		str	r4, [r3, #516]
 428              	.L35:
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 429              		.loc 1 393 0
 430 01fe 0389     		ldrh	r3, [r0, #8]
 431 0200 2BB9     		cbnz	r3, .L36
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 432              		.loc 1 396 0
 433 0202 104B     		ldr	r3, .L39
 434 0204 D3F81442 		ldr	r4, [r3, #532]
 435 0208 2240     		ands	r2, r2, r4
 436 020a C3F81422 		str	r2, [r3, #532]
 437              	.L36:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 438              		.loc 1 399 0
 439 020e 0389     		ldrh	r3, [r0, #8]
 440 0210 012B     		cmp	r3, #1
 441 0212 05D1     		bne	.L37
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 442              		.loc 1 402 0
 443 0214 0B4B     		ldr	r3, .L39
 444 0216 D3F81422 		ldr	r2, [r3, #532]
 445 021a 0A43     		orrs	r2, r2, r1
 446 021c C3F81422 		str	r2, [r3, #532]
 447              	.L37:
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 448              		.loc 1 406 0
 449 0220 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 450 0222 012B     		cmp	r3, #1
 451 0224 05D1     		bne	.L38
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 452              		.loc 1 408 0
 453 0226 074B     		ldr	r3, .L39
 454 0228 D3F81C22 		ldr	r2, [r3, #540]
 455 022c 1143     		orrs	r1, r1, r2
 456              	.LVL30:
 457 022e C3F81C12 		str	r1, [r3, #540]
 458              	.L38:
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 459              		.loc 1 412 0
 460 0232 044B     		ldr	r3, .L39
 461 0234 D3F80022 		ldr	r2, [r3, #512]
 462 0238 22F00102 		bic	r2, r2, #1
 463 023c C3F80022 		str	r2, [r3, #512]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 464              		.loc 1 413 0
 465 0240 70BC     		pop	{r4, r5, r6}
 466 0242 7047     		bx	lr
 467              	.L40:
 468              		.align	2
 469              	.L39:
 470 0244 00640040 		.word	1073767424
 471              		.cfi_endproc
 472              	.LFE112:
 474              		.align	2
 475              		.global	CAN_StructInit
 476              		.thumb
 477              		.thumb_func
 479              	CAN_StructInit:
 480              	.LFB113:
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 481              		.loc 1 421 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486              	.LVL31:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 487              		.loc 1 425 0
 488 0248 0023     		movs	r3, #0
 489 024a 8371     		strb	r3, [r0, #6]
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 490              		.loc 1 428 0
 491 024c C371     		strb	r3, [r0, #7]
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 492              		.loc 1 431 0
 493 024e 0372     		strb	r3, [r0, #8]
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 494              		.loc 1 434 0
 495 0250 4372     		strb	r3, [r0, #9]
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 496              		.loc 1 437 0
 497 0252 8372     		strb	r3, [r0, #10]
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 498              		.loc 1 440 0
 499 0254 C372     		strb	r3, [r0, #11]
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 500              		.loc 1 443 0
 501 0256 8370     		strb	r3, [r0, #2]
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 502              		.loc 1 446 0
 503 0258 C370     		strb	r3, [r0, #3]
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 504              		.loc 1 449 0
 505 025a 0323     		movs	r3, #3
 506 025c 0371     		strb	r3, [r0, #4]
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 507              		.loc 1 452 0
 508 025e 0223     		movs	r3, #2
 509 0260 4371     		strb	r3, [r0, #5]
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 510              		.loc 1 455 0
 511 0262 0123     		movs	r3, #1
 512 0264 0380     		strh	r3, [r0]	@ movhi
 513 0266 7047     		bx	lr
 514              		.cfi_endproc
 515              	.LFE113:
 517              		.align	2
 518              		.global	CAN_SlaveStartBank
 519              		.thumb
 520              		.thumb_func
 522              	CAN_SlaveStartBank:
 523              	.LFB114:
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 524              		.loc 1 464 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL32:
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 530              		.loc 1 469 0
 531 0268 0D4B     		ldr	r3, .L43
 532 026a D3F80022 		ldr	r2, [r3, #512]
 533 026e 42F00102 		orr	r2, r2, #1
 534 0272 C3F80022 		str	r2, [r3, #512]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 535              		.loc 1 472 0
 536 0276 D3F80022 		ldr	r2, [r3, #512]
 537 027a 22F47C52 		bic	r2, r2, #16128
 538 027e 22F00E02 		bic	r2, r2, #14
 539 0282 C3F80022 		str	r2, [r3, #512]
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 540              		.loc 1 473 0
 541 0286 D3F80022 		ldr	r2, [r3, #512]
 542 028a 42EA0020 		orr	r0, r2, r0, lsl #8
 543              	.LVL33:
 544 028e C3F80002 		str	r0, [r3, #512]
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 545              		.loc 1 476 0
 546 0292 D3F80022 		ldr	r2, [r3, #512]
 547 0296 22F00102 		bic	r2, r2, #1
 548 029a C3F80022 		str	r2, [r3, #512]
 549 029e 7047     		bx	lr
 550              	.L44:
 551              		.align	2
 552              	.L43:
 553 02a0 00640040 		.word	1073767424
 554              		.cfi_endproc
 555              	.LFE114:
 557              		.align	2
 558              		.global	CAN_DBGFreeze
 559              		.thumb
 560              		.thumb_func
 562              	CAN_DBGFreeze:
 563              	.LFB115:
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 564              		.loc 1 489 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL34:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 570              		.loc 1 494 0
 571 02a4 21B1     		cbz	r1, .L46
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 572              		.loc 1 497 0
 573 02a6 0368     		ldr	r3, [r0]
 574 02a8 43F48033 		orr	r3, r3, #65536
 575 02ac 0360     		str	r3, [r0]
 576 02ae 7047     		bx	lr
 577              	.L46:
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 578              		.loc 1 502 0
 579 02b0 0368     		ldr	r3, [r0]
 580 02b2 23F48033 		bic	r3, r3, #65536
 581 02b6 0360     		str	r3, [r0]
 582 02b8 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE115:
 586 02ba 00BF     		.align	2
 587              		.global	CAN_TTComModeCmd
 588              		.thumb
 589              		.thumb_func
 591              	CAN_TTComModeCmd:
 592              	.LFB116:
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 593              		.loc 1 519 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 0
 596              		@ frame_needed = 0, uses_anonymous_args = 0
 597              		@ link register save eliminated.
 598              	.LVL35:
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 599              		.loc 1 523 0
 600 02bc B1B1     		cbz	r1, .L49
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 601              		.loc 1 526 0
 602 02be 0368     		ldr	r3, [r0]
 603 02c0 43F08003 		orr	r3, r3, #128
 604 02c4 0360     		str	r3, [r0]
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 605              		.loc 1 529 0
 606 02c6 D0F88431 		ldr	r3, [r0, #388]
 607 02ca 43F48073 		orr	r3, r3, #256
 608 02ce C0F88431 		str	r3, [r0, #388]
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 609              		.loc 1 530 0
 610 02d2 D0F89431 		ldr	r3, [r0, #404]
 611 02d6 43F48073 		orr	r3, r3, #256
 612 02da C0F89431 		str	r3, [r0, #404]
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 613              		.loc 1 531 0
 614 02de D0F8A431 		ldr	r3, [r0, #420]
 615 02e2 43F48073 		orr	r3, r3, #256
 616 02e6 C0F8A431 		str	r3, [r0, #420]
 617 02ea 7047     		bx	lr
 618              	.L49:
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 619              		.loc 1 536 0
 620 02ec 0368     		ldr	r3, [r0]
 621 02ee 23F08003 		bic	r3, r3, #128
 622 02f2 0360     		str	r3, [r0]
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 623              		.loc 1 539 0
 624 02f4 D0F88431 		ldr	r3, [r0, #388]
 625 02f8 23F48073 		bic	r3, r3, #256
 626 02fc C0F88431 		str	r3, [r0, #388]
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 627              		.loc 1 540 0
 628 0300 D0F89431 		ldr	r3, [r0, #404]
 629 0304 23F48073 		bic	r3, r3, #256
 630 0308 C0F89431 		str	r3, [r0, #404]
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 631              		.loc 1 541 0
 632 030c D0F8A431 		ldr	r3, [r0, #420]
 633 0310 23F48073 		bic	r3, r3, #256
 634 0314 C0F8A431 		str	r3, [r0, #420]
 635 0318 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE116:
 639 031a 00BF     		.align	2
 640              		.global	CAN_Transmit
 641              		.thumb
 642              		.thumb_func
 644              	CAN_Transmit:
 645              	.LFB117:
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 646              		.loc 1 573 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651              	.LVL36:
 652 031c F0B4     		push	{r4, r5, r6, r7}
 653              		.cfi_def_cfa_offset 16
 654              		.cfi_offset 4, -16
 655              		.cfi_offset 5, -12
 656              		.cfi_offset 6, -8
 657              		.cfi_offset 7, -4
 658 031e 0346     		mov	r3, r0
 659              	.LVL37:
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 660              		.loc 1 582 0
 661 0320 8268     		ldr	r2, [r0, #8]
 662 0322 12F0806F 		tst	r2, #67108864
 663 0326 09D1     		bne	.L56
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 664              		.loc 1 586 0
 665 0328 8268     		ldr	r2, [r0, #8]
 666 032a 12F0006F 		tst	r2, #134217728
 667 032e 07D1     		bne	.L57
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 668              		.loc 1 590 0
 669 0330 8268     		ldr	r2, [r0, #8]
 670 0332 12F0805F 		tst	r2, #268435456
 671 0336 05D0     		beq	.L58
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 672              		.loc 1 592 0
 673 0338 0220     		movs	r0, #2
 674              	.LVL38:
 675 033a 04E0     		b	.L52
 676              	.LVL39:
 677              	.L56:
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 678              		.loc 1 584 0
 679 033c 0020     		movs	r0, #0
 680              	.LVL40:
 681 033e 02E0     		b	.L52
 682              	.LVL41:
 683              	.L57:
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 684              		.loc 1 588 0
 685 0340 0120     		movs	r0, #1
 686              	.LVL42:
 687 0342 00E0     		b	.L52
 688              	.LVL43:
 689              	.L58:
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 690              		.loc 1 596 0
 691 0344 0420     		movs	r0, #4
 692              	.LVL44:
 693              	.L52:
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 694              		.loc 1 599 0
 695 0346 0428     		cmp	r0, #4
 696 0348 50D0     		beq	.L53
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 697              		.loc 1 602 0
 698 034a 0546     		mov	r5, r0
 699 034c 00F11802 		add	r2, r0, #24
 700 0350 1201     		lsls	r2, r2, #4
 701 0352 9C58     		ldr	r4, [r3, r2]
 702 0354 04F00104 		and	r4, r4, #1
 703 0358 9C50     		str	r4, [r3, r2]
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 704              		.loc 1 603 0
 705 035a 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 706 035c 52B9     		cbnz	r2, .L54
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 707              		.loc 1 606 0
 708 035e 00F11802 		add	r2, r0, #24
 709 0362 1201     		lsls	r2, r2, #4
 710 0364 9E58     		ldr	r6, [r3, r2]
 711 0366 0C68     		ldr	r4, [r1]
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 712              		.loc 1 607 0
 713 0368 4F7A     		ldrb	r7, [r1, #9]	@ zero_extendqisi2
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 714              		.loc 1 606 0
 715 036a 47EA4454 		orr	r4, r7, r4, lsl #21
 716 036e 3443     		orrs	r4, r4, r6
 717 0370 9C50     		str	r4, [r3, r2]
 718 0372 0CE0     		b	.L55
 719              	.L54:
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 720              		.loc 1 612 0
 721 0374 00F11804 		add	r4, r0, #24
 722 0378 2401     		lsls	r4, r4, #4
 723 037a 1F59     		ldr	r7, [r3, r4]
 724 037c 4E68     		ldr	r6, [r1, #4]
 725 037e 42EAC602 		orr	r2, r2, r6, lsl #3
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 726              		.loc 1 614 0
 727 0382 91F809C0 		ldrb	ip, [r1, #9]	@ zero_extendqisi2
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 728              		.loc 1 613 0
 729 0386 42EA0C02 		orr	r2, r2, ip
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 730              		.loc 1 612 0
 731 038a 3A43     		orrs	r2, r2, r7
 732 038c 1A51     		str	r2, [r3, r4]
 733              	.L55:
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 734              		.loc 1 618 0
 735 038e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 736 0390 02F00F02 		and	r2, r2, #15
 737 0394 8A72     		strb	r2, [r1, #10]
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 738              		.loc 1 619 0
 739 0396 05F11804 		add	r4, r5, #24
 740 039a 2401     		lsls	r4, r4, #4
 741 039c 1A19     		adds	r2, r3, r4
 742 039e 5668     		ldr	r6, [r2, #4]
 743 03a0 26F00F06 		bic	r6, r6, #15
 744 03a4 5660     		str	r6, [r2, #4]
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 745              		.loc 1 620 0
 746 03a6 5768     		ldr	r7, [r2, #4]
 747 03a8 8E7A     		ldrb	r6, [r1, #10]	@ zero_extendqisi2
 748 03aa 3E43     		orrs	r6, r6, r7
 749 03ac 5660     		str	r6, [r2, #4]
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 750              		.loc 1 623 0
 751 03ae 8A7B     		ldrb	r2, [r1, #14]	@ zero_extendqisi2
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 752              		.loc 1 624 0
 753 03b0 4E7B     		ldrb	r6, [r1, #13]	@ zero_extendqisi2
 754 03b2 3604     		lsls	r6, r6, #16
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 755              		.loc 1 623 0
 756 03b4 46EA0266 		orr	r6, r6, r2, lsl #24
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 757              		.loc 1 625 0
 758 03b8 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 759              		.loc 1 624 0
 760 03ba 46EA0226 		orr	r6, r6, r2, lsl #8
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 761              		.loc 1 626 0
 762 03be CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 763              		.loc 1 625 0
 764 03c0 1643     		orrs	r6, r6, r2
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 765              		.loc 1 623 0
 766 03c2 03EB0512 		add	r2, r3, r5, lsl #4
 767 03c6 02F5C475 		add	r5, r2, #392
 768 03ca C2F88861 		str	r6, [r2, #392]
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 769              		.loc 1 627 0
 770 03ce 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 771              		.loc 1 628 0
 772 03d0 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 773 03d2 1204     		lsls	r2, r2, #16
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 774              		.loc 1 627 0
 775 03d4 42EA0662 		orr	r2, r2, r6, lsl #24
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 776              		.loc 1 629 0
 777 03d8 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 778              		.loc 1 628 0
 779 03da 42EA0622 		orr	r2, r2, r6, lsl #8
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 780              		.loc 1 630 0
 781 03de C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 782              	.LVL45:
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 783              		.loc 1 629 0
 784 03e0 0A43     		orrs	r2, r2, r1
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 785              		.loc 1 627 0
 786 03e2 6A60     		str	r2, [r5, #4]
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 787              		.loc 1 632 0
 788 03e4 1A59     		ldr	r2, [r3, r4]
 789 03e6 42F00102 		orr	r2, r2, #1
 790 03ea 1A51     		str	r2, [r3, r4]
 791              	.L53:
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 792              		.loc 1 635 0
 793 03ec F0BC     		pop	{r4, r5, r6, r7}
 794 03ee 7047     		bx	lr
 795              		.cfi_endproc
 796              	.LFE117:
 798              		.align	2
 799              		.global	CAN_TransmitStatus
 800              		.thumb
 801              		.thumb_func
 803              	CAN_TransmitStatus:
 804              	.LFB118:
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 805              		.loc 1 645 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL46:
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 811              		.loc 1 652 0
 812 03f0 0129     		cmp	r1, #1
 813 03f2 0DD0     		beq	.L61
 814 03f4 11B1     		cbz	r1, .L62
 815 03f6 0229     		cmp	r1, #2
 816 03f8 0ED0     		beq	.L63
 817 03fa 15E0     		b	.L72
 818              	.L62:
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 819              		.loc 1 655 0
 820 03fc 8368     		ldr	r3, [r0, #8]
 821 03fe 23F07B43 		bic	r3, r3, #-83886080
 822 0402 23F47F03 		bic	r3, r3, #16711680
 823 0406 23F47F43 		bic	r3, r3, #65280
 824 040a 23F0FC03 		bic	r3, r3, #252
 825              	.LVL47:
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 826              		.loc 1 656 0
 827 040e 0CE0     		b	.L60
 828              	.LVL48:
 829              	.L61:
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 830              		.loc 1 658 0
 831 0410 8268     		ldr	r2, [r0, #8]
 832 0412 114B     		ldr	r3, .L73
 833 0414 1340     		ands	r3, r3, r2
 834              	.LVL49:
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 835              		.loc 1 659 0
 836 0416 08E0     		b	.L60
 837              	.LVL50:
 838              	.L63:
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 839              		.loc 1 661 0
 840 0418 8368     		ldr	r3, [r0, #8]
 841 041a 23F06F43 		bic	r3, r3, #-285212672
 842 041e 23F47C03 		bic	r3, r3, #16515072
 843 0422 1B0C     		lsrs	r3, r3, #16
 844 0424 1B04     		lsls	r3, r3, #16
 845              	.LVL51:
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 846              		.loc 1 662 0
 847 0426 00E0     		b	.L60
 848              	.LVL52:
 849              	.L72:
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 850              		.loc 1 664 0
 851 0428 0023     		movs	r3, #0
 852              	.LVL53:
 853              	.L60:
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (state)
 854              		.loc 1 667 0
 855 042a 0C4A     		ldr	r2, .L73+4
 856 042c 9342     		cmp	r3, r2
 857 042e 0BD0     		beq	.L65
 858 0430 01D8     		bhi	.L66
 859 0432 3BB1     		cbz	r3, .L67
 860 0434 0EE0     		b	.L71
 861              	.L66:
 862 0436 084A     		ldr	r2, .L73
 863 0438 9342     		cmp	r3, r2
 864 043a 07D0     		beq	.L68
 865 043c 084A     		ldr	r2, .L73+8
 866 043e 9342     		cmp	r3, r2
 867 0440 06D0     		beq	.L69
 868 0442 07E0     		b	.L71
 869              	.L67:
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 870              		.loc 1 670 0
 871 0444 0220     		movs	r0, #2
 872              	.LVL54:
 873 0446 7047     		bx	lr
 874              	.LVL55:
 875              	.L65:
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 876              		.loc 1 680 0
 877 0448 0120     		movs	r0, #1
 878              	.LVL56:
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 879              		.loc 1 681 0
 880 044a 7047     		bx	lr
 881              	.LVL57:
 882              	.L68:
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 883              		.loc 1 682 0
 884 044c 0120     		movs	r0, #1
 885              	.LVL58:
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 886              		.loc 1 683 0
 887 044e 7047     		bx	lr
 888              	.LVL59:
 889              	.L69:
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 890              		.loc 1 684 0
 891 0450 0120     		movs	r0, #1
 892              	.LVL60:
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 893              		.loc 1 685 0
 894 0452 7047     		bx	lr
 895              	.LVL61:
 896              	.L71:
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 897              		.loc 1 673 0
 898 0454 0020     		movs	r0, #0
 899              	.LVL62:
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 900              		.loc 1 690 0
 901 0456 7047     		bx	lr
 902              	.L74:
 903              		.align	2
 904              	.L73:
 905 0458 00030008 		.word	134218496
 906 045c 03000004 		.word	67108867
 907 0460 00000310 		.word	268632064
 908              		.cfi_endproc
 909              	.LFE118:
 911              		.align	2
 912              		.global	CAN_CancelTransmit
 913              		.thumb
 914              		.thumb_func
 916              	CAN_CancelTransmit:
 917              	.LFB119:
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 918              		.loc 1 699 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              		@ link register save eliminated.
 923              	.LVL63:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (Mailbox)
 924              		.loc 1 704 0
 925 0464 0129     		cmp	r1, #1
 926 0466 08D0     		beq	.L77
 927 0468 11B1     		cbz	r1, .L78
 928 046a 0229     		cmp	r1, #2
 929 046c 0AD0     		beq	.L79
 930 046e 7047     		bx	lr
 931              	.L78:
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 932              		.loc 1 706 0
 933 0470 8368     		ldr	r3, [r0, #8]
 934 0472 43F08003 		orr	r3, r3, #128
 935 0476 8360     		str	r3, [r0, #8]
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 936              		.loc 1 707 0
 937 0478 7047     		bx	lr
 938              	.L77:
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 939              		.loc 1 708 0
 940 047a 8368     		ldr	r3, [r0, #8]
 941 047c 43F40043 		orr	r3, r3, #32768
 942 0480 8360     		str	r3, [r0, #8]
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 943              		.loc 1 709 0
 944 0482 7047     		bx	lr
 945              	.L79:
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 946              		.loc 1 710 0
 947 0484 8368     		ldr	r3, [r0, #8]
 948 0486 43F40003 		orr	r3, r3, #8388608
 949 048a 8360     		str	r3, [r0, #8]
 950 048c 7047     		bx	lr
 951              		.cfi_endproc
 952              	.LFE119:
 954 048e 00BF     		.align	2
 955              		.global	CAN_Receive
 956              		.thumb
 957              		.thumb_func
 959              	CAN_Receive:
 960              	.LFB120:
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 961              		.loc 1 746 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 0
 964              		@ frame_needed = 0, uses_anonymous_args = 0
 965              		@ link register save eliminated.
 966              	.LVL64:
 967 0490 30B4     		push	{r4, r5}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 4, -8
 970              		.cfi_offset 5, -4
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 971              		.loc 1 751 0
 972 0492 01F11B03 		add	r3, r1, #27
 973 0496 1B01     		lsls	r3, r3, #4
 974 0498 C358     		ldr	r3, [r0, r3]
 975 049a 03F00403 		and	r3, r3, #4
 976 049e DBB2     		uxtb	r3, r3
 977 04a0 1372     		strb	r3, [r2, #8]
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 978              		.loc 1 752 0
 979 04a2 33B9     		cbnz	r3, .L81
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 980              		.loc 1 754 0
 981 04a4 01F11B03 		add	r3, r1, #27
 982 04a8 1B01     		lsls	r3, r3, #4
 983 04aa C358     		ldr	r3, [r0, r3]
 984 04ac 5B0D     		lsrs	r3, r3, #21
 985 04ae 1360     		str	r3, [r2]
 986 04b0 05E0     		b	.L82
 987              	.L81:
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 988              		.loc 1 758 0
 989 04b2 01F11B03 		add	r3, r1, #27
 990 04b6 1B01     		lsls	r3, r3, #4
 991 04b8 C358     		ldr	r3, [r0, r3]
 992 04ba DB08     		lsrs	r3, r3, #3
 993 04bc 5360     		str	r3, [r2, #4]
 994              	.L82:
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 995              		.loc 1 761 0
 996 04be 01F11B04 		add	r4, r1, #27
 997 04c2 2401     		lsls	r4, r4, #4
 998 04c4 0319     		adds	r3, r0, r4
 999 04c6 0459     		ldr	r4, [r0, r4]
 1000 04c8 04F00204 		and	r4, r4, #2
 1001 04cc 5472     		strb	r4, [r2, #9]
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 1002              		.loc 1 763 0
 1003 04ce 5C68     		ldr	r4, [r3, #4]
 1004 04d0 04F00F04 		and	r4, r4, #15
 1005 04d4 9472     		strb	r4, [r2, #10]
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1006              		.loc 1 765 0
 1007 04d6 5B68     		ldr	r3, [r3, #4]
 1008 04d8 1B0A     		lsrs	r3, r3, #8
 1009 04da D374     		strb	r3, [r2, #19]
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1010              		.loc 1 767 0
 1011 04dc 00EB0113 		add	r3, r0, r1, lsl #4
 1012 04e0 03F5DC74 		add	r4, r3, #440
 1013 04e4 D3F8B851 		ldr	r5, [r3, #440]
 1014 04e8 D572     		strb	r5, [r2, #11]
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1015              		.loc 1 768 0
 1016 04ea D3F8B851 		ldr	r5, [r3, #440]
 1017 04ee 2D0A     		lsrs	r5, r5, #8
 1018 04f0 1573     		strb	r5, [r2, #12]
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1019              		.loc 1 769 0
 1020 04f2 D3F8B851 		ldr	r5, [r3, #440]
 1021 04f6 2D0C     		lsrs	r5, r5, #16
 1022 04f8 5573     		strb	r5, [r2, #13]
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1023              		.loc 1 770 0
 1024 04fa D3F8B831 		ldr	r3, [r3, #440]
 1025 04fe 1B0E     		lsrs	r3, r3, #24
 1026 0500 9373     		strb	r3, [r2, #14]
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1027              		.loc 1 771 0
 1028 0502 6368     		ldr	r3, [r4, #4]
 1029 0504 D373     		strb	r3, [r2, #15]
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1030              		.loc 1 772 0
 1031 0506 6368     		ldr	r3, [r4, #4]
 1032 0508 1B0A     		lsrs	r3, r3, #8
 1033 050a 1374     		strb	r3, [r2, #16]
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1034              		.loc 1 773 0
 1035 050c 6368     		ldr	r3, [r4, #4]
 1036 050e 1B0C     		lsrs	r3, r3, #16
 1037 0510 5374     		strb	r3, [r2, #17]
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1038              		.loc 1 774 0
 1039 0512 6368     		ldr	r3, [r4, #4]
 1040 0514 1B0E     		lsrs	r3, r3, #24
 1041 0516 9374     		strb	r3, [r2, #18]
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1042              		.loc 1 777 0
 1043 0518 21B9     		cbnz	r1, .L83
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1044              		.loc 1 779 0
 1045 051a C368     		ldr	r3, [r0, #12]
 1046 051c 43F02003 		orr	r3, r3, #32
 1047 0520 C360     		str	r3, [r0, #12]
 1048 0522 03E0     		b	.L80
 1049              	.L83:
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1050              		.loc 1 784 0
 1051 0524 0369     		ldr	r3, [r0, #16]
 1052 0526 43F02003 		orr	r3, r3, #32
 1053 052a 0361     		str	r3, [r0, #16]
 1054              	.L80:
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1055              		.loc 1 786 0
 1056 052c 30BC     		pop	{r4, r5}
 1057 052e 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE120:
 1061              		.align	2
 1062              		.global	CAN_FIFORelease
 1063              		.thumb
 1064              		.thumb_func
 1066              	CAN_FIFORelease:
 1067              	.LFB121:
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1068              		.loc 1 795 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		@ link register save eliminated.
 1073              	.LVL65:
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1074              		.loc 1 800 0
 1075 0530 21B9     		cbnz	r1, .L86
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1076              		.loc 1 802 0
 1077 0532 C368     		ldr	r3, [r0, #12]
 1078 0534 43F02003 		orr	r3, r3, #32
 1079 0538 C360     		str	r3, [r0, #12]
 1080 053a 7047     		bx	lr
 1081              	.L86:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1082              		.loc 1 807 0
 1083 053c 0369     		ldr	r3, [r0, #16]
 1084 053e 43F02003 		orr	r3, r3, #32
 1085 0542 0361     		str	r3, [r0, #16]
 1086 0544 7047     		bx	lr
 1087              		.cfi_endproc
 1088              	.LFE121:
 1090 0546 00BF     		.align	2
 1091              		.global	CAN_MessagePending
 1092              		.thumb
 1093              		.thumb_func
 1095              	CAN_MessagePending:
 1096              	.LFB122:
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1097              		.loc 1 818 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101              		@ link register save eliminated.
 1102              	.LVL66:
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1103              		.loc 1 823 0
 1104 0548 19B9     		cbnz	r1, .L89
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 1105              		.loc 1 825 0
 1106 054a C068     		ldr	r0, [r0, #12]
 1107              	.LVL67:
 1108 054c 00F00300 		and	r0, r0, #3
 1109              	.LVL68:
 1110 0550 7047     		bx	lr
 1111              	.LVL69:
 1112              	.L89:
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 1113              		.loc 1 827 0
 1114 0552 0129     		cmp	r1, #1
 1115 0554 03D1     		bne	.L91
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 1116              		.loc 1 829 0
 1117 0556 0069     		ldr	r0, [r0, #16]
 1118              	.LVL70:
 1119 0558 00F00300 		and	r0, r0, #3
 1120              	.LVL71:
 1121 055c 7047     		bx	lr
 1122              	.LVL72:
 1123              	.L91:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     message_pending = 0;
 1124              		.loc 1 833 0
 1125 055e 0020     		movs	r0, #0
 1126              	.LVL73:
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1127              		.loc 1 836 0
 1128 0560 7047     		bx	lr
 1129              		.cfi_endproc
 1130              	.LFE122:
 1132 0562 00BF     		.align	2
 1133              		.global	CAN_OperatingModeRequest
 1134              		.thumb
 1135              		.thumb_func
 1137              	CAN_OperatingModeRequest:
 1138              	.LFB123:
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1139              		.loc 1 868 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144              	.LVL74:
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 1145              		.loc 1 878 0
 1146 0564 B9B9     		cbnz	r1, .L93
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 1147              		.loc 1 881 0
 1148 0566 0368     		ldr	r3, [r0]
 1149 0568 23F00303 		bic	r3, r3, #3
 1150 056c 43F00103 		orr	r3, r3, #1
 1151 0570 0360     		str	r3, [r0]
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 1152              		.loc 1 872 0
 1153 0572 4FF6FF73 		movw	r3, #65535
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1154              		.loc 1 884 0
 1155 0576 00E0     		b	.L94
 1156              	.LVL75:
 1157              	.L96:
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 1158              		.loc 1 886 0
 1159 0578 013B     		subs	r3, r3, #1
 1160              	.LVL76:
 1161              	.L94:
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1162              		.loc 1 884 0 discriminator 1
 1163 057a 4268     		ldr	r2, [r0, #4]
 1164 057c 02F00302 		and	r2, r2, #3
 1165 0580 012A     		cmp	r2, #1
 1166 0582 01D0     		beq	.L95
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1167              		.loc 1 884 0 is_stmt 0 discriminator 2
 1168 0584 002B     		cmp	r3, #0
 1169 0586 F7D1     		bne	.L96
 1170              	.L95:
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 1171              		.loc 1 888 0 is_stmt 1
 1172 0588 4368     		ldr	r3, [r0, #4]
 1173              	.LVL77:
 1174 058a 03F00303 		and	r3, r3, #3
 1175 058e 012B     		cmp	r3, #1
 1176 0590 31D0     		beq	.L105
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 1177              		.loc 1 890 0
 1178 0592 0020     		movs	r0, #0
 1179              	.LVL78:
 1180 0594 7047     		bx	lr
 1181              	.LVL79:
 1182              	.L93:
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 1183              		.loc 1 897 0
 1184 0596 0129     		cmp	r1, #1
 1185 0598 13D1     		bne	.L98
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 1186              		.loc 1 900 0
 1187 059a 0368     		ldr	r3, [r0]
 1188 059c 23F00303 		bic	r3, r3, #3
 1189 05a0 0360     		str	r3, [r0]
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 1190              		.loc 1 872 0
 1191 05a2 4FF6FF73 		movw	r3, #65535
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1192              		.loc 1 903 0
 1193 05a6 00E0     		b	.L99
 1194              	.LVL80:
 1195              	.L101:
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 1196              		.loc 1 905 0
 1197 05a8 013B     		subs	r3, r3, #1
 1198              	.LVL81:
 1199              	.L99:
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1200              		.loc 1 903 0 discriminator 1
 1201 05aa 4268     		ldr	r2, [r0, #4]
 1202 05ac 12F0030F 		tst	r2, #3
 1203 05b0 01D0     		beq	.L100
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1204              		.loc 1 903 0 is_stmt 0 discriminator 2
 1205 05b2 002B     		cmp	r3, #0
 1206 05b4 F8D1     		bne	.L101
 1207              	.L100:
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 1208              		.loc 1 907 0 is_stmt 1
 1209 05b6 4368     		ldr	r3, [r0, #4]
 1210              	.LVL82:
 1211 05b8 13F0030F 		tst	r3, #3
 1212 05bc 1DD0     		beq	.L106
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 1213              		.loc 1 909 0
 1214 05be 0020     		movs	r0, #0
 1215              	.LVL83:
 1216 05c0 7047     		bx	lr
 1217              	.LVL84:
 1218              	.L98:
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 1219              		.loc 1 916 0
 1220 05c2 0229     		cmp	r1, #2
 1221 05c4 1BD1     		bne	.L107
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1222              		.loc 1 919 0
 1223 05c6 0368     		ldr	r3, [r0]
 1224 05c8 23F00303 		bic	r3, r3, #3
 1225 05cc 43F00203 		orr	r3, r3, #2
 1226 05d0 0360     		str	r3, [r0]
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 1227              		.loc 1 872 0
 1228 05d2 4FF6FF73 		movw	r3, #65535
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1229              		.loc 1 922 0
 1230 05d6 00E0     		b	.L102
 1231              	.LVL85:
 1232              	.L104:
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       timeout--;
 1233              		.loc 1 924 0
 1234 05d8 013B     		subs	r3, r3, #1
 1235              	.LVL86:
 1236              	.L102:
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1237              		.loc 1 922 0 discriminator 1
 1238 05da 4268     		ldr	r2, [r0, #4]
 1239 05dc 02F00302 		and	r2, r2, #3
 1240 05e0 022A     		cmp	r2, #2
 1241 05e2 01D0     		beq	.L103
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1242              		.loc 1 922 0 is_stmt 0 discriminator 2
 1243 05e4 002B     		cmp	r3, #0
 1244 05e6 F7D1     		bne	.L104
 1245              	.L103:
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 1246              		.loc 1 926 0 is_stmt 1
 1247 05e8 4368     		ldr	r3, [r0, #4]
 1248              	.LVL87:
 1249 05ea 03F00303 		and	r3, r3, #3
 1250 05ee 022B     		cmp	r3, #2
 1251 05f0 07D0     		beq	.L108
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 1252              		.loc 1 928 0
 1253 05f2 0020     		movs	r0, #0
 1254              	.LVL88:
 1255 05f4 7047     		bx	lr
 1256              	.LVL89:
 1257              	.L105:
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 1258              		.loc 1 894 0
 1259 05f6 0120     		movs	r0, #1
 1260              	.LVL90:
 1261 05f8 7047     		bx	lr
 1262              	.LVL91:
 1263              	.L106:
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 1264              		.loc 1 913 0
 1265 05fa 0120     		movs	r0, #1
 1266              	.LVL92:
 1267 05fc 7047     		bx	lr
 1268              	.LVL93:
 1269              	.L107:
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 1270              		.loc 1 937 0
 1271 05fe 0020     		movs	r0, #0
 1272              	.LVL94:
 1273 0600 7047     		bx	lr
 1274              	.LVL95:
 1275              	.L108:
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 1276              		.loc 1 932 0
 1277 0602 0120     		movs	r0, #1
 1278              	.LVL96:
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1279              		.loc 1 941 0
 1280 0604 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE123:
 1284 0606 00BF     		.align	2
 1285              		.global	CAN_Sleep
 1286              		.thumb
 1287              		.thumb_func
 1289              	CAN_Sleep:
 1290              	.LFB124:
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1291              		.loc 1 949 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              		@ link register save eliminated.
 1296              	.LVL97:
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1297              		.loc 1 956 0
 1298 0608 0368     		ldr	r3, [r0]
 1299 060a 23F00303 		bic	r3, r3, #3
 1300 060e 43F00203 		orr	r3, r3, #2
 1301 0612 0360     		str	r3, [r0]
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 1302              		.loc 1 959 0
 1303 0614 4368     		ldr	r3, [r0, #4]
 1304 0616 03F00303 		and	r3, r3, #3
 1305 061a 022B     		cmp	r3, #2
 1306 061c 01D0     		beq	.L111
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1307              		.loc 1 950 0
 1308 061e 0020     		movs	r0, #0
 1309              	.LVL98:
 1310 0620 7047     		bx	lr
 1311              	.LVL99:
 1312              	.L111:
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 1313              		.loc 1 962 0
 1314 0622 0120     		movs	r0, #1
 1315              	.LVL100:
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1316              		.loc 1 966 0
 1317 0624 7047     		bx	lr
 1318              		.cfi_endproc
 1319              	.LFE124:
 1321 0626 00BF     		.align	2
 1322              		.global	CAN_WakeUp
 1323              		.thumb
 1324              		.thumb_func
 1326              	CAN_WakeUp:
 1327              	.LFB125:
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1328              		.loc 1 974 0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
 1333              	.LVL101:
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 1334              		.loc 1 982 0
 1335 0628 0368     		ldr	r3, [r0]
 1336 062a 23F00203 		bic	r3, r3, #2
 1337 062e 0360     		str	r3, [r0]
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1338              		.loc 1 975 0
 1339 0630 4FF6FF73 		movw	r3, #65535
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1340              		.loc 1 985 0
 1341 0634 00E0     		b	.L113
 1342              	.LVL102:
 1343              	.L115:
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****    wait_slak--;
 1344              		.loc 1 987 0
 1345 0636 013B     		subs	r3, r3, #1
 1346              	.LVL103:
 1347              	.L113:
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1348              		.loc 1 985 0 discriminator 1
 1349 0638 4268     		ldr	r2, [r0, #4]
 1350 063a 12F0020F 		tst	r2, #2
 1351 063e 01D0     		beq	.L114
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1352              		.loc 1 985 0 is_stmt 0 discriminator 2
 1353 0640 002B     		cmp	r3, #0
 1354 0642 F8D1     		bne	.L115
 1355              	.L114:
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 1356              		.loc 1 989 0 is_stmt 1
 1357 0644 4368     		ldr	r3, [r0, #4]
 1358              	.LVL104:
 1359 0646 13F0020F 		tst	r3, #2
 1360 064a 01D0     		beq	.L117
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1361              		.loc 1 976 0
 1362 064c 0020     		movs	r0, #0
 1363              	.LVL105:
 1364 064e 7047     		bx	lr
 1365              	.LVL106:
 1366              	.L117:
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 1367              		.loc 1 992 0
 1368 0650 0120     		movs	r0, #1
 1369              	.LVL107:
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1370              		.loc 1 996 0
 1371 0652 7047     		bx	lr
 1372              		.cfi_endproc
 1373              	.LFE125:
 1375              		.align	2
 1376              		.global	CAN_GetLastErrorCode
 1377              		.thumb
 1378              		.thumb_func
 1380              	CAN_GetLastErrorCode:
 1381              	.LFB126:
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1382              		.loc 1 1036 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              		@ link register save eliminated.
 1387              	.LVL108:
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 1388              		.loc 1 1043 0
 1389 0654 8069     		ldr	r0, [r0, #24]
 1390              	.LVL109:
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1391              		.loc 1 1047 0
 1392 0656 00F07000 		and	r0, r0, #112
 1393              	.LVL110:
 1394 065a 7047     		bx	lr
 1395              		.cfi_endproc
 1396              	.LFE126:
 1398              		.align	2
 1399              		.global	CAN_GetReceiveErrorCounter
 1400              		.thumb
 1401              		.thumb_func
 1403              	CAN_GetReceiveErrorCounter:
 1404              	.LFB127:
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1405              		.loc 1 1061 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
 1410              	.LVL111:
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 1411              		.loc 1 1068 0
 1412 065c 8069     		ldr	r0, [r0, #24]
 1413              	.LVL112:
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1414              		.loc 1 1072 0
 1415 065e 000E     		lsrs	r0, r0, #24
 1416              	.LVL113:
 1417 0660 7047     		bx	lr
 1418              		.cfi_endproc
 1419              	.LFE127:
 1421 0662 00BF     		.align	2
 1422              		.global	CAN_GetLSBTransmitErrorCounter
 1423              		.thumb
 1424              		.thumb_func
 1426              	CAN_GetLSBTransmitErrorCounter:
 1427              	.LFB128:
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1428              		.loc 1 1081 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433              	.LVL114:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 1434              		.loc 1 1088 0
 1435 0664 8069     		ldr	r0, [r0, #24]
 1436              	.LVL115:
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1437              		.loc 1 1092 0
 1438 0666 C0F30740 		ubfx	r0, r0, #16, #8
 1439              	.LVL116:
 1440 066a 7047     		bx	lr
 1441              		.cfi_endproc
 1442              	.LFE128:
 1444              		.align	2
 1445              		.global	CAN_ITConfig
 1446              		.thumb
 1447              		.thumb_func
 1449              	CAN_ITConfig:
 1450              	.LFB129:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1451              		.loc 1 1288 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              		@ link register save eliminated.
 1456              	.LVL117:
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 1457              		.loc 1 1294 0
 1458 066c 1AB1     		cbz	r2, .L122
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
 1459              		.loc 1 1297 0
 1460 066e 4369     		ldr	r3, [r0, #20]
 1461 0670 1943     		orrs	r1, r1, r3
 1462              	.LVL118:
 1463 0672 4161     		str	r1, [r0, #20]
 1464 0674 7047     		bx	lr
 1465              	.LVL119:
 1466              	.L122:
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
 1467              		.loc 1 1302 0
 1468 0676 4369     		ldr	r3, [r0, #20]
 1469 0678 23EA0101 		bic	r1, r3, r1
 1470              	.LVL120:
 1471 067c 4161     		str	r1, [r0, #20]
 1472 067e 7047     		bx	lr
 1473              		.cfi_endproc
 1474              	.LFE129:
 1476              		.align	2
 1477              		.global	CAN_GetFlagStatus
 1478              		.thumb
 1479              		.thumb_func
 1481              	CAN_GetFlagStatus:
 1482              	.LFB130:
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1483              		.loc 1 1328 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 1488              	.LVL121:
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 1489              		.loc 1 1336 0
 1490 0680 11F4700F 		tst	r1, #15728640
 1491 0684 06D0     		beq	.L125
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1492              		.loc 1 1339 0
 1493 0686 8369     		ldr	r3, [r0, #24]
 1494 0688 1940     		ands	r1, r1, r3
 1495              	.LVL122:
 1496 068a C1F31301 		ubfx	r1, r1, #0, #20
 1497 068e 31B3     		cbz	r1, .L130
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
 1498              		.loc 1 1342 0
 1499 0690 0120     		movs	r0, #1
 1500              	.LVL123:
 1501 0692 7047     		bx	lr
 1502              	.LVL124:
 1503              	.L125:
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 1504              		.loc 1 1350 0
 1505 0694 11F0807F 		tst	r1, #16777216
 1506 0698 06D0     		beq	.L127
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1507              		.loc 1 1353 0
 1508 069a 4368     		ldr	r3, [r0, #4]
 1509 069c 1940     		ands	r1, r1, r3
 1510              	.LVL125:
 1511 069e C1F31301 		ubfx	r1, r1, #0, #20
 1512 06a2 F1B1     		cbz	r1, .L131
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
 1513              		.loc 1 1356 0
 1514 06a4 0120     		movs	r0, #1
 1515              	.LVL126:
 1516 06a6 7047     		bx	lr
 1517              	.LVL127:
 1518              	.L127:
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 1519              		.loc 1 1364 0
 1520 06a8 11F0006F 		tst	r1, #134217728
 1521 06ac 06D0     		beq	.L128
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1522              		.loc 1 1367 0
 1523 06ae 8368     		ldr	r3, [r0, #8]
 1524 06b0 1940     		ands	r1, r1, r3
 1525              	.LVL128:
 1526 06b2 C1F31301 		ubfx	r1, r1, #0, #20
 1527 06b6 B1B1     		cbz	r1, .L132
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
 1528              		.loc 1 1370 0
 1529 06b8 0120     		movs	r0, #1
 1530              	.LVL129:
 1531 06ba 7047     		bx	lr
 1532              	.LVL130:
 1533              	.L128:
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 1534              		.loc 1 1378 0
 1535 06bc 11F0007F 		tst	r1, #33554432
 1536 06c0 06D0     		beq	.L129
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1537              		.loc 1 1381 0
 1538 06c2 C368     		ldr	r3, [r0, #12]
 1539 06c4 1940     		ands	r1, r1, r3
 1540              	.LVL131:
 1541 06c6 C1F31301 		ubfx	r1, r1, #0, #20
 1542 06ca 71B1     		cbz	r1, .L133
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
 1543              		.loc 1 1384 0
 1544 06cc 0120     		movs	r0, #1
 1545              	.LVL132:
 1546 06ce 7047     		bx	lr
 1547              	.LVL133:
 1548              	.L129:
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1549              		.loc 1 1395 0
 1550 06d0 0369     		ldr	r3, [r0, #16]
 1551 06d2 1940     		ands	r1, r1, r3
 1552              	.LVL134:
 1553 06d4 C1F31301 		ubfx	r1, r1, #0, #20
 1554 06d8 49B1     		cbz	r1, .L134
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = SET;
 1555              		.loc 1 1398 0
 1556 06da 0120     		movs	r0, #1
 1557              	.LVL135:
 1558 06dc 7047     		bx	lr
 1559              	.LVL136:
 1560              	.L130:
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
 1561              		.loc 1 1347 0
 1562 06de 0020     		movs	r0, #0
 1563              	.LVL137:
 1564 06e0 7047     		bx	lr
 1565              	.LVL138:
 1566              	.L131:
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
 1567              		.loc 1 1361 0
 1568 06e2 0020     		movs	r0, #0
 1569              	.LVL139:
 1570 06e4 7047     		bx	lr
 1571              	.LVL140:
 1572              	.L132:
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
 1573              		.loc 1 1375 0
 1574 06e6 0020     		movs	r0, #0
 1575              	.LVL141:
 1576 06e8 7047     		bx	lr
 1577              	.LVL142:
 1578              	.L133:
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
 1579              		.loc 1 1389 0
 1580 06ea 0020     		movs	r0, #0
 1581              	.LVL143:
 1582 06ec 7047     		bx	lr
 1583              	.LVL144:
 1584              	.L134:
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       bitstatus = RESET;
 1585              		.loc 1 1403 0
 1586 06ee 0020     		movs	r0, #0
 1587              	.LVL145:
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1588              		.loc 1 1408 0
 1589 06f0 7047     		bx	lr
 1590              		.cfi_endproc
 1591              	.LFE130:
 1593 06f2 00BF     		.align	2
 1594              		.global	CAN_ClearFlag
 1595              		.thumb
 1596              		.thumb_func
 1598              	CAN_ClearFlag:
 1599              	.LFB131:
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1600              		.loc 1 1428 0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 0
 1603              		@ frame_needed = 0, uses_anonymous_args = 0
 1604              		@ link register save eliminated.
 1605              	.LVL146:
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 1606              		.loc 1 1434 0
 1607 06f4 0C4B     		ldr	r3, .L141
 1608 06f6 9942     		cmp	r1, r3
 1609 06f8 02D1     		bne	.L136
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
 1610              		.loc 1 1437 0
 1611 06fa 0023     		movs	r3, #0
 1612 06fc 8361     		str	r3, [r0, #24]
 1613 06fe 7047     		bx	lr
 1614              	.L136:
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
 1615              		.loc 1 1441 0
 1616 0700 C1F31303 		ubfx	r3, r1, #0, #20
 1617              	.LVL147:
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 1618              		.loc 1 1443 0
 1619 0704 11F0007F 		tst	r1, #33554432
 1620 0708 01D0     		beq	.L138
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
 1621              		.loc 1 1446 0
 1622 070a C360     		str	r3, [r0, #12]
 1623 070c 7047     		bx	lr
 1624              	.L138:
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 1625              		.loc 1 1448 0
 1626 070e 11F0806F 		tst	r1, #67108864
 1627 0712 01D0     		beq	.L139
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
 1628              		.loc 1 1451 0
 1629 0714 0361     		str	r3, [r0, #16]
 1630 0716 7047     		bx	lr
 1631              	.L139:
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 1632              		.loc 1 1453 0
 1633 0718 11F0006F 		tst	r1, #134217728
 1634 071c 01D0     		beq	.L140
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
 1635              		.loc 1 1456 0
 1636 071e 8360     		str	r3, [r0, #8]
 1637 0720 7047     		bx	lr
 1638              	.L140:
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
 1639              		.loc 1 1461 0
 1640 0722 4360     		str	r3, [r0, #4]
 1641 0724 7047     		bx	lr
 1642              	.L142:
 1643 0726 00BF     		.align	2
 1644              	.L141:
 1645 0728 7000F030 		.word	821035120
 1646              		.cfi_endproc
 1647              	.LFE131:
 1649              		.align	2
 1650              		.global	CAN_GetITStatus
 1651              		.thumb
 1652              		.thumb_func
 1654              	CAN_GetITStatus:
 1655              	.LFB132:
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1656              		.loc 1 1488 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660              	.LVL148:
 1661 072c 08B5     		push	{r3, lr}
 1662              		.cfi_def_cfa_offset 8
 1663              		.cfi_offset 3, -8
 1664              		.cfi_offset 14, -4
 1665              	.LVL149:
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 1666              		.loc 1 1495 0
 1667 072e 4369     		ldr	r3, [r0, #20]
 1668 0730 0B42     		tst	r3, r1
 1669 0732 6FD0     		beq	.L162
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     switch (CAN_IT)
 1670              		.loc 1 1498 0
 1671 0734 4029     		cmp	r1, #64
 1672 0736 45D0     		beq	.L145
 1673 0738 0ED8     		bhi	.L146
 1674 073a 0429     		cmp	r1, #4
 1675 073c 2ED0     		beq	.L147
 1676 073e 04D8     		bhi	.L148
 1677 0740 0129     		cmp	r1, #1
 1678 0742 21D0     		beq	.L149
 1679 0744 0229     		cmp	r1, #2
 1680 0746 24D0     		beq	.L150
 1681 0748 66E0     		b	.L163
 1682              	.L148:
 1683 074a 1029     		cmp	r1, #16
 1684 074c 30D0     		beq	.L151
 1685 074e 2029     		cmp	r1, #32
 1686 0750 33D0     		beq	.L152
 1687 0752 0829     		cmp	r1, #8
 1688 0754 60D1     		bne	.L163
 1689 0756 26E0     		b	.L153
 1690              	.L146:
 1691 0758 B1F5006F 		cmp	r1, #2048
 1692 075c 50D0     		beq	.L154
 1693 075e 09D8     		bhi	.L155
 1694 0760 B1F5007F 		cmp	r1, #512
 1695 0764 42D0     		beq	.L156
 1696 0766 B1F5806F 		cmp	r1, #1024
 1697 076a 44D0     		beq	.L157
 1698 076c B1F5807F 		cmp	r1, #256
 1699 0770 52D1     		bne	.L163
 1700 0772 36E0     		b	.L158
 1701              	.L155:
 1702 0774 B1F5803F 		cmp	r1, #65536
 1703 0778 29D0     		beq	.L159
 1704 077a B1F5003F 		cmp	r1, #131072
 1705 077e 2BD0     		beq	.L160
 1706 0780 B1F5004F 		cmp	r1, #32768
 1707 0784 48D1     		bne	.L163
 1708 0786 40E0     		b	.L161
 1709              	.L149:
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 1710              		.loc 1 1502 0
 1711 0788 8068     		ldr	r0, [r0, #8]
 1712              	.LVL150:
 1713 078a 2449     		ldr	r1, .L164
 1714              	.LVL151:
 1715 078c FFF738FC 		bl	CheckITStatus
 1716              	.LVL152:
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1717              		.loc 1 1503 0
 1718 0790 08BD     		pop	{r3, pc}
 1719              	.LVL153:
 1720              	.L150:
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 1721              		.loc 1 1506 0
 1722 0792 C068     		ldr	r0, [r0, #12]
 1723              	.LVL154:
 1724 0794 0321     		movs	r1, #3
 1725              	.LVL155:
 1726 0796 FFF733FC 		bl	CheckITStatus
 1727              	.LVL156:
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1728              		.loc 1 1507 0
 1729 079a 08BD     		pop	{r3, pc}
 1730              	.LVL157:
 1731              	.L147:
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 1732              		.loc 1 1510 0
 1733 079c C068     		ldr	r0, [r0, #12]
 1734              	.LVL158:
 1735 079e 0821     		movs	r1, #8
 1736              	.LVL159:
 1737 07a0 FFF72EFC 		bl	CheckITStatus
 1738              	.LVL160:
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1739              		.loc 1 1511 0
 1740 07a4 08BD     		pop	{r3, pc}
 1741              	.LVL161:
 1742              	.L153:
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 1743              		.loc 1 1514 0
 1744 07a6 C068     		ldr	r0, [r0, #12]
 1745              	.LVL162:
 1746 07a8 1021     		movs	r1, #16
 1747              	.LVL163:
 1748 07aa FFF729FC 		bl	CheckITStatus
 1749              	.LVL164:
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1750              		.loc 1 1515 0
 1751 07ae 08BD     		pop	{r3, pc}
 1752              	.LVL165:
 1753              	.L151:
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 1754              		.loc 1 1518 0
 1755 07b0 0069     		ldr	r0, [r0, #16]
 1756              	.LVL166:
 1757 07b2 0321     		movs	r1, #3
 1758              	.LVL167:
 1759 07b4 FFF724FC 		bl	CheckITStatus
 1760              	.LVL168:
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1761              		.loc 1 1519 0
 1762 07b8 08BD     		pop	{r3, pc}
 1763              	.LVL169:
 1764              	.L152:
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 1765              		.loc 1 1522 0
 1766 07ba 0069     		ldr	r0, [r0, #16]
 1767              	.LVL170:
 1768 07bc 0821     		movs	r1, #8
 1769              	.LVL171:
 1770 07be FFF71FFC 		bl	CheckITStatus
 1771              	.LVL172:
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1772              		.loc 1 1523 0
 1773 07c2 08BD     		pop	{r3, pc}
 1774              	.LVL173:
 1775              	.L145:
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 1776              		.loc 1 1526 0
 1777 07c4 0069     		ldr	r0, [r0, #16]
 1778              	.LVL174:
 1779 07c6 1021     		movs	r1, #16
 1780              	.LVL175:
 1781 07c8 FFF71AFC 		bl	CheckITStatus
 1782              	.LVL176:
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1783              		.loc 1 1527 0
 1784 07cc 08BD     		pop	{r3, pc}
 1785              	.LVL177:
 1786              	.L159:
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 1787              		.loc 1 1530 0
 1788 07ce 4068     		ldr	r0, [r0, #4]
 1789              	.LVL178:
 1790 07d0 0821     		movs	r1, #8
 1791              	.LVL179:
 1792 07d2 FFF715FC 		bl	CheckITStatus
 1793              	.LVL180:
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1794              		.loc 1 1531 0
 1795 07d6 08BD     		pop	{r3, pc}
 1796              	.LVL181:
 1797              	.L160:
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 1798              		.loc 1 1534 0
 1799 07d8 4068     		ldr	r0, [r0, #4]
 1800              	.LVL182:
 1801 07da 1021     		movs	r1, #16
 1802              	.LVL183:
 1803 07dc FFF710FC 		bl	CheckITStatus
 1804              	.LVL184:
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1805              		.loc 1 1535 0
 1806 07e0 08BD     		pop	{r3, pc}
 1807              	.LVL185:
 1808              	.L158:
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 1809              		.loc 1 1538 0
 1810 07e2 8069     		ldr	r0, [r0, #24]
 1811              	.LVL186:
 1812 07e4 0121     		movs	r1, #1
 1813              	.LVL187:
 1814 07e6 FFF70BFC 		bl	CheckITStatus
 1815              	.LVL188:
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1816              		.loc 1 1539 0
 1817 07ea 08BD     		pop	{r3, pc}
 1818              	.LVL189:
 1819              	.L156:
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 1820              		.loc 1 1542 0
 1821 07ec 8069     		ldr	r0, [r0, #24]
 1822              	.LVL190:
 1823 07ee 0221     		movs	r1, #2
 1824              	.LVL191:
 1825 07f0 FFF706FC 		bl	CheckITStatus
 1826              	.LVL192:
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1827              		.loc 1 1543 0
 1828 07f4 08BD     		pop	{r3, pc}
 1829              	.LVL193:
 1830              	.L157:
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 1831              		.loc 1 1546 0
 1832 07f6 8069     		ldr	r0, [r0, #24]
 1833              	.LVL194:
 1834 07f8 0421     		movs	r1, #4
 1835              	.LVL195:
 1836 07fa FFF701FC 		bl	CheckITStatus
 1837              	.LVL196:
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1838              		.loc 1 1547 0
 1839 07fe 08BD     		pop	{r3, pc}
 1840              	.LVL197:
 1841              	.L154:
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 1842              		.loc 1 1550 0
 1843 0800 8069     		ldr	r0, [r0, #24]
 1844              	.LVL198:
 1845 0802 7021     		movs	r1, #112
 1846              	.LVL199:
 1847 0804 FFF7FCFB 		bl	CheckITStatus
 1848              	.LVL200:
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1849              		.loc 1 1551 0
 1850 0808 08BD     		pop	{r3, pc}
 1851              	.LVL201:
 1852              	.L161:
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 1853              		.loc 1 1554 0
 1854 080a 4068     		ldr	r0, [r0, #4]
 1855              	.LVL202:
 1856 080c 0421     		movs	r1, #4
 1857              	.LVL203:
 1858 080e FFF7F7FB 		bl	CheckITStatus
 1859              	.LVL204:
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         break;
 1860              		.loc 1 1555 0
 1861 0812 08BD     		pop	{r3, pc}
 1862              	.LVL205:
 1863              	.L162:
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****     itstatus  = RESET;
 1864              		.loc 1 1565 0
 1865 0814 0020     		movs	r0, #0
 1866              	.LVL206:
 1867 0816 08BD     		pop	{r3, pc}
 1868              	.LVL207:
 1869              	.L163:
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****         itstatus = RESET;
 1870              		.loc 1 1558 0
 1871 0818 0020     		movs	r0, #0
 1872              	.LVL208:
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** }
 1873              		.loc 1 1570 0
 1874 081a 08BD     		pop	{r3, pc}
 1875              	.L165:
 1876              		.align	2
 1877              	.L164:
 1878 081c 01010100 		.word	65793
 1879              		.cfi_endproc
 1880              	.LFE132:
 1882              		.align	2
 1883              		.global	CAN_ClearITPendingBit
 1884              		.thumb
 1885              		.thumb_func
 1887              	CAN_ClearITPendingBit:
 1888              	.LFB133:
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c **** {
 1889              		.loc 1 1592 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 1894              	.LVL209:
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****   switch (CAN_IT)
 1895              		.loc 1 1597 0
 1896 0820 B1F5807F 		cmp	r1, #256
 1897 0824 37D0     		beq	.L168
 1898 0826 0CD8     		bhi	.L169
 1899 0828 0829     		cmp	r1, #8
 1900 082a 25D0     		beq	.L170
 1901 082c 04D8     		bhi	.L171
 1902 082e 0129     		cmp	r1, #1
 1903 0830 1CD0     		beq	.L172
 1904 0832 0429     		cmp	r1, #4
 1905 0834 1DD0     		beq	.L173
 1906 0836 7047     		bx	lr
 1907              	.L171:
 1908 0838 2029     		cmp	r1, #32
 1909 083a 20D0     		beq	.L174
 1910 083c 4029     		cmp	r1, #64
 1911 083e 21D0     		beq	.L175
 1912 0840 7047     		bx	lr
 1913              	.L169:
 1914 0842 B1F5006F 		cmp	r1, #2048
 1915 0846 2FD0     		beq	.L176
 1916 0848 06D8     		bhi	.L177
 1917 084a B1F5007F 		cmp	r1, #512
 1918 084e 25D0     		beq	.L178
 1919 0850 B1F5806F 		cmp	r1, #1024
 1920 0854 25D0     		beq	.L179
 1921 0856 7047     		bx	lr
 1922              	.L177:
 1923 0858 B1F5803F 		cmp	r1, #65536
 1924 085c 15D0     		beq	.L180
 1925 085e B1F5003F 		cmp	r1, #131072
 1926 0862 15D0     		beq	.L181
 1927 0864 B1F5004F 		cmp	r1, #32768
 1928 0868 27D1     		bne	.L166
 1929 086a 22E0     		b	.L182
 1930              	.L172:
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 1931              		.loc 1 1601 0
 1932 086c 134B     		ldr	r3, .L183
 1933 086e 8360     		str	r3, [r0, #8]
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1934              		.loc 1 1602 0
 1935 0870 7047     		bx	lr
 1936              	.L173:
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
 1937              		.loc 1 1605 0
 1938 0872 0823     		movs	r3, #8
 1939 0874 C360     		str	r3, [r0, #12]
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1940              		.loc 1 1606 0
 1941 0876 7047     		bx	lr
 1942              	.L170:
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
 1943              		.loc 1 1609 0
 1944 0878 1023     		movs	r3, #16
 1945 087a C360     		str	r3, [r0, #12]
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1946              		.loc 1 1610 0
 1947 087c 7047     		bx	lr
 1948              	.L174:
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
 1949              		.loc 1 1613 0
 1950 087e 0823     		movs	r3, #8
 1951 0880 0361     		str	r3, [r0, #16]
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1952              		.loc 1 1614 0
 1953 0882 7047     		bx	lr
 1954              	.L175:
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
 1955              		.loc 1 1617 0
 1956 0884 1023     		movs	r3, #16
 1957 0886 0361     		str	r3, [r0, #16]
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1958              		.loc 1 1618 0
 1959 0888 7047     		bx	lr
 1960              	.L180:
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
 1961              		.loc 1 1621 0
 1962 088a 0823     		movs	r3, #8
 1963 088c 4360     		str	r3, [r0, #4]
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1964              		.loc 1 1622 0
 1965 088e 7047     		bx	lr
 1966              	.L181:
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
 1967              		.loc 1 1625 0
 1968 0890 1023     		movs	r3, #16
 1969 0892 4360     		str	r3, [r0, #4]
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1970              		.loc 1 1626 0
 1971 0894 7047     		bx	lr
 1972              	.L168:
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
 1973              		.loc 1 1629 0
 1974 0896 0423     		movs	r3, #4
 1975 0898 4360     		str	r3, [r0, #4]
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1976              		.loc 1 1631 0
 1977 089a 7047     		bx	lr
 1978              	.L178:
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 1979              		.loc 1 1634 0
 1980 089c 0423     		movs	r3, #4
 1981 089e 4360     		str	r3, [r0, #4]
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1982              		.loc 1 1636 0
 1983 08a0 7047     		bx	lr
 1984              	.L179:
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 1985              		.loc 1 1639 0
 1986 08a2 0423     		movs	r3, #4
 1987 08a4 4360     		str	r3, [r0, #4]
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****        break;
 1988              		.loc 1 1641 0
 1989 08a6 7047     		bx	lr
 1990              	.L176:
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
 1991              		.loc 1 1644 0
 1992 08a8 0023     		movs	r3, #0
 1993 08aa 8361     		str	r3, [r0, #24]
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 1994              		.loc 1 1646 0
 1995 08ac 0423     		movs	r3, #4
 1996 08ae 4360     		str	r3, [r0, #4]
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       break;
 1997              		.loc 1 1647 0
 1998 08b0 7047     		bx	lr
 1999              	.L182:
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
 2000              		.loc 1 1650 0
 2001 08b2 0023     		movs	r3, #0
 2002 08b4 8361     		str	r3, [r0, #24]
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 2003              		.loc 1 1652 0
 2004 08b6 0423     		movs	r3, #4
 2005 08b8 4360     		str	r3, [r0, #4]
 2006              	.L166:
 2007 08ba 7047     		bx	lr
 2008              	.L184:
 2009              		.align	2
 2010              	.L183:
 2011 08bc 01010100 		.word	65793
 2012              		.cfi_endproc
 2013              	.LFE133:
 2015              	.Letext0:
 2016              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\mach
 2017              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\stdi
 2018              		.file 4 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\STM32F4xx\\Include/s
 2019              		.file 5 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\STM32F4xx_StdPeriph_
 2020              		.file 6 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\CMSIS\\Include/core_
 2021              		.file 7 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\STM32F4xx_StdPeriph_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_can.c
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:22     .text:00000000 CheckITStatus
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:53     .text:0000000c CAN_DeInit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:97     .text:00000040 $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:101    .text:00000044 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:106    .text:00000044 CAN_Init
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:319    .text:00000158 CAN_FilterInit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:470    .text:00000244 $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:474    .text:00000248 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:479    .text:00000248 CAN_StructInit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:522    .text:00000268 CAN_SlaveStartBank
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:553    .text:000002a0 $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:557    .text:000002a4 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:562    .text:000002a4 CAN_DBGFreeze
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:591    .text:000002bc CAN_TTComModeCmd
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:644    .text:0000031c CAN_Transmit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:803    .text:000003f0 CAN_TransmitStatus
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:905    .text:00000458 $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:911    .text:00000464 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:916    .text:00000464 CAN_CancelTransmit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:959    .text:00000490 CAN_Receive
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1066   .text:00000530 CAN_FIFORelease
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1095   .text:00000548 CAN_MessagePending
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1137   .text:00000564 CAN_OperatingModeRequest
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1289   .text:00000608 CAN_Sleep
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1326   .text:00000628 CAN_WakeUp
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1380   .text:00000654 CAN_GetLastErrorCode
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1403   .text:0000065c CAN_GetReceiveErrorCounter
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1426   .text:00000664 CAN_GetLSBTransmitErrorCounter
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1449   .text:0000066c CAN_ITConfig
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1481   .text:00000680 CAN_GetFlagStatus
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1598   .text:000006f4 CAN_ClearFlag
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1645   .text:00000728 $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1649   .text:0000072c $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1654   .text:0000072c CAN_GetITStatus
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1878   .text:0000081c $d
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1882   .text:00000820 $t
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:1887   .text:00000820 CAN_ClearITPendingBit
C:\Users\Filip\AppData\Local\Temp\ccBE4ogZ.s:2011   .text:000008bc $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.1c01c98cf54d5aaab4df87c6bb476f00
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_can.h.44.c7481a9870302edec9e3d0d405631faa

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
