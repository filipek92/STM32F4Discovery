   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	PWR_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	PWR_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  26              		.loc 1 121 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  34              		.loc 1 122 0
  35 0002 4FF08050 		mov	r0, #268435456
  36 0006 0121     		movs	r1, #1
  37 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  38              	.LVL0:
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  39              		.loc 1 123 0
  40 000c 4FF08050 		mov	r0, #268435456
  41 0010 0021     		movs	r1, #0
  42 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  43              	.LVL1:
  44 0016 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE110:
  48              		.align	2
  49              		.global	PWR_BackupAccessCmd
  50              		.thumb
  51              		.thumb_func
  53              	PWR_BackupAccessCmd:
  54              	.LFB111:
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  55              		.loc 1 136 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL2:
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  61              		.loc 1 140 0
  62 0018 014B     		ldr	r3, .L3
  63 001a 1860     		str	r0, [r3]
  64 001c 7047     		bx	lr
  65              	.L4:
  66 001e 00BF     		.align	2
  67              	.L3:
  68 0020 20000E42 		.word	1108213792
  69              		.cfi_endproc
  70              	.LFE111:
  72              		.align	2
  73              		.global	PWR_PVDLevelConfig
  74              		.thumb
  75              		.thumb_func
  77              	PWR_PVDLevelConfig:
  78              	.LFB112:
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  79              		.loc 1 182 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL3:
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
  85              		.loc 1 188 0
  86 0024 034B     		ldr	r3, .L6
  87 0026 1A68     		ldr	r2, [r3]
  88              	.LVL4:
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
  89              		.loc 1 191 0
  90 0028 22F0E002 		bic	r2, r2, #224
  91              	.LVL5:
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
  92              		.loc 1 194 0
  93 002c 1043     		orrs	r0, r0, r2
  94              	.LVL6:
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
  95              		.loc 1 197 0
  96 002e 1860     		str	r0, [r3]
  97 0030 7047     		bx	lr
  98              	.L7:
  99 0032 00BF     		.align	2
 100              	.L6:
 101 0034 00700040 		.word	1073770496
 102              		.cfi_endproc
 103              	.LFE112:
 105              		.align	2
 106              		.global	PWR_PVDCmd
 107              		.thumb
 108              		.thumb_func
 110              	PWR_PVDCmd:
 111              	.LFB113:
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 112              		.loc 1 207 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL7:
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 118              		.loc 1 211 0
 119 0038 014B     		ldr	r3, .L9
 120 003a 1860     		str	r0, [r3]
 121 003c 7047     		bx	lr
 122              	.L10:
 123 003e 00BF     		.align	2
 124              	.L9:
 125 0040 10000E42 		.word	1108213776
 126              		.cfi_endproc
 127              	.LFE113:
 129              		.align	2
 130              		.global	PWR_WakeUpPinCmd
 131              		.thumb
 132              		.thumb_func
 134              	PWR_WakeUpPinCmd:
 135              	.LFB114:
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 136              		.loc 1 241 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL8:
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 142              		.loc 1 245 0
 143 0044 014B     		ldr	r3, .L12
 144 0046 1860     		str	r0, [r3]
 145 0048 7047     		bx	lr
 146              	.L13:
 147 004a 00BF     		.align	2
 148              	.L12:
 149 004c A0000E42 		.word	1108213920
 150              		.cfi_endproc
 151              	.LFE114:
 153              		.align	2
 154              		.global	PWR_BackupRegulatorCmd
 155              		.thumb
 156              		.thumb_func
 158              	PWR_BackupRegulatorCmd:
 159              	.LFB115:
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 160              		.loc 1 299 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL9:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 166              		.loc 1 303 0
 167 0050 014B     		ldr	r3, .L15
 168 0052 1860     		str	r0, [r3]
 169 0054 7047     		bx	lr
 170              	.L16:
 171 0056 00BF     		.align	2
 172              	.L15:
 173 0058 A4000E42 		.word	1108213924
 174              		.cfi_endproc
 175              	.LFE115:
 177              		.align	2
 178              		.global	PWR_MainRegulatorModeConfig
 179              		.thumb
 180              		.thumb_func
 182              	PWR_MainRegulatorModeConfig:
 183              	.LFB116:
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 184              		.loc 1 319 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL10:
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 190              		.loc 1 323 0
 191 005c 28B9     		cbnz	r0, .L18
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 192              		.loc 1 325 0
 193 005e 064B     		ldr	r3, .L20
 194 0060 1A68     		ldr	r2, [r3]
 195 0062 22F48042 		bic	r2, r2, #16384
 196 0066 1A60     		str	r2, [r3]
 197 0068 7047     		bx	lr
 198              	.L18:
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 199              		.loc 1 329 0
 200 006a 034B     		ldr	r3, .L20
 201 006c 1A68     		ldr	r2, [r3]
 202 006e 42F48042 		orr	r2, r2, #16384
 203 0072 1A60     		str	r2, [r3]
 204 0074 7047     		bx	lr
 205              	.L21:
 206 0076 00BF     		.align	2
 207              	.L20:
 208 0078 00700040 		.word	1073770496
 209              		.cfi_endproc
 210              	.LFE116:
 212              		.align	2
 213              		.global	PWR_FlashPowerDownCmd
 214              		.thumb
 215              		.thumb_func
 217              	PWR_FlashPowerDownCmd:
 218              	.LFB117:
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 219              		.loc 1 361 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              	.LVL11:
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 225              		.loc 1 365 0
 226 007c 014B     		ldr	r3, .L23
 227 007e 1860     		str	r0, [r3]
 228 0080 7047     		bx	lr
 229              	.L24:
 230 0082 00BF     		.align	2
 231              	.L23:
 232 0084 24000E42 		.word	1108213796
 233              		.cfi_endproc
 234              	.LFE117:
 236              		.align	2
 237              		.global	PWR_EnterSTOPMode
 238              		.thumb
 239              		.thumb_func
 241              	PWR_EnterSTOPMode:
 242              	.LFB118:
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 243              		.loc 1 501 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 248              	.LVL12:
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 249              		.loc 1 509 0
 250 0088 0A4B     		ldr	r3, .L28
 251 008a 1A68     		ldr	r2, [r3]
 252              	.LVL13:
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 253              		.loc 1 511 0
 254 008c 22F00302 		bic	r2, r2, #3
 255              	.LVL14:
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 256              		.loc 1 514 0
 257 0090 1043     		orrs	r0, r0, r2
 258              	.LVL15:
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 259              		.loc 1 517 0
 260 0092 1860     		str	r0, [r3]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 261              		.loc 1 520 0
 262 0094 084B     		ldr	r3, .L28+4
 263 0096 1A69     		ldr	r2, [r3, #16]
 264 0098 42F00402 		orr	r2, r2, #4
 265 009c 1A61     		str	r2, [r3, #16]
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 266              		.loc 1 523 0
 267 009e 0129     		cmp	r1, #1
 268 00a0 01D1     		bne	.L26
 269              	.LBB8:
 270              	.LBB9:
 271              		.file 2 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\CMSIS\\Include/core_
   1:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 272              		.loc 2 282 0
 273              	@ 282 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include/core_cmInstr.h" 
 274 00a2 30BF     		wfi
 275              	@ 0 "" 2
 276              		.thumb
 277 00a4 00E0     		b	.L27
 278              	.L26:
 279              	.LBE9:
 280              	.LBE8:
 281              	.LBB10:
 282              	.LBB11:
 283:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 283              		.loc 2 293 0
 284              	@ 293 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include/core_cmInstr.h" 
 285 00a6 20BF     		wfe
 286              	@ 0 "" 2
 287              		.thumb
 288              	.L27:
 289              	.LBE11:
 290              	.LBE10:
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 291              		.loc 1 534 0
 292 00a8 034B     		ldr	r3, .L28+4
 293 00aa 1A69     		ldr	r2, [r3, #16]
 294 00ac 22F00402 		bic	r2, r2, #4
 295 00b0 1A61     		str	r2, [r3, #16]
 296 00b2 7047     		bx	lr
 297              	.L29:
 298              		.align	2
 299              	.L28:
 300 00b4 00700040 		.word	1073770496
 301 00b8 00ED00E0 		.word	-536810240
 302              		.cfi_endproc
 303              	.LFE118:
 305              		.align	2
 306              		.global	PWR_EnterSTANDBYMode
 307              		.thumb
 308              		.thumb_func
 310              	PWR_EnterSTANDBYMode:
 311              	.LFB119:
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 312              		.loc 1 549 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 317              		.loc 1 551 0
 318 00bc 074B     		ldr	r3, .L31
 319 00be 1A68     		ldr	r2, [r3]
 320 00c0 42F00402 		orr	r2, r2, #4
 321 00c4 1A60     		str	r2, [r3]
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 322              		.loc 1 554 0
 323 00c6 1A68     		ldr	r2, [r3]
 324 00c8 42F00202 		orr	r2, r2, #2
 325 00cc 1A60     		str	r2, [r3]
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 326              		.loc 1 557 0
 327 00ce 044B     		ldr	r3, .L31+4
 328 00d0 1A69     		ldr	r2, [r3, #16]
 329 00d2 42F00402 		orr	r2, r2, #4
 330 00d6 1A61     		str	r2, [r3, #16]
 331              	.LBB12:
 332              	.LBB13:
 282:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 333              		.loc 2 282 0
 334              	@ 282 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\StepDownConverter\CMSIS\Include/core_cmInstr.h" 
 335 00d8 30BF     		wfi
 336              	@ 0 "" 2
 337              		.thumb
 338 00da 7047     		bx	lr
 339              	.L32:
 340              		.align	2
 341              	.L31:
 342 00dc 00700040 		.word	1073770496
 343 00e0 00ED00E0 		.word	-536810240
 344              	.LBE13:
 345              	.LBE12:
 346              		.cfi_endproc
 347              	.LFE119:
 349              		.align	2
 350              		.global	PWR_GetFlagStatus
 351              		.thumb
 352              		.thumb_func
 354              	PWR_GetFlagStatus:
 355              	.LFB120:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 356              		.loc 1 606 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL16:
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 362              		.loc 1 612 0
 363 00e4 034B     		ldr	r3, .L36
 364 00e6 5B68     		ldr	r3, [r3, #4]
 365 00e8 0342     		tst	r3, r0
 366 00ea 01D0     		beq	.L35
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 367              		.loc 1 614 0
 368 00ec 0120     		movs	r0, #1
 369              	.LVL17:
 370 00ee 7047     		bx	lr
 371              	.LVL18:
 372              	.L35:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 373              		.loc 1 618 0
 374 00f0 0020     		movs	r0, #0
 375              	.LVL19:
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 376              		.loc 1 622 0
 377 00f2 7047     		bx	lr
 378              	.L37:
 379              		.align	2
 380              	.L36:
 381 00f4 00700040 		.word	1073770496
 382              		.cfi_endproc
 383              	.LFE120:
 385              		.align	2
 386              		.global	PWR_ClearFlag
 387              		.thumb
 388              		.thumb_func
 390              	PWR_ClearFlag:
 391              	.LFB121:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 392              		.loc 1 633 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              	.LVL20:
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 398              		.loc 1 637 0
 399 00f8 024B     		ldr	r3, .L39
 400 00fa 1A68     		ldr	r2, [r3]
 401 00fc 42EA8000 		orr	r0, r2, r0, lsl #2
 402              	.LVL21:
 403 0100 1860     		str	r0, [r3]
 404 0102 7047     		bx	lr
 405              	.L40:
 406              		.align	2
 407              	.L39:
 408 0104 00700040 		.word	1073770496
 409              		.cfi_endproc
 410              	.LFE121:
 412              	.Letext0:
 413              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\mach
 414              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\stdi
 415              		.file 5 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\CMSIS\\Include/core_
 416              		.file 6 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\STM32F4xx\\Include/s
 417              		.file 7 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\StepDownConverter\\STM32F4xx_StdPeriph_
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:23     .text:00000000 PWR_DeInit
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:53     .text:00000018 PWR_BackupAccessCmd
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:68     .text:00000020 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:72     .text:00000024 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:77     .text:00000024 PWR_PVDLevelConfig
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:101    .text:00000034 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:105    .text:00000038 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:110    .text:00000038 PWR_PVDCmd
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:125    .text:00000040 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:129    .text:00000044 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:134    .text:00000044 PWR_WakeUpPinCmd
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:149    .text:0000004c $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:153    .text:00000050 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:158    .text:00000050 PWR_BackupRegulatorCmd
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:173    .text:00000058 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:177    .text:0000005c $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:182    .text:0000005c PWR_MainRegulatorModeConfig
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:208    .text:00000078 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:212    .text:0000007c $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:217    .text:0000007c PWR_FlashPowerDownCmd
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:232    .text:00000084 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:236    .text:00000088 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:241    .text:00000088 PWR_EnterSTOPMode
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:300    .text:000000b4 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:305    .text:000000bc $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:310    .text:000000bc PWR_EnterSTANDBYMode
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:342    .text:000000dc $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:349    .text:000000e4 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:354    .text:000000e4 PWR_GetFlagStatus
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:381    .text:000000f4 $d
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:385    .text:000000f8 $t
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:390    .text:000000f8 PWR_ClearFlag
C:\Users\Filip\AppData\Local\Temp\cc1Di5KP.s:408    .text:00000104 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.1c01c98cf54d5aaab4df87c6bb476f00
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_pwr.h.53.260dc16dcf88b7f2ceff2d335c135b55

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
