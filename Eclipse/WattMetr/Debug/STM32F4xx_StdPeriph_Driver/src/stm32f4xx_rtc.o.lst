   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	RTC_ByteToBcd2:
  23              	.LFB165:
  24              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  25              		.loc 1 2696 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  31              		.loc 1 2697 0
  32 0000 0023     		movs	r3, #0
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  33              		.loc 1 2699 0
  34 0002 03E0     		b	.L2
  35              	.LVL1:
  36              	.L3:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
  37              		.loc 1 2701 0
  38 0004 0133     		adds	r3, r3, #1
  39              	.LVL2:
  40 0006 DBB2     		uxtb	r3, r3
  41              	.LVL3:
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
  42              		.loc 1 2702 0
  43 0008 0A38     		subs	r0, r0, #10
  44              	.LVL4:
  45 000a C0B2     		uxtb	r0, r0
  46              	.LVL5:
  47              	.L2:
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  48              		.loc 1 2699 0 discriminator 1
  49 000c 0928     		cmp	r0, #9
  50 000e F9D8     		bhi	.L3
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  51              		.loc 1 2705 0
  52 0010 1B01     		lsls	r3, r3, #4
  53              	.LVL6:
  54 0012 DBB2     		uxtb	r3, r3
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  55              		.loc 1 2706 0
  56 0014 1843     		orrs	r0, r0, r3
  57              	.LVL7:
  58 0016 7047     		bx	lr
  59              		.cfi_endproc
  60              	.LFE165:
  62              		.align	2
  63              		.thumb
  64              		.thumb_func
  66              	RTC_Bcd2ToByte:
  67              	.LFB166:
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  68              		.loc 1 2714 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL8:
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  74              		.loc 1 2716 0
  75 0018 0209     		lsrs	r2, r0, #4
  76 001a 02EB8202 		add	r2, r2, r2, lsl #2
  77 001e 5300     		lsls	r3, r2, #1
  78              	.LVL9:
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  79              		.loc 1 2717 0
  80 0020 00F00F00 		and	r0, r0, #15
  81              	.LVL10:
  82 0024 1844     		add	r0, r0, r3
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  83              		.loc 1 2718 0
  84 0026 C0B2     		uxtb	r0, r0
  85 0028 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE166:
  89 002a 00BF     		.align	2
  90              		.global	RTC_StructInit
  91              		.thumb
  92              		.thumb_func
  94              	RTC_StructInit:
  95              	.LFB112:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  96              		.loc 1 492 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL11:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 102              		.loc 1 494 0
 103 002c 0023     		movs	r3, #0
 104 002e 0360     		str	r3, [r0]
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 105              		.loc 1 497 0
 106 0030 7F23     		movs	r3, #127
 107 0032 4360     		str	r3, [r0, #4]
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 108              		.loc 1 500 0
 109 0034 FF23     		movs	r3, #255
 110 0036 8360     		str	r3, [r0, #8]
 111 0038 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE112:
 115 003a 00BF     		.align	2
 116              		.global	RTC_WriteProtectionCmd
 117              		.thumb
 118              		.thumb_func
 120              	RTC_WriteProtectionCmd:
 121              	.LFB113:
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 122              		.loc 1 514 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.LVL12:
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 128              		.loc 1 518 0
 129 003c 18B1     		cbz	r0, .L7
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 130              		.loc 1 521 0
 131 003e FF22     		movs	r2, #255
 132 0040 044B     		ldr	r3, .L9
 133 0042 5A62     		str	r2, [r3, #36]
 134 0044 7047     		bx	lr
 135              	.L7:
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 136              		.loc 1 526 0
 137 0046 034B     		ldr	r3, .L9
 138 0048 CA22     		movs	r2, #202
 139 004a 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 140              		.loc 1 527 0
 141 004c 5322     		movs	r2, #83
 142 004e 5A62     		str	r2, [r3, #36]
 143 0050 7047     		bx	lr
 144              	.L10:
 145 0052 00BF     		.align	2
 146              	.L9:
 147 0054 00280040 		.word	1073752064
 148              		.cfi_endproc
 149              	.LFE113:
 151              		.align	2
 152              		.global	RTC_EnterInitMode
 153              		.thumb
 154              		.thumb_func
 156              	RTC_EnterInitMode:
 157              	.LFB114:
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 158              		.loc 1 541 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 8
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0058 82B0     		sub	sp, sp, #8
 164              		.cfi_def_cfa_offset 8
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 165              		.loc 1 542 0
 166 005a 0023     		movs	r3, #0
 167 005c 0193     		str	r3, [sp, #4]
 168              	.LVL13:
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 169              		.loc 1 547 0
 170 005e 114B     		ldr	r3, .L18
 171 0060 DB68     		ldr	r3, [r3, #12]
 172 0062 13F0400F 		tst	r3, #64
 173 0066 17D1     		bne	.L15
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 174              		.loc 1 550 0
 175 0068 4FF0FF32 		mov	r2, #-1
 176 006c 0D4B     		ldr	r3, .L18
 177 006e DA60     		str	r2, [r3, #12]
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 178              		.loc 1 555 0
 179 0070 1946     		mov	r1, r3
 180              	.LVL14:
 181              	.L14:
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 182              		.loc 1 555 0 is_stmt 0 discriminator 1
 183 0072 CB68     		ldr	r3, [r1, #12]
 184 0074 03F04002 		and	r2, r3, #64
 185              	.LVL15:
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 186              		.loc 1 556 0 is_stmt 1 discriminator 1
 187 0078 019B     		ldr	r3, [sp, #4]
 188 007a 0133     		adds	r3, r3, #1
 189 007c 0193     		str	r3, [sp, #4]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 190              		.loc 1 557 0 discriminator 1
 191 007e 019B     		ldr	r3, [sp, #4]
 192 0080 B3F5803F 		cmp	r3, #65536
 193 0084 01D0     		beq	.L13
 194 0086 002A     		cmp	r2, #0
 195 0088 F3D0     		beq	.L14
 196              	.L13:
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 197              		.loc 1 559 0
 198 008a 064B     		ldr	r3, .L18
 199 008c DB68     		ldr	r3, [r3, #12]
 200 008e 13F0400F 		tst	r3, #64
 201 0092 03D0     		beq	.L16
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 202              		.loc 1 561 0
 203 0094 0120     		movs	r0, #1
 204 0096 02E0     		b	.L12
 205              	.LVL16:
 206              	.L15:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 207              		.loc 1 570 0
 208 0098 0120     		movs	r0, #1
 209 009a 00E0     		b	.L12
 210              	.LVL17:
 211              	.L16:
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 212              		.loc 1 565 0
 213 009c 0020     		movs	r0, #0
 214              	.LVL18:
 215              	.L12:
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 216              		.loc 1 574 0
 217 009e 02B0     		add	sp, sp, #8
 218              		@ sp needed
 219 00a0 7047     		bx	lr
 220              	.L19:
 221 00a2 00BF     		.align	2
 222              	.L18:
 223 00a4 00280040 		.word	1073752064
 224              		.cfi_endproc
 225              	.LFE114:
 227              		.align	2
 228              		.global	RTC_ExitInitMode
 229              		.thumb
 230              		.thumb_func
 232              	RTC_ExitInitMode:
 233              	.LFB115:
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 234              		.loc 1 586 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 239              		.loc 1 588 0
 240 00a8 024B     		ldr	r3, .L21
 241 00aa DA68     		ldr	r2, [r3, #12]
 242 00ac 22F08002 		bic	r2, r2, #128
 243 00b0 DA60     		str	r2, [r3, #12]
 244 00b2 7047     		bx	lr
 245              	.L22:
 246              		.align	2
 247              	.L21:
 248 00b4 00280040 		.word	1073752064
 249              		.cfi_endproc
 250              	.LFE115:
 252              		.align	2
 253              		.global	RTC_Init
 254              		.thumb
 255              		.thumb_func
 257              	RTC_Init:
 258              	.LFB111:
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 259              		.loc 1 446 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL19:
 264 00b8 10B5     		push	{r4, lr}
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 268 00ba 0446     		mov	r4, r0
 269              	.LVL20:
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 270              		.loc 1 455 0
 271 00bc 104B     		ldr	r3, .L26
 272 00be CA22     		movs	r2, #202
 273 00c0 5A62     		str	r2, [r3, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 274              		.loc 1 456 0
 275 00c2 5322     		movs	r2, #83
 276 00c4 5A62     		str	r2, [r3, #36]
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 277              		.loc 1 459 0
 278 00c6 FFF7FEFF 		bl	RTC_EnterInitMode
 279              	.LVL21:
 280 00ca 98B1     		cbz	r0, .L25
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 281              		.loc 1 466 0
 282 00cc 0C4B     		ldr	r3, .L26
 283 00ce 9A68     		ldr	r2, [r3, #8]
 284 00d0 22F04002 		bic	r2, r2, #64
 285 00d4 9A60     		str	r2, [r3, #8]
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 286              		.loc 1 468 0
 287 00d6 9968     		ldr	r1, [r3, #8]
 288 00d8 2268     		ldr	r2, [r4]
 289 00da 0A43     		orrs	r2, r2, r1
 290 00dc 9A60     		str	r2, [r3, #8]
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 291              		.loc 1 471 0
 292 00de A268     		ldr	r2, [r4, #8]
 293 00e0 1A61     		str	r2, [r3, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 294              		.loc 1 472 0
 295 00e2 1A69     		ldr	r2, [r3, #16]
 296 00e4 6168     		ldr	r1, [r4, #4]
 297 00e6 42EA0142 		orr	r2, r2, r1, lsl #16
 298 00ea 1A61     		str	r2, [r3, #16]
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 299              		.loc 1 475 0
 300 00ec FFF7FEFF 		bl	RTC_ExitInitMode
 301              	.LVL22:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 302              		.loc 1 477 0
 303 00f0 0120     		movs	r0, #1
 304 00f2 00E0     		b	.L24
 305              	.LVL23:
 306              	.L25:
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 307              		.loc 1 461 0
 308 00f4 0020     		movs	r0, #0
 309              	.LVL24:
 310              	.L24:
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 311              		.loc 1 480 0
 312 00f6 FF22     		movs	r2, #255
 313 00f8 014B     		ldr	r3, .L26
 314 00fa 5A62     		str	r2, [r3, #36]
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 315              		.loc 1 483 0
 316 00fc 10BD     		pop	{r4, pc}
 317              	.LVL25:
 318              	.L27:
 319 00fe 00BF     		.align	2
 320              	.L26:
 321 0100 00280040 		.word	1073752064
 322              		.cfi_endproc
 323              	.LFE111:
 325              		.align	2
 326              		.global	RTC_WaitForSynchro
 327              		.thumb
 328              		.thumb_func
 330              	RTC_WaitForSynchro:
 331              	.LFB116:
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 332              		.loc 1 608 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 8
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337 0104 82B0     		sub	sp, sp, #8
 338              		.cfi_def_cfa_offset 8
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 339              		.loc 1 609 0
 340 0106 0023     		movs	r3, #0
 341 0108 0193     		str	r3, [sp, #4]
 342              	.LVL26:
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 343              		.loc 1 614 0
 344 010a 114B     		ldr	r3, .L34
 345 010c CA22     		movs	r2, #202
 346 010e 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 347              		.loc 1 615 0
 348 0110 5322     		movs	r2, #83
 349 0112 5A62     		str	r2, [r3, #36]
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 350              		.loc 1 618 0
 351 0114 DA68     		ldr	r2, [r3, #12]
 352 0116 22F0A002 		bic	r2, r2, #160
 353 011a DA60     		str	r2, [r3, #12]
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 354              		.loc 1 623 0
 355 011c 1946     		mov	r1, r3
 356              	.LVL27:
 357              	.L30:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 358              		.loc 1 623 0 is_stmt 0 discriminator 1
 359 011e CB68     		ldr	r3, [r1, #12]
 360 0120 03F02002 		and	r2, r3, #32
 361              	.LVL28:
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 362              		.loc 1 624 0 is_stmt 1 discriminator 1
 363 0124 019B     		ldr	r3, [sp, #4]
 364 0126 0133     		adds	r3, r3, #1
 365 0128 0193     		str	r3, [sp, #4]
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 366              		.loc 1 625 0 discriminator 1
 367 012a 019B     		ldr	r3, [sp, #4]
 368 012c B3F5003F 		cmp	r3, #131072
 369 0130 01D0     		beq	.L29
 370 0132 002A     		cmp	r2, #0
 371 0134 F3D0     		beq	.L30
 372              	.L29:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 373              		.loc 1 627 0
 374 0136 064B     		ldr	r3, .L34
 375 0138 DB68     		ldr	r3, [r3, #12]
 376 013a 13F0200F 		tst	r3, #32
 377 013e 01D0     		beq	.L32
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 378              		.loc 1 629 0
 379 0140 0120     		movs	r0, #1
 380 0142 00E0     		b	.L31
 381              	.L32:
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 382              		.loc 1 633 0
 383 0144 0020     		movs	r0, #0
 384              	.L31:
 385              	.LVL29:
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 386              		.loc 1 637 0
 387 0146 FF22     		movs	r2, #255
 388              	.LVL30:
 389 0148 014B     		ldr	r3, .L34
 390 014a 5A62     		str	r2, [r3, #36]
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 391              		.loc 1 640 0
 392 014c 02B0     		add	sp, sp, #8
 393              		@ sp needed
 394 014e 7047     		bx	lr
 395              	.L35:
 396              		.align	2
 397              	.L34:
 398 0150 00280040 		.word	1073752064
 399              		.cfi_endproc
 400              	.LFE116:
 402              		.align	2
 403              		.global	RTC_DeInit
 404              		.thumb
 405              		.thumb_func
 407              	RTC_DeInit:
 408              	.LFB110:
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 409              		.loc 1 368 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 8
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0154 00B5     		push	{lr}
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 14, -4
 416 0156 83B0     		sub	sp, sp, #12
 417              		.cfi_def_cfa_offset 16
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 418              		.loc 1 369 0
 419 0158 0023     		movs	r3, #0
 420 015a 0193     		str	r3, [sp, #4]
 421              	.LVL31:
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 422              		.loc 1 374 0
 423 015c 204B     		ldr	r3, .L44
 424 015e CA22     		movs	r2, #202
 425 0160 5A62     		str	r2, [r3, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 426              		.loc 1 375 0
 427 0162 5322     		movs	r2, #83
 428 0164 5A62     		str	r2, [r3, #36]
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 429              		.loc 1 378 0
 430 0166 FFF7FEFF 		bl	RTC_EnterInitMode
 431              	.LVL32:
 432 016a 0028     		cmp	r0, #0
 433 016c 2DD0     		beq	.L40
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 434              		.loc 1 385 0
 435 016e 1C4B     		ldr	r3, .L44
 436 0170 0022     		movs	r2, #0
 437 0172 1A60     		str	r2, [r3]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 438              		.loc 1 386 0
 439 0174 42F20112 		movw	r2, #8449
 440 0178 5A60     		str	r2, [r3, #4]
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 441              		.loc 1 388 0
 442 017a 9A68     		ldr	r2, [r3, #8]
 443 017c 02F00702 		and	r2, r2, #7
 444 0180 9A60     		str	r2, [r3, #8]
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 445              		.loc 1 393 0
 446 0182 1946     		mov	r1, r3
 447              	.LVL33:
 448              	.L39:
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 449              		.loc 1 393 0 is_stmt 0 discriminator 1
 450 0184 CB68     		ldr	r3, [r1, #12]
 451 0186 03F00402 		and	r2, r3, #4
 452              	.LVL34:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 453              		.loc 1 394 0 is_stmt 1 discriminator 1
 454 018a 019B     		ldr	r3, [sp, #4]
 455 018c 0133     		adds	r3, r3, #1
 456 018e 0193     		str	r3, [sp, #4]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 457              		.loc 1 395 0 discriminator 1
 458 0190 019B     		ldr	r3, [sp, #4]
 459 0192 B3F5803F 		cmp	r3, #65536
 460 0196 01D0     		beq	.L38
 461 0198 002A     		cmp	r2, #0
 462 019a F3D0     		beq	.L39
 463              	.L38:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 464              		.loc 1 397 0
 465 019c 104B     		ldr	r3, .L44
 466 019e DB68     		ldr	r3, [r3, #12]
 467 01a0 13F0040F 		tst	r3, #4
 468 01a4 13D0     		beq	.L41
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 469              		.loc 1 404 0
 470 01a6 0E4B     		ldr	r3, .L44
 471 01a8 9A68     		ldr	r2, [r3, #8]
 472              	.LVL35:
 473 01aa 0022     		movs	r2, #0
 474 01ac 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 475              		.loc 1 405 0
 476 01ae 4FF6FF71 		movw	r1, #65535
 477 01b2 5961     		str	r1, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 478              		.loc 1 406 0
 479 01b4 0B49     		ldr	r1, .L44+4
 480 01b6 1961     		str	r1, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 481              		.loc 1 407 0
 482 01b8 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 483              		.loc 1 408 0
 484 01ba DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 485              		.loc 1 409 0
 486 01bc 1A62     		str	r2, [r3, #32]
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 487              		.loc 1 412 0
 488 01be DA60     		str	r2, [r3, #12]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 489              		.loc 1 415 0
 490 01c0 1A64     		str	r2, [r3, #64]
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 491              		.loc 1 417 0
 492 01c2 FFF7FEFF 		bl	RTC_WaitForSynchro
 493              	.LVL36:
 494 01c6 20B9     		cbnz	r0, .L42
 495 01c8 04E0     		b	.L37
 496              	.LVL37:
 497              	.L40:
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 498              		.loc 1 380 0
 499 01ca 0020     		movs	r0, #0
 500 01cc 02E0     		b	.L37
 501              	.LVL38:
 502              	.L41:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 503              		.loc 1 399 0
 504 01ce 0020     		movs	r0, #0
 505 01d0 00E0     		b	.L37
 506              	.LVL39:
 507              	.L42:
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 508              		.loc 1 423 0
 509 01d2 0120     		movs	r0, #1
 510              	.L37:
 511              	.LVL40:
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 512              		.loc 1 429 0
 513 01d4 FF22     		movs	r2, #255
 514 01d6 024B     		ldr	r3, .L44
 515 01d8 5A62     		str	r2, [r3, #36]
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 516              		.loc 1 432 0
 517 01da 03B0     		add	sp, sp, #12
 518              		@ sp needed
 519 01dc 5DF804FB 		ldr	pc, [sp], #4
 520              	.L45:
 521              		.align	2
 522              	.L44:
 523 01e0 00280040 		.word	1073752064
 524 01e4 FF007F00 		.word	8323327
 525              		.cfi_endproc
 526              	.LFE110:
 528              		.align	2
 529              		.global	RTC_RefClockCmd
 530              		.thumb
 531              		.thumb_func
 533              	RTC_RefClockCmd:
 534              	.LFB117:
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 535              		.loc 1 651 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              	.LVL41:
 540 01e8 10B5     		push	{r4, lr}
 541              		.cfi_def_cfa_offset 8
 542              		.cfi_offset 4, -8
 543              		.cfi_offset 14, -4
 544 01ea 0446     		mov	r4, r0
 545              	.LVL42:
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 546              		.loc 1 658 0
 547 01ec 0E4B     		ldr	r3, .L51
 548 01ee CA22     		movs	r2, #202
 549 01f0 5A62     		str	r2, [r3, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 550              		.loc 1 659 0
 551 01f2 5322     		movs	r2, #83
 552 01f4 5A62     		str	r2, [r3, #36]
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 553              		.loc 1 662 0
 554 01f6 FFF7FEFF 		bl	RTC_EnterInitMode
 555              	.LVL43:
 556 01fa 78B1     		cbz	r0, .L50
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 557              		.loc 1 668 0
 558 01fc 2CB1     		cbz	r4, .L48
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 559              		.loc 1 671 0
 560 01fe 0A4B     		ldr	r3, .L51
 561 0200 9A68     		ldr	r2, [r3, #8]
 562 0202 42F01002 		orr	r2, r2, #16
 563 0206 9A60     		str	r2, [r3, #8]
 564 0208 04E0     		b	.L49
 565              	.L48:
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 566              		.loc 1 676 0
 567 020a 074B     		ldr	r3, .L51
 568 020c 9A68     		ldr	r2, [r3, #8]
 569 020e 22F01002 		bic	r2, r2, #16
 570 0212 9A60     		str	r2, [r3, #8]
 571              	.L49:
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 572              		.loc 1 679 0
 573 0214 FFF7FEFF 		bl	RTC_ExitInitMode
 574              	.LVL44:
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 575              		.loc 1 681 0
 576 0218 0120     		movs	r0, #1
 577 021a 00E0     		b	.L47
 578              	.LVL45:
 579              	.L50:
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 580              		.loc 1 664 0
 581 021c 0020     		movs	r0, #0
 582              	.LVL46:
 583              	.L47:
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 584              		.loc 1 685 0
 585 021e FF22     		movs	r2, #255
 586 0220 014B     		ldr	r3, .L51
 587 0222 5A62     		str	r2, [r3, #36]
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 588              		.loc 1 688 0
 589 0224 10BD     		pop	{r4, pc}
 590              	.L52:
 591 0226 00BF     		.align	2
 592              	.L51:
 593 0228 00280040 		.word	1073752064
 594              		.cfi_endproc
 595              	.LFE117:
 597              		.align	2
 598              		.global	RTC_BypassShadowCmd
 599              		.thumb
 600              		.thumb_func
 602              	RTC_BypassShadowCmd:
 603              	.LFB118:
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 604              		.loc 1 699 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              		@ link register save eliminated.
 609              	.LVL47:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 610              		.loc 1 704 0
 611 022c 094B     		ldr	r3, .L56
 612 022e CA22     		movs	r2, #202
 613 0230 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 614              		.loc 1 705 0
 615 0232 5322     		movs	r2, #83
 616 0234 5A62     		str	r2, [r3, #36]
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 617              		.loc 1 707 0
 618 0236 20B1     		cbz	r0, .L54
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 619              		.loc 1 710 0
 620 0238 9A68     		ldr	r2, [r3, #8]
 621 023a 42F02002 		orr	r2, r2, #32
 622 023e 9A60     		str	r2, [r3, #8]
 623 0240 04E0     		b	.L55
 624              	.L54:
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 625              		.loc 1 715 0
 626 0242 044B     		ldr	r3, .L56
 627 0244 9A68     		ldr	r2, [r3, #8]
 628 0246 02F0DF02 		and	r2, r2, #223
 629 024a 9A60     		str	r2, [r3, #8]
 630              	.L55:
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 631              		.loc 1 719 0
 632 024c FF22     		movs	r2, #255
 633 024e 014B     		ldr	r3, .L56
 634 0250 5A62     		str	r2, [r3, #36]
 635 0252 7047     		bx	lr
 636              	.L57:
 637              		.align	2
 638              	.L56:
 639 0254 00280040 		.word	1073752064
 640              		.cfi_endproc
 641              	.LFE118:
 643              		.align	2
 644              		.global	RTC_SetTime
 645              		.thumb
 646              		.thumb_func
 648              	RTC_SetTime:
 649              	.LFB119:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 650              		.loc 1 754 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              	.LVL48:
 655 0258 38B5     		push	{r3, r4, r5, lr}
 656              		.cfi_def_cfa_offset 16
 657              		.cfi_offset 3, -16
 658              		.cfi_offset 4, -12
 659              		.cfi_offset 5, -8
 660              		.cfi_offset 14, -4
 661 025a 0C46     		mov	r4, r1
 662              	.LVL49:
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 663              		.loc 1 761 0
 664 025c 0346     		mov	r3, r0
 665 025e 38B9     		cbnz	r0, .L59
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 666              		.loc 1 763 0
 667 0260 224A     		ldr	r2, .L66
 668 0262 9268     		ldr	r2, [r2, #8]
 669 0264 12F0400F 		tst	r2, #64
 670 0268 09D1     		bne	.L60
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 671              		.loc 1 770 0
 672 026a 0022     		movs	r2, #0
 673 026c CA70     		strb	r2, [r1, #3]
 674 026e 06E0     		b	.L60
 675              	.L59:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 676              		.loc 1 778 0
 677 0270 1E4A     		ldr	r2, .L66
 678 0272 9268     		ldr	r2, [r2, #8]
 679 0274 12F0400F 		tst	r2, #64
 680 0278 01D1     		bne	.L60
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 681              		.loc 1 786 0
 682 027a 0022     		movs	r2, #0
 683 027c CA70     		strb	r2, [r1, #3]
 684              	.L60:
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 685              		.loc 1 794 0
 686 027e 53B1     		cbz	r3, .L61
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 687              		.loc 1 796 0
 688 0280 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 689              		.loc 1 797 0
 690 0282 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 691 0284 1B02     		lsls	r3, r3, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 692              		.loc 1 796 0
 693 0286 43EA0243 		orr	r3, r3, r2, lsl #16
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 694              		.loc 1 798 0
 695 028a A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 696              		.loc 1 797 0
 697 028c 1343     		orrs	r3, r3, r2
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 698              		.loc 1 799 0
 699 028e E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 700              		.loc 1 796 0
 701 0290 43EA0444 		orr	r4, r3, r4, lsl #16
 702              	.LVL50:
 703 0294 0FE0     		b	.L62
 704              	.LVL51:
 705              	.L61:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 706              		.loc 1 803 0
 707 0296 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 708              	.LVL52:
 709 0298 FFF7B2FE 		bl	RTC_ByteToBcd2
 710              	.LVL53:
 711 029c 0504     		lsls	r5, r0, #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 712              		.loc 1 804 0
 713 029e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 714 02a0 FFF7AEFE 		bl	RTC_ByteToBcd2
 715              	.LVL54:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 716              		.loc 1 803 0
 717 02a4 45EA0025 		orr	r5, r5, r0, lsl #8
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 718              		.loc 1 805 0
 719 02a8 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 720 02aa FFF7A9FE 		bl	RTC_ByteToBcd2
 721              	.LVL55:
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 722              		.loc 1 804 0
 723 02ae 2843     		orrs	r0, r0, r5
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 724              		.loc 1 806 0
 725 02b0 E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 726              	.LVL56:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 727              		.loc 1 803 0
 728 02b2 40EA0444 		orr	r4, r0, r4, lsl #16
 729              	.LVL57:
 730              	.L62:
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 731              		.loc 1 810 0
 732 02b6 0D4B     		ldr	r3, .L66
 733 02b8 CA22     		movs	r2, #202
 734 02ba 5A62     		str	r2, [r3, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 735              		.loc 1 811 0
 736 02bc 5322     		movs	r2, #83
 737 02be 5A62     		str	r2, [r3, #36]
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 738              		.loc 1 814 0
 739 02c0 FFF7FEFF 		bl	RTC_EnterInitMode
 740              	.LVL58:
 741 02c4 58B1     		cbz	r0, .L64
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 742              		.loc 1 821 0
 743 02c6 04F07F33 		and	r3, r4, #2139062143
 744 02ca 23F0FE43 		bic	r3, r3, #2130706432
 745 02ce 074A     		ldr	r2, .L66
 746 02d0 1360     		str	r3, [r2]
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 747              		.loc 1 824 0
 748 02d2 FFF7FEFF 		bl	RTC_ExitInitMode
 749              	.LVL59:
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 750              		.loc 1 826 0
 751 02d6 FFF7FEFF 		bl	RTC_WaitForSynchro
 752              	.LVL60:
 753 02da 10B9     		cbnz	r0, .L65
 754 02dc 02E0     		b	.L63
 755              	.L64:
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 756              		.loc 1 816 0
 757 02de 0020     		movs	r0, #0
 758 02e0 00E0     		b	.L63
 759              	.L65:
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 760              		.loc 1 832 0
 761 02e2 0120     		movs	r0, #1
 762              	.L63:
 763              	.LVL61:
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 764              		.loc 1 837 0
 765 02e4 FF22     		movs	r2, #255
 766 02e6 014B     		ldr	r3, .L66
 767 02e8 5A62     		str	r2, [r3, #36]
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 768              		.loc 1 840 0
 769 02ea 38BD     		pop	{r3, r4, r5, pc}
 770              	.LVL62:
 771              	.L67:
 772              		.align	2
 773              	.L66:
 774 02ec 00280040 		.word	1073752064
 775              		.cfi_endproc
 776              	.LFE119:
 778              		.align	2
 779              		.global	RTC_TimeStructInit
 780              		.thumb
 781              		.thumb_func
 783              	RTC_TimeStructInit:
 784              	.LFB120:
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 785              		.loc 1 850 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              		@ link register save eliminated.
 790              	.LVL63:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 791              		.loc 1 852 0
 792 02f0 0023     		movs	r3, #0
 793 02f2 C370     		strb	r3, [r0, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 794              		.loc 1 853 0
 795 02f4 0370     		strb	r3, [r0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 796              		.loc 1 854 0
 797 02f6 4370     		strb	r3, [r0, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 798              		.loc 1 855 0
 799 02f8 8370     		strb	r3, [r0, #2]
 800 02fa 7047     		bx	lr
 801              		.cfi_endproc
 802              	.LFE120:
 804              		.align	2
 805              		.global	RTC_GetTime
 806              		.thumb
 807              		.thumb_func
 809              	RTC_GetTime:
 810              	.LFB121:
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 811              		.loc 1 869 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              	.LVL64:
 816 02fc 70B5     		push	{r4, r5, r6, lr}
 817              		.cfi_def_cfa_offset 16
 818              		.cfi_offset 4, -16
 819              		.cfi_offset 5, -12
 820              		.cfi_offset 6, -8
 821              		.cfi_offset 14, -4
 822 02fe 0C46     		mov	r4, r1
 823              	.LVL65:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 824              		.loc 1 876 0
 825 0300 0E4B     		ldr	r3, .L71
 826 0302 1B68     		ldr	r3, [r3]
 827              	.LVL66:
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 828              		.loc 1 879 0
 829 0304 C3F30542 		ubfx	r2, r3, #16, #6
 830 0308 0A70     		strb	r2, [r1]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 831              		.loc 1 880 0
 832 030a C3F30626 		ubfx	r6, r3, #8, #7
 833 030e 4E70     		strb	r6, [r1, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 834              		.loc 1 881 0
 835 0310 03F07F05 		and	r5, r3, #127
 836 0314 8D70     		strb	r5, [r1, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 837              		.loc 1 882 0
 838 0316 03F48003 		and	r3, r3, #4194304
 839              	.LVL67:
 840 031a 1B0C     		lsrs	r3, r3, #16
 841 031c CB70     		strb	r3, [r1, #3]
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 842              		.loc 1 885 0
 843 031e 58B9     		cbnz	r0, .L69
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 844              		.loc 1 888 0
 845 0320 1046     		mov	r0, r2
 846              	.LVL68:
 847 0322 FFF779FE 		bl	RTC_Bcd2ToByte
 848              	.LVL69:
 849 0326 2070     		strb	r0, [r4]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 850              		.loc 1 889 0
 851 0328 3046     		mov	r0, r6
 852 032a FFF775FE 		bl	RTC_Bcd2ToByte
 853              	.LVL70:
 854 032e 6070     		strb	r0, [r4, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 855              		.loc 1 890 0
 856 0330 2846     		mov	r0, r5
 857 0332 FFF771FE 		bl	RTC_Bcd2ToByte
 858              	.LVL71:
 859 0336 A070     		strb	r0, [r4, #2]
 860              	.L69:
 861 0338 70BD     		pop	{r4, r5, r6, pc}
 862              	.LVL72:
 863              	.L72:
 864 033a 00BF     		.align	2
 865              	.L71:
 866 033c 00280040 		.word	1073752064
 867              		.cfi_endproc
 868              	.LFE121:
 870              		.align	2
 871              		.global	RTC_GetSubSecond
 872              		.thumb
 873              		.thumb_func
 875              	RTC_GetSubSecond:
 876              	.LFB122:
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 877              		.loc 1 902 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882              	.LVL73:
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 883              		.loc 1 906 0
 884 0340 014B     		ldr	r3, .L74
 885 0342 986A     		ldr	r0, [r3, #40]
 886              	.LVL74:
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 887              		.loc 1 909 0
 888 0344 5B68     		ldr	r3, [r3, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 889              		.loc 1 912 0
 890 0346 7047     		bx	lr
 891              	.L75:
 892              		.align	2
 893              	.L74:
 894 0348 00280040 		.word	1073752064
 895              		.cfi_endproc
 896              	.LFE122:
 898              		.align	2
 899              		.global	RTC_SetDate
 900              		.thumb
 901              		.thumb_func
 903              	RTC_SetDate:
 904              	.LFB123:
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 905              		.loc 1 927 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL75:
 910 034c 38B5     		push	{r3, r4, r5, lr}
 911              		.cfi_def_cfa_offset 16
 912              		.cfi_offset 3, -16
 913              		.cfi_offset 4, -12
 914              		.cfi_offset 5, -8
 915              		.cfi_offset 14, -4
 916 034e 0C46     		mov	r4, r1
 917              	.LVL76:
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 918              		.loc 1 934 0
 919 0350 0346     		mov	r3, r0
 920 0352 38B9     		cbnz	r0, .L77
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 921              		.loc 1 934 0 is_stmt 0 discriminator 1
 922 0354 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 923 0356 12F0100F 		tst	r2, #16
 924 035a 03D0     		beq	.L77
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 925              		.loc 1 936 0 is_stmt 1
 926 035c 22F01002 		bic	r2, r2, #16
 927 0360 0A32     		adds	r2, r2, #10
 928 0362 4A70     		strb	r2, [r1, #1]
 929              	.L77:
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 930              		.loc 1 955 0
 931 0364 53B1     		cbz	r3, .L78
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 932              		.loc 1 957 0
 933 0366 E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 934              		.loc 1 958 0
 935 0368 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 936 036a 1B02     		lsls	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 937              		.loc 1 957 0
 938 036c 43EA0243 		orr	r3, r3, r2, lsl #16
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 939              		.loc 1 959 0
 940 0370 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 941              		.loc 1 958 0
 942 0372 1343     		orrs	r3, r3, r2
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 943              		.loc 1 960 0
 944 0374 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 945              		.loc 1 957 0
 946 0376 43EA4434 		orr	r4, r3, r4, lsl #13
 947              	.LVL77:
 948 037a 0FE0     		b	.L79
 949              	.LVL78:
 950              	.L78:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 951              		.loc 1 964 0
 952 037c E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 953              	.LVL79:
 954 037e FFF73FFE 		bl	RTC_ByteToBcd2
 955              	.LVL80:
 956 0382 0504     		lsls	r5, r0, #16
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 957              		.loc 1 965 0
 958 0384 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 959 0386 FFF73BFE 		bl	RTC_ByteToBcd2
 960              	.LVL81:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 961              		.loc 1 964 0
 962 038a 45EA0025 		orr	r5, r5, r0, lsl #8
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 963              		.loc 1 966 0
 964 038e A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 965 0390 FFF736FE 		bl	RTC_ByteToBcd2
 966              	.LVL82:
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 967              		.loc 1 965 0
 968 0394 2843     		orrs	r0, r0, r5
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 969              		.loc 1 967 0
 970 0396 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 971              	.LVL83:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 972              		.loc 1 964 0
 973 0398 40EA4434 		orr	r4, r0, r4, lsl #13
 974              	.LVL84:
 975              	.L79:
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 976              		.loc 1 971 0
 977 039c 0D4B     		ldr	r3, .L83
 978 039e CA22     		movs	r2, #202
 979 03a0 5A62     		str	r2, [r3, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 980              		.loc 1 972 0
 981 03a2 5322     		movs	r2, #83
 982 03a4 5A62     		str	r2, [r3, #36]
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 983              		.loc 1 975 0
 984 03a6 FFF7FEFF 		bl	RTC_EnterInitMode
 985              	.LVL85:
 986 03aa 58B1     		cbz	r0, .L81
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 987              		.loc 1 982 0
 988 03ac 24F07F43 		bic	r3, r4, #-16777216
 989 03b0 23F0C003 		bic	r3, r3, #192
 990 03b4 074A     		ldr	r2, .L83
 991 03b6 5360     		str	r3, [r2, #4]
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 992              		.loc 1 985 0
 993 03b8 FFF7FEFF 		bl	RTC_ExitInitMode
 994              	.LVL86:
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 995              		.loc 1 987 0
 996 03bc FFF7FEFF 		bl	RTC_WaitForSynchro
 997              	.LVL87:
 998 03c0 10B9     		cbnz	r0, .L82
 999 03c2 02E0     		b	.L80
 1000              	.L81:
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1001              		.loc 1 977 0
 1002 03c4 0020     		movs	r0, #0
 1003 03c6 00E0     		b	.L80
 1004              	.L82:
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1005              		.loc 1 993 0
 1006 03c8 0120     		movs	r0, #1
 1007              	.L80:
 1008              	.LVL88:
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1009              		.loc 1 997 0
 1010 03ca FF22     		movs	r2, #255
 1011 03cc 014B     		ldr	r3, .L83
 1012 03ce 5A62     		str	r2, [r3, #36]
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1013              		.loc 1 1000 0
 1014 03d0 38BD     		pop	{r3, r4, r5, pc}
 1015              	.LVL89:
 1016              	.L84:
 1017 03d2 00BF     		.align	2
 1018              	.L83:
 1019 03d4 00280040 		.word	1073752064
 1020              		.cfi_endproc
 1021              	.LFE123:
 1023              		.align	2
 1024              		.global	RTC_DateStructInit
 1025              		.thumb
 1026              		.thumb_func
 1028              	RTC_DateStructInit:
 1029              	.LFB124:
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1030              		.loc 1 1010 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 1035              	.LVL90:
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1036              		.loc 1 1012 0
 1037 03d8 0123     		movs	r3, #1
 1038 03da 0370     		strb	r3, [r0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1039              		.loc 1 1013 0
 1040 03dc 8370     		strb	r3, [r0, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1041              		.loc 1 1014 0
 1042 03de 4370     		strb	r3, [r0, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1043              		.loc 1 1015 0
 1044 03e0 0023     		movs	r3, #0
 1045 03e2 C370     		strb	r3, [r0, #3]
 1046 03e4 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE124:
 1050 03e6 00BF     		.align	2
 1051              		.global	RTC_GetDate
 1052              		.thumb
 1053              		.thumb_func
 1055              	RTC_GetDate:
 1056              	.LFB125:
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1057              		.loc 1 1029 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              	.LVL91:
 1062 03e8 70B5     		push	{r4, r5, r6, lr}
 1063              		.cfi_def_cfa_offset 16
 1064              		.cfi_offset 4, -16
 1065              		.cfi_offset 5, -12
 1066              		.cfi_offset 6, -8
 1067              		.cfi_offset 14, -4
 1068 03ea 0C46     		mov	r4, r1
 1069              	.LVL92:
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1070              		.loc 1 1036 0
 1071 03ec 0D4B     		ldr	r3, .L88
 1072 03ee 5B68     		ldr	r3, [r3, #4]
 1073              	.LVL93:
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1074              		.loc 1 1039 0
 1075 03f0 C3F30742 		ubfx	r2, r3, #16, #8
 1076 03f4 CA70     		strb	r2, [r1, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1077              		.loc 1 1040 0
 1078 03f6 C3F30426 		ubfx	r6, r3, #8, #5
 1079 03fa 4E70     		strb	r6, [r1, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1080              		.loc 1 1041 0
 1081 03fc 03F03F05 		and	r5, r3, #63
 1082 0400 8D70     		strb	r5, [r1, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1083              		.loc 1 1042 0
 1084 0402 C3F34233 		ubfx	r3, r3, #13, #3
 1085              	.LVL94:
 1086 0406 0B70     		strb	r3, [r1]
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1087              		.loc 1 1045 0
 1088 0408 58B9     		cbnz	r0, .L86
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1089              		.loc 1 1048 0
 1090 040a 1046     		mov	r0, r2
 1091              	.LVL95:
 1092 040c FFF704FE 		bl	RTC_Bcd2ToByte
 1093              	.LVL96:
 1094 0410 E070     		strb	r0, [r4, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1095              		.loc 1 1049 0
 1096 0412 3046     		mov	r0, r6
 1097 0414 FFF700FE 		bl	RTC_Bcd2ToByte
 1098              	.LVL97:
 1099 0418 6070     		strb	r0, [r4, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1100              		.loc 1 1050 0
 1101 041a 2846     		mov	r0, r5
 1102 041c FFF7FCFD 		bl	RTC_Bcd2ToByte
 1103              	.LVL98:
 1104 0420 A070     		strb	r0, [r4, #2]
 1105              	.L86:
 1106 0422 70BD     		pop	{r4, r5, r6, pc}
 1107              	.LVL99:
 1108              	.L89:
 1109              		.align	2
 1110              	.L88:
 1111 0424 00280040 		.word	1073752064
 1112              		.cfi_endproc
 1113              	.LFE125:
 1115              		.align	2
 1116              		.global	RTC_SetAlarm
 1117              		.thumb
 1118              		.thumb_func
 1120              	RTC_SetAlarm:
 1121              	.LFB126:
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1122              		.loc 1 1089 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              	.LVL100:
 1127 0428 70B5     		push	{r4, r5, r6, lr}
 1128              		.cfi_def_cfa_offset 16
 1129              		.cfi_offset 4, -16
 1130              		.cfi_offset 5, -12
 1131              		.cfi_offset 6, -8
 1132              		.cfi_offset 14, -4
 1133 042a 0D46     		mov	r5, r1
 1134 042c 1446     		mov	r4, r2
 1135              	.LVL101:
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1136              		.loc 1 1098 0
 1137 042e 0346     		mov	r3, r0
 1138 0430 38B9     		cbnz	r0, .L91
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1139              		.loc 1 1100 0
 1140 0432 264A     		ldr	r2, .L97
 1141              	.LVL102:
 1142 0434 9268     		ldr	r2, [r2, #8]
 1143 0436 12F0400F 		tst	r2, #64
 1144 043a 09D1     		bne	.L92
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1145              		.loc 1 1107 0
 1146 043c 0022     		movs	r2, #0
 1147 043e E270     		strb	r2, [r4, #3]
 1148 0440 06E0     		b	.L92
 1149              	.LVL103:
 1150              	.L91:
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1151              		.loc 1 1124 0
 1152 0442 224A     		ldr	r2, .L97
 1153              	.LVL104:
 1154 0444 9268     		ldr	r2, [r2, #8]
 1155 0446 12F0400F 		tst	r2, #64
 1156 044a 01D1     		bne	.L92
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1157              		.loc 1 1132 0
 1158 044c 0022     		movs	r2, #0
 1159 044e E270     		strb	r2, [r4, #3]
 1160              	.L92:
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1161              		.loc 1 1152 0
 1162 0450 8BB1     		cbz	r3, .L93
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1163              		.loc 1 1154 0
 1164 0452 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1165              		.loc 1 1155 0
 1166 0454 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 1167              	.LVL105:
 1168 0456 0902     		lsls	r1, r1, #8
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1169              		.loc 1 1154 0
 1170 0458 41EA0341 		orr	r1, r1, r3, lsl #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1171              		.loc 1 1156 0
 1172 045c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1173              		.loc 1 1155 0
 1174 045e 1943     		orrs	r1, r1, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1175              		.loc 1 1157 0
 1176 0460 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1177              		.loc 1 1156 0
 1178 0462 41EA0341 		orr	r1, r1, r3, lsl #16
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1179              		.loc 1 1158 0
 1180 0466 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1181              		.loc 1 1157 0
 1182 0468 41EA0361 		orr	r1, r1, r3, lsl #24
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1183              		.loc 1 1159 0
 1184 046c A368     		ldr	r3, [r4, #8]
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1185              		.loc 1 1158 0
 1186 046e 1943     		orrs	r1, r1, r3
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1187              		.loc 1 1160 0
 1188 0470 6268     		ldr	r2, [r4, #4]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1189              		.loc 1 1154 0
 1190 0472 1143     		orrs	r1, r1, r2
 1191              	.LVL106:
 1192 0474 19E0     		b	.L94
 1193              	.LVL107:
 1194              	.L93:
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1195              		.loc 1 1164 0
 1196 0476 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1197              	.LVL108:
 1198 0478 FFF7C2FD 		bl	RTC_ByteToBcd2
 1199              	.LVL109:
 1200 047c 0604     		lsls	r6, r0, #16
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1201              		.loc 1 1165 0
 1202 047e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1203 0480 FFF7BEFD 		bl	RTC_ByteToBcd2
 1204              	.LVL110:
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1205              		.loc 1 1164 0
 1206 0484 46EA0026 		orr	r6, r6, r0, lsl #8
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1207              		.loc 1 1166 0
 1208 0488 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1209 048a FFF7B9FD 		bl	RTC_ByteToBcd2
 1210              	.LVL111:
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1211              		.loc 1 1165 0
 1212 048e 3043     		orrs	r0, r0, r6
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1213              		.loc 1 1167 0
 1214 0490 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1215              		.loc 1 1166 0
 1216 0492 40EA0346 		orr	r6, r0, r3, lsl #16
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1217              		.loc 1 1168 0
 1218 0496 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1219 0498 FFF7B2FD 		bl	RTC_ByteToBcd2
 1220              	.LVL112:
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1221              		.loc 1 1167 0
 1222 049c 46EA0060 		orr	r0, r6, r0, lsl #24
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1223              		.loc 1 1169 0
 1224 04a0 A368     		ldr	r3, [r4, #8]
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1225              		.loc 1 1168 0
 1226 04a2 40EA0301 		orr	r1, r0, r3
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1227              		.loc 1 1170 0
 1228 04a6 6268     		ldr	r2, [r4, #4]
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1229              		.loc 1 1164 0
 1230 04a8 1143     		orrs	r1, r1, r2
 1231              	.LVL113:
 1232              	.L94:
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1233              		.loc 1 1174 0
 1234 04aa 084B     		ldr	r3, .L97
 1235 04ac CA22     		movs	r2, #202
 1236 04ae 5A62     		str	r2, [r3, #36]
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1237              		.loc 1 1175 0
 1238 04b0 5322     		movs	r2, #83
 1239 04b2 5A62     		str	r2, [r3, #36]
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1240              		.loc 1 1178 0
 1241 04b4 B5F5807F 		cmp	r5, #256
 1242 04b8 01D1     		bne	.L95
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1243              		.loc 1 1180 0
 1244 04ba D961     		str	r1, [r3, #28]
 1245 04bc 01E0     		b	.L96
 1246              	.L95:
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1247              		.loc 1 1184 0
 1248 04be 034B     		ldr	r3, .L97
 1249 04c0 1962     		str	r1, [r3, #32]
 1250              	.L96:
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1251              		.loc 1 1188 0
 1252 04c2 FF22     		movs	r2, #255
 1253 04c4 014B     		ldr	r3, .L97
 1254 04c6 5A62     		str	r2, [r3, #36]
 1255 04c8 70BD     		pop	{r4, r5, r6, pc}
 1256              	.LVL114:
 1257              	.L98:
 1258 04ca 00BF     		.align	2
 1259              	.L97:
 1260 04cc 00280040 		.word	1073752064
 1261              		.cfi_endproc
 1262              	.LFE126:
 1264              		.align	2
 1265              		.global	RTC_AlarmStructInit
 1266              		.thumb
 1267              		.thumb_func
 1269              	RTC_AlarmStructInit:
 1270              	.LFB127:
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1271              		.loc 1 1200 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276              	.LVL115:
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1277              		.loc 1 1202 0
 1278 04d0 0023     		movs	r3, #0
 1279 04d2 C370     		strb	r3, [r0, #3]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1280              		.loc 1 1203 0
 1281 04d4 0370     		strb	r3, [r0]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1282              		.loc 1 1204 0
 1283 04d6 4370     		strb	r3, [r0, #1]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1284              		.loc 1 1205 0
 1285 04d8 8370     		strb	r3, [r0, #2]
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1286              		.loc 1 1208 0
 1287 04da 8360     		str	r3, [r0, #8]
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1288              		.loc 1 1209 0
 1289 04dc 0122     		movs	r2, #1
 1290 04de 0273     		strb	r2, [r0, #12]
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1291              		.loc 1 1212 0
 1292 04e0 4360     		str	r3, [r0, #4]
 1293 04e2 7047     		bx	lr
 1294              		.cfi_endproc
 1295              	.LFE127:
 1297              		.align	2
 1298              		.global	RTC_GetAlarm
 1299              		.thumb
 1300              		.thumb_func
 1302              	RTC_GetAlarm:
 1303              	.LFB128:
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1304              		.loc 1 1230 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              	.LVL116:
 1309 04e4 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1310              		.cfi_def_cfa_offset 24
 1311              		.cfi_offset 3, -24
 1312              		.cfi_offset 4, -20
 1313              		.cfi_offset 5, -16
 1314              		.cfi_offset 6, -12
 1315              		.cfi_offset 7, -8
 1316              		.cfi_offset 14, -4
 1317 04e6 1446     		mov	r4, r2
 1318              	.LVL117:
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1319              		.loc 1 1238 0
 1320 04e8 B1F5807F 		cmp	r1, #256
 1321 04ec 02D1     		bne	.L101
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1322              		.loc 1 1240 0
 1323 04ee 164B     		ldr	r3, .L104
 1324 04f0 DB69     		ldr	r3, [r3, #28]
 1325              	.LVL118:
 1326 04f2 01E0     		b	.L102
 1327              	.LVL119:
 1328              	.L101:
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1329              		.loc 1 1244 0
 1330 04f4 144B     		ldr	r3, .L104
 1331 04f6 1B6A     		ldr	r3, [r3, #32]
 1332              	.LVL120:
 1333              	.L102:
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1334              		.loc 1 1248 0
 1335 04f8 C3F30542 		ubfx	r2, r3, #16, #6
 1336              	.LVL121:
 1337 04fc 2270     		strb	r2, [r4]
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1338              		.loc 1 1250 0
 1339 04fe C3F30627 		ubfx	r7, r3, #8, #7
 1340 0502 6770     		strb	r7, [r4, #1]
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1341              		.loc 1 1252 0
 1342 0504 03F07F06 		and	r6, r3, #127
 1343 0508 A670     		strb	r6, [r4, #2]
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1344              		.loc 1 1254 0
 1345 050a 03F48001 		and	r1, r3, #4194304
 1346              	.LVL122:
 1347 050e 090C     		lsrs	r1, r1, #16
 1348 0510 E170     		strb	r1, [r4, #3]
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1349              		.loc 1 1255 0
 1350 0512 C3F30565 		ubfx	r5, r3, #24, #6
 1351 0516 2573     		strb	r5, [r4, #12]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1352              		.loc 1 1256 0
 1353 0518 03F08041 		and	r1, r3, #1073741824
 1354 051c A160     		str	r1, [r4, #8]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1355              		.loc 1 1257 0
 1356 051e 03F08033 		and	r3, r3, #-2139062144
 1357              	.LVL123:
 1358 0522 6360     		str	r3, [r4, #4]
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1359              		.loc 1 1259 0
 1360 0524 78B9     		cbnz	r0, .L100
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1361              		.loc 1 1261 0
 1362 0526 1046     		mov	r0, r2
 1363              	.LVL124:
 1364 0528 FFF776FD 		bl	RTC_Bcd2ToByte
 1365              	.LVL125:
 1366 052c 2070     		strb	r0, [r4]
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1367              		.loc 1 1263 0
 1368 052e 3846     		mov	r0, r7
 1369 0530 FFF772FD 		bl	RTC_Bcd2ToByte
 1370              	.LVL126:
 1371 0534 6070     		strb	r0, [r4, #1]
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1372              		.loc 1 1265 0
 1373 0536 3046     		mov	r0, r6
 1374 0538 FFF76EFD 		bl	RTC_Bcd2ToByte
 1375              	.LVL127:
 1376 053c A070     		strb	r0, [r4, #2]
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1377              		.loc 1 1267 0
 1378 053e 2846     		mov	r0, r5
 1379 0540 FFF76AFD 		bl	RTC_Bcd2ToByte
 1380              	.LVL128:
 1381 0544 2073     		strb	r0, [r4, #12]
 1382              	.L100:
 1383 0546 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1384              	.LVL129:
 1385              	.L105:
 1386              		.align	2
 1387              	.L104:
 1388 0548 00280040 		.word	1073752064
 1389              		.cfi_endproc
 1390              	.LFE128:
 1392              		.align	2
 1393              		.global	RTC_AlarmCmd
 1394              		.thumb
 1395              		.thumb_func
 1397              	RTC_AlarmCmd:
 1398              	.LFB129:
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1399              		.loc 1 1284 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 8
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 1404              	.LVL130:
 1405 054c 10B4     		push	{r4}
 1406              		.cfi_def_cfa_offset 4
 1407              		.cfi_offset 4, -4
 1408 054e 83B0     		sub	sp, sp, #12
 1409              		.cfi_def_cfa_offset 16
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1410              		.loc 1 1285 0
 1411 0550 0023     		movs	r3, #0
 1412 0552 0193     		str	r3, [sp, #4]
 1413              	.LVL131:
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1414              		.loc 1 1294 0
 1415 0554 164B     		ldr	r3, .L113
 1416 0556 CA22     		movs	r2, #202
 1417 0558 5A62     		str	r2, [r3, #36]
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1418              		.loc 1 1295 0
 1419 055a 5322     		movs	r2, #83
 1420 055c 5A62     		str	r2, [r3, #36]
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1421              		.loc 1 1298 0
 1422 055e 21B1     		cbz	r1, .L107
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1423              		.loc 1 1300 0
 1424 0560 9A68     		ldr	r2, [r3, #8]
 1425 0562 1043     		orrs	r0, r0, r2
 1426              	.LVL132:
 1427 0564 9860     		str	r0, [r3, #8]
 1428              	.LVL133:
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1429              		.loc 1 1302 0
 1430 0566 0120     		movs	r0, #1
 1431 0568 1AE0     		b	.L108
 1432              	.LVL134:
 1433              	.L107:
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1434              		.loc 1 1307 0
 1435 056a 114B     		ldr	r3, .L113
 1436 056c 9A68     		ldr	r2, [r3, #8]
 1437 056e 22EA0002 		bic	r2, r2, r0
 1438 0572 9A60     		str	r2, [r3, #8]
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1439              		.loc 1 1312 0
 1440 0574 1C46     		mov	r4, r3
 1441 0576 000A     		lsrs	r0, r0, #8
 1442              	.LVL135:
 1443              	.L110:
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1444              		.loc 1 1312 0 is_stmt 0 discriminator 1
 1445 0578 E368     		ldr	r3, [r4, #12]
 1446 057a 0146     		mov	r1, r0
 1447 057c 03EA0002 		and	r2, r3, r0
 1448              	.LVL136:
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1449              		.loc 1 1313 0 is_stmt 1 discriminator 1
 1450 0580 019B     		ldr	r3, [sp, #4]
 1451 0582 0133     		adds	r3, r3, #1
 1452 0584 0193     		str	r3, [sp, #4]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1453              		.loc 1 1314 0 discriminator 1
 1454 0586 019B     		ldr	r3, [sp, #4]
 1455 0588 B3F5803F 		cmp	r3, #65536
 1456 058c 01D0     		beq	.L109
 1457 058e 002A     		cmp	r2, #0
 1458 0590 F2D0     		beq	.L110
 1459              	.L109:
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1460              		.loc 1 1316 0
 1461 0592 074B     		ldr	r3, .L113
 1462 0594 DB68     		ldr	r3, [r3, #12]
 1463 0596 1942     		tst	r1, r3
 1464 0598 01D1     		bne	.L111
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1465              		.loc 1 1318 0
 1466 059a 0020     		movs	r0, #0
 1467 059c 00E0     		b	.L108
 1468              	.L111:
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1469              		.loc 1 1322 0
 1470 059e 0120     		movs	r0, #1
 1471              	.LVL137:
 1472              	.L108:
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1473              		.loc 1 1327 0
 1474 05a0 FF22     		movs	r2, #255
 1475 05a2 034B     		ldr	r3, .L113
 1476 05a4 5A62     		str	r2, [r3, #36]
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1477              		.loc 1 1330 0
 1478 05a6 03B0     		add	sp, sp, #12
 1479              		@ sp needed
 1480 05a8 5DF8044B 		ldr	r4, [sp], #4
 1481 05ac 7047     		bx	lr
 1482              	.L114:
 1483 05ae 00BF     		.align	2
 1484              	.L113:
 1485 05b0 00280040 		.word	1073752064
 1486              		.cfi_endproc
 1487              	.LFE129:
 1489              		.align	2
 1490              		.global	RTC_AlarmSubSecondConfig
 1491              		.thumb
 1492              		.thumb_func
 1494              	RTC_AlarmSubSecondConfig:
 1495              	.LFB130:
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1496              		.loc 1 1378 0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500              		@ link register save eliminated.
 1501              	.LVL138:
 1502 05b4 10B4     		push	{r4}
 1503              		.cfi_def_cfa_offset 4
 1504              		.cfi_offset 4, -4
 1505              	.LVL139:
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1506              		.loc 1 1387 0
 1507 05b6 094B     		ldr	r3, .L118
 1508 05b8 CA24     		movs	r4, #202
 1509 05ba 5C62     		str	r4, [r3, #36]
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1510              		.loc 1 1388 0
 1511 05bc 5324     		movs	r4, #83
 1512 05be 5C62     		str	r4, [r3, #36]
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 1513              		.loc 1 1391 0
 1514 05c0 0A43     		orrs	r2, r2, r1
 1515              	.LVL140:
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1516              		.loc 1 1393 0
 1517 05c2 B0F5807F 		cmp	r0, #256
 1518 05c6 01D1     		bne	.L116
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 1519              		.loc 1 1396 0
 1520 05c8 5A64     		str	r2, [r3, #68]
 1521 05ca 01E0     		b	.L117
 1522              	.L116:
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 1523              		.loc 1 1401 0
 1524 05cc 034B     		ldr	r3, .L118
 1525 05ce 9A64     		str	r2, [r3, #72]
 1526              	.L117:
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 1527              		.loc 1 1405 0
 1528 05d0 FF22     		movs	r2, #255
 1529              	.LVL141:
 1530 05d2 024B     		ldr	r3, .L118
 1531 05d4 5A62     		str	r2, [r3, #36]
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1532              		.loc 1 1407 0
 1533 05d6 5DF8044B 		ldr	r4, [sp], #4
 1534 05da 7047     		bx	lr
 1535              	.L119:
 1536              		.align	2
 1537              	.L118:
 1538 05dc 00280040 		.word	1073752064
 1539              		.cfi_endproc
 1540              	.LFE130:
 1542              		.align	2
 1543              		.global	RTC_GetAlarmSubSecond
 1544              		.thumb
 1545              		.thumb_func
 1547              	RTC_GetAlarmSubSecond:
 1548              	.LFB131:
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1549              		.loc 1 1419 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554              	.LVL142:
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1555              		.loc 1 1423 0
 1556 05e0 B0F5807F 		cmp	r0, #256
 1557 05e4 04D1     		bne	.L121
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1558              		.loc 1 1425 0
 1559 05e6 054B     		ldr	r3, .L123
 1560 05e8 586C     		ldr	r0, [r3, #68]
 1561              	.LVL143:
 1562 05ea C0F30E00 		ubfx	r0, r0, #0, #15
 1563              	.LVL144:
 1564 05ee 7047     		bx	lr
 1565              	.LVL145:
 1566              	.L121:
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 1567              		.loc 1 1429 0
 1568 05f0 024B     		ldr	r3, .L123
 1569 05f2 986C     		ldr	r0, [r3, #72]
 1570              	.LVL146:
 1571 05f4 C0F30E00 		ubfx	r0, r0, #0, #15
 1572              	.LVL147:
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1573              		.loc 1 1433 0
 1574 05f8 7047     		bx	lr
 1575              	.L124:
 1576 05fa 00BF     		.align	2
 1577              	.L123:
 1578 05fc 00280040 		.word	1073752064
 1579              		.cfi_endproc
 1580              	.LFE131:
 1582              		.align	2
 1583              		.global	RTC_WakeUpClockConfig
 1584              		.thumb
 1585              		.thumb_func
 1587              	RTC_WakeUpClockConfig:
 1588              	.LFB132:
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1589              		.loc 1 1468 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593              		@ link register save eliminated.
 1594              	.LVL148:
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1595              		.loc 1 1473 0
 1596 0600 074B     		ldr	r3, .L126
 1597 0602 CA22     		movs	r2, #202
 1598 0604 5A62     		str	r2, [r3, #36]
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1599              		.loc 1 1474 0
 1600 0606 5322     		movs	r2, #83
 1601 0608 5A62     		str	r2, [r3, #36]
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1602              		.loc 1 1477 0
 1603 060a 9A68     		ldr	r2, [r3, #8]
 1604 060c 22F00702 		bic	r2, r2, #7
 1605 0610 9A60     		str	r2, [r3, #8]
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1606              		.loc 1 1480 0
 1607 0612 9A68     		ldr	r2, [r3, #8]
 1608 0614 1043     		orrs	r0, r0, r2
 1609              	.LVL149:
 1610 0616 9860     		str	r0, [r3, #8]
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1611              		.loc 1 1483 0
 1612 0618 FF22     		movs	r2, #255
 1613 061a 5A62     		str	r2, [r3, #36]
 1614 061c 7047     		bx	lr
 1615              	.L127:
 1616 061e 00BF     		.align	2
 1617              	.L126:
 1618 0620 00280040 		.word	1073752064
 1619              		.cfi_endproc
 1620              	.LFE132:
 1622              		.align	2
 1623              		.global	RTC_SetWakeUpCounter
 1624              		.thumb
 1625              		.thumb_func
 1627              	RTC_SetWakeUpCounter:
 1628              	.LFB133:
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1629              		.loc 1 1495 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              		@ link register save eliminated.
 1634              	.LVL150:
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1635              		.loc 1 1500 0
 1636 0624 044B     		ldr	r3, .L129
 1637 0626 CA22     		movs	r2, #202
 1638 0628 5A62     		str	r2, [r3, #36]
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1639              		.loc 1 1501 0
 1640 062a 5322     		movs	r2, #83
 1641 062c 5A62     		str	r2, [r3, #36]
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 1642              		.loc 1 1504 0
 1643 062e 5861     		str	r0, [r3, #20]
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1644              		.loc 1 1507 0
 1645 0630 FF22     		movs	r2, #255
 1646 0632 5A62     		str	r2, [r3, #36]
 1647 0634 7047     		bx	lr
 1648              	.L130:
 1649 0636 00BF     		.align	2
 1650              	.L129:
 1651 0638 00280040 		.word	1073752064
 1652              		.cfi_endproc
 1653              	.LFE133:
 1655              		.align	2
 1656              		.global	RTC_GetWakeUpCounter
 1657              		.thumb
 1658              		.thumb_func
 1660              	RTC_GetWakeUpCounter:
 1661              	.LFB134:
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1662              		.loc 1 1516 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1667              		.loc 1 1518 0
 1668 063c 014B     		ldr	r3, .L132
 1669 063e 5869     		ldr	r0, [r3, #20]
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1670              		.loc 1 1519 0
 1671 0640 80B2     		uxth	r0, r0
 1672 0642 7047     		bx	lr
 1673              	.L133:
 1674              		.align	2
 1675              	.L132:
 1676 0644 00280040 		.word	1073752064
 1677              		.cfi_endproc
 1678              	.LFE134:
 1680              		.align	2
 1681              		.global	RTC_WakeUpCmd
 1682              		.thumb
 1683              		.thumb_func
 1685              	RTC_WakeUpCmd:
 1686              	.LFB135:
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1687              		.loc 1 1528 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 8
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692              	.LVL151:
 1693 0648 82B0     		sub	sp, sp, #8
 1694              		.cfi_def_cfa_offset 8
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1695              		.loc 1 1529 0
 1696 064a 0023     		movs	r3, #0
 1697 064c 0193     		str	r3, [sp, #4]
 1698              	.LVL152:
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1699              		.loc 1 1537 0
 1700 064e 154B     		ldr	r3, .L141
 1701 0650 CA22     		movs	r2, #202
 1702 0652 5A62     		str	r2, [r3, #36]
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1703              		.loc 1 1538 0
 1704 0654 5322     		movs	r2, #83
 1705 0656 5A62     		str	r2, [r3, #36]
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1706              		.loc 1 1540 0
 1707 0658 28B1     		cbz	r0, .L135
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1708              		.loc 1 1543 0
 1709 065a 9A68     		ldr	r2, [r3, #8]
 1710 065c 42F48062 		orr	r2, r2, #1024
 1711 0660 9A60     		str	r2, [r3, #8]
 1712              	.LVL153:
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1713              		.loc 1 1544 0
 1714 0662 0120     		movs	r0, #1
 1715              	.LVL154:
 1716 0664 19E0     		b	.L136
 1717              	.LVL155:
 1718              	.L135:
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1719              		.loc 1 1549 0
 1720 0666 0F4B     		ldr	r3, .L141
 1721 0668 9A68     		ldr	r2, [r3, #8]
 1722 066a 22F48062 		bic	r2, r2, #1024
 1723 066e 9A60     		str	r2, [r3, #8]
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1724              		.loc 1 1553 0
 1725 0670 1946     		mov	r1, r3
 1726              	.LVL156:
 1727              	.L138:
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1728              		.loc 1 1553 0 is_stmt 0 discriminator 1
 1729 0672 CB68     		ldr	r3, [r1, #12]
 1730 0674 03F00402 		and	r2, r3, #4
 1731              	.LVL157:
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1732              		.loc 1 1554 0 is_stmt 1 discriminator 1
 1733 0678 019B     		ldr	r3, [sp, #4]
 1734 067a 0133     		adds	r3, r3, #1
 1735 067c 0193     		str	r3, [sp, #4]
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1736              		.loc 1 1555 0 discriminator 1
 1737 067e 019B     		ldr	r3, [sp, #4]
 1738 0680 B3F5803F 		cmp	r3, #65536
 1739 0684 01D0     		beq	.L137
 1740 0686 002A     		cmp	r2, #0
 1741 0688 F3D0     		beq	.L138
 1742              	.L137:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1743              		.loc 1 1557 0
 1744 068a 064B     		ldr	r3, .L141
 1745 068c DB68     		ldr	r3, [r3, #12]
 1746 068e 13F0040F 		tst	r3, #4
 1747 0692 01D1     		bne	.L139
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1748              		.loc 1 1559 0
 1749 0694 0020     		movs	r0, #0
 1750              	.LVL158:
 1751 0696 00E0     		b	.L136
 1752              	.LVL159:
 1753              	.L139:
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1754              		.loc 1 1563 0
 1755 0698 0120     		movs	r0, #1
 1756              	.LVL160:
 1757              	.L136:
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1758              		.loc 1 1568 0
 1759 069a FF22     		movs	r2, #255
 1760 069c 014B     		ldr	r3, .L141
 1761 069e 5A62     		str	r2, [r3, #36]
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1762              		.loc 1 1571 0
 1763 06a0 02B0     		add	sp, sp, #8
 1764              		@ sp needed
 1765 06a2 7047     		bx	lr
 1766              	.L142:
 1767              		.align	2
 1768              	.L141:
 1769 06a4 00280040 		.word	1073752064
 1770              		.cfi_endproc
 1771              	.LFE135:
 1773              		.align	2
 1774              		.global	RTC_DayLightSavingConfig
 1775              		.thumb
 1776              		.thumb_func
 1778              	RTC_DayLightSavingConfig:
 1779              	.LFB136:
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1780              		.loc 1 1605 0
 1781              		.cfi_startproc
 1782              		@ args = 0, pretend = 0, frame = 0
 1783              		@ frame_needed = 0, uses_anonymous_args = 0
 1784              		@ link register save eliminated.
 1785              	.LVL161:
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1786              		.loc 1 1611 0
 1787 06a8 074B     		ldr	r3, .L144
 1788 06aa CA22     		movs	r2, #202
 1789 06ac 5A62     		str	r2, [r3, #36]
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1790              		.loc 1 1612 0
 1791 06ae 5322     		movs	r2, #83
 1792 06b0 5A62     		str	r2, [r3, #36]
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1793              		.loc 1 1615 0
 1794 06b2 9A68     		ldr	r2, [r3, #8]
 1795 06b4 22F48022 		bic	r2, r2, #262144
 1796 06b8 9A60     		str	r2, [r3, #8]
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1797              		.loc 1 1618 0
 1798 06ba 9A68     		ldr	r2, [r3, #8]
 1799 06bc 0143     		orrs	r1, r1, r0
 1800              	.LVL162:
 1801 06be 0A43     		orrs	r2, r2, r1
 1802 06c0 9A60     		str	r2, [r3, #8]
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1803              		.loc 1 1621 0
 1804 06c2 FF22     		movs	r2, #255
 1805 06c4 5A62     		str	r2, [r3, #36]
 1806 06c6 7047     		bx	lr
 1807              	.L145:
 1808              		.align	2
 1809              	.L144:
 1810 06c8 00280040 		.word	1073752064
 1811              		.cfi_endproc
 1812              	.LFE136:
 1814              		.align	2
 1815              		.global	RTC_GetStoreOperation
 1816              		.thumb
 1817              		.thumb_func
 1819              	RTC_GetStoreOperation:
 1820              	.LFB137:
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1821              		.loc 1 1632 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1826              		.loc 1 1633 0
 1827 06cc 024B     		ldr	r3, .L147
 1828 06ce 9868     		ldr	r0, [r3, #8]
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1829              		.loc 1 1634 0
 1830 06d0 00F48020 		and	r0, r0, #262144
 1831 06d4 7047     		bx	lr
 1832              	.L148:
 1833 06d6 00BF     		.align	2
 1834              	.L147:
 1835 06d8 00280040 		.word	1073752064
 1836              		.cfi_endproc
 1837              	.LFE137:
 1839              		.align	2
 1840              		.global	RTC_OutputConfig
 1841              		.thumb
 1842              		.thumb_func
 1844              	RTC_OutputConfig:
 1845              	.LFB138:
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1846              		.loc 1 1671 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              		@ link register save eliminated.
 1851              	.LVL163:
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1852              		.loc 1 1677 0
 1853 06dc 074B     		ldr	r3, .L150
 1854 06de CA22     		movs	r2, #202
 1855 06e0 5A62     		str	r2, [r3, #36]
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1856              		.loc 1 1678 0
 1857 06e2 5322     		movs	r2, #83
 1858 06e4 5A62     		str	r2, [r3, #36]
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1859              		.loc 1 1681 0
 1860 06e6 9A68     		ldr	r2, [r3, #8]
 1861 06e8 22F4E002 		bic	r2, r2, #7340032
 1862 06ec 9A60     		str	r2, [r3, #8]
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1863              		.loc 1 1684 0
 1864 06ee 9A68     		ldr	r2, [r3, #8]
 1865 06f0 0143     		orrs	r1, r1, r0
 1866              	.LVL164:
 1867 06f2 0A43     		orrs	r2, r2, r1
 1868 06f4 9A60     		str	r2, [r3, #8]
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1869              		.loc 1 1687 0
 1870 06f6 FF22     		movs	r2, #255
 1871 06f8 5A62     		str	r2, [r3, #36]
 1872 06fa 7047     		bx	lr
 1873              	.L151:
 1874              		.align	2
 1875              	.L150:
 1876 06fc 00280040 		.word	1073752064
 1877              		.cfi_endproc
 1878              	.LFE138:
 1880              		.align	2
 1881              		.global	RTC_CoarseCalibConfig
 1882              		.thumb
 1883              		.thumb_func
 1885              	RTC_CoarseCalibConfig:
 1886              	.LFB139:
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1887              		.loc 1 1725 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              	.LVL165:
 1892 0700 38B5     		push	{r3, r4, r5, lr}
 1893              		.cfi_def_cfa_offset 16
 1894              		.cfi_offset 3, -16
 1895              		.cfi_offset 4, -12
 1896              		.cfi_offset 5, -8
 1897              		.cfi_offset 14, -4
 1898 0702 0546     		mov	r5, r0
 1899 0704 0C46     		mov	r4, r1
 1900              	.LVL166:
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1901              		.loc 1 1733 0
 1902 0706 0A4B     		ldr	r3, .L155
 1903 0708 CA22     		movs	r2, #202
 1904 070a 5A62     		str	r2, [r3, #36]
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1905              		.loc 1 1734 0
 1906 070c 5322     		movs	r2, #83
 1907 070e 5A62     		str	r2, [r3, #36]
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1908              		.loc 1 1737 0
 1909 0710 FFF7FEFF 		bl	RTC_EnterInitMode
 1910              	.LVL167:
 1911 0714 30B1     		cbz	r0, .L154
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 1912              		.loc 1 1744 0
 1913 0716 2C43     		orrs	r4, r4, r5
 1914              	.LVL168:
 1915 0718 054B     		ldr	r3, .L155
 1916 071a 9C61     		str	r4, [r3, #24]
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1917              		.loc 1 1746 0
 1918 071c FFF7FEFF 		bl	RTC_ExitInitMode
 1919              	.LVL169:
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1920              		.loc 1 1748 0
 1921 0720 0120     		movs	r0, #1
 1922 0722 00E0     		b	.L153
 1923              	.LVL170:
 1924              	.L154:
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1925              		.loc 1 1739 0
 1926 0724 0020     		movs	r0, #0
 1927              	.LVL171:
 1928              	.L153:
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1929              		.loc 1 1752 0
 1930 0726 FF22     		movs	r2, #255
 1931 0728 014B     		ldr	r3, .L155
 1932 072a 5A62     		str	r2, [r3, #36]
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1933              		.loc 1 1755 0
 1934 072c 38BD     		pop	{r3, r4, r5, pc}
 1935              	.LVL172:
 1936              	.L156:
 1937 072e 00BF     		.align	2
 1938              	.L155:
 1939 0730 00280040 		.word	1073752064
 1940              		.cfi_endproc
 1941              	.LFE139:
 1943              		.align	2
 1944              		.global	RTC_CoarseCalibCmd
 1945              		.thumb
 1946              		.thumb_func
 1948              	RTC_CoarseCalibCmd:
 1949              	.LFB140:
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1950              		.loc 1 1766 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 1954              	.LVL173:
 1955 0734 10B5     		push	{r4, lr}
 1956              		.cfi_def_cfa_offset 8
 1957              		.cfi_offset 4, -8
 1958              		.cfi_offset 14, -4
 1959 0736 0446     		mov	r4, r0
 1960              	.LVL174:
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1961              		.loc 1 1773 0
 1962 0738 0E4B     		ldr	r3, .L162
 1963 073a CA22     		movs	r2, #202
 1964 073c 5A62     		str	r2, [r3, #36]
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1965              		.loc 1 1774 0
 1966 073e 5322     		movs	r2, #83
 1967 0740 5A62     		str	r2, [r3, #36]
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1968              		.loc 1 1777 0
 1969 0742 FFF7FEFF 		bl	RTC_EnterInitMode
 1970              	.LVL175:
 1971 0746 78B1     		cbz	r0, .L161
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 1972              		.loc 1 1783 0
 1973 0748 2CB1     		cbz	r4, .L159
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 1974              		.loc 1 1786 0
 1975 074a 0A4B     		ldr	r3, .L162
 1976 074c 9A68     		ldr	r2, [r3, #8]
 1977 074e 42F08002 		orr	r2, r2, #128
 1978 0752 9A60     		str	r2, [r3, #8]
 1979 0754 04E0     		b	.L160
 1980              	.L159:
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 1981              		.loc 1 1791 0
 1982 0756 074B     		ldr	r3, .L162
 1983 0758 9A68     		ldr	r2, [r3, #8]
 1984 075a 22F08002 		bic	r2, r2, #128
 1985 075e 9A60     		str	r2, [r3, #8]
 1986              	.L160:
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1987              		.loc 1 1794 0
 1988 0760 FFF7FEFF 		bl	RTC_ExitInitMode
 1989              	.LVL176:
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1990              		.loc 1 1796 0
 1991 0764 0120     		movs	r0, #1
 1992 0766 00E0     		b	.L158
 1993              	.LVL177:
 1994              	.L161:
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 1995              		.loc 1 1779 0
 1996 0768 0020     		movs	r0, #0
 1997              	.LVL178:
 1998              	.L158:
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1999              		.loc 1 1800 0
 2000 076a FF22     		movs	r2, #255
 2001 076c 014B     		ldr	r3, .L162
 2002 076e 5A62     		str	r2, [r3, #36]
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2003              		.loc 1 1803 0
 2004 0770 10BD     		pop	{r4, pc}
 2005              	.L163:
 2006 0772 00BF     		.align	2
 2007              	.L162:
 2008 0774 00280040 		.word	1073752064
 2009              		.cfi_endproc
 2010              	.LFE140:
 2012              		.align	2
 2013              		.global	RTC_CalibOutputCmd
 2014              		.thumb
 2015              		.thumb_func
 2017              	RTC_CalibOutputCmd:
 2018              	.LFB141:
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2019              		.loc 1 1812 0
 2020              		.cfi_startproc
 2021              		@ args = 0, pretend = 0, frame = 0
 2022              		@ frame_needed = 0, uses_anonymous_args = 0
 2023              		@ link register save eliminated.
 2024              	.LVL179:
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2025              		.loc 1 1817 0
 2026 0778 094B     		ldr	r3, .L167
 2027 077a CA22     		movs	r2, #202
 2028 077c 5A62     		str	r2, [r3, #36]
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2029              		.loc 1 1818 0
 2030 077e 5322     		movs	r2, #83
 2031 0780 5A62     		str	r2, [r3, #36]
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2032              		.loc 1 1820 0
 2033 0782 20B1     		cbz	r0, .L165
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2034              		.loc 1 1823 0
 2035 0784 9A68     		ldr	r2, [r3, #8]
 2036 0786 42F40002 		orr	r2, r2, #8388608
 2037 078a 9A60     		str	r2, [r3, #8]
 2038 078c 04E0     		b	.L166
 2039              	.L165:
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2040              		.loc 1 1828 0
 2041 078e 044B     		ldr	r3, .L167
 2042 0790 9A68     		ldr	r2, [r3, #8]
 2043 0792 22F40002 		bic	r2, r2, #8388608
 2044 0796 9A60     		str	r2, [r3, #8]
 2045              	.L166:
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2046              		.loc 1 1832 0
 2047 0798 FF22     		movs	r2, #255
 2048 079a 014B     		ldr	r3, .L167
 2049 079c 5A62     		str	r2, [r3, #36]
 2050 079e 7047     		bx	lr
 2051              	.L168:
 2052              		.align	2
 2053              	.L167:
 2054 07a0 00280040 		.word	1073752064
 2055              		.cfi_endproc
 2056              	.LFE141:
 2058              		.align	2
 2059              		.global	RTC_CalibOutputConfig
 2060              		.thumb
 2061              		.thumb_func
 2063              	RTC_CalibOutputConfig:
 2064              	.LFB142:
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2065              		.loc 1 1844 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069              		@ link register save eliminated.
 2070              	.LVL180:
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2071              		.loc 1 1849 0
 2072 07a4 074B     		ldr	r3, .L170
 2073 07a6 CA22     		movs	r2, #202
 2074 07a8 5A62     		str	r2, [r3, #36]
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2075              		.loc 1 1850 0
 2076 07aa 5322     		movs	r2, #83
 2077 07ac 5A62     		str	r2, [r3, #36]
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2078              		.loc 1 1853 0
 2079 07ae 9A68     		ldr	r2, [r3, #8]
 2080 07b0 22F40022 		bic	r2, r2, #524288
 2081 07b4 9A60     		str	r2, [r3, #8]
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2082              		.loc 1 1856 0
 2083 07b6 9A68     		ldr	r2, [r3, #8]
 2084 07b8 1043     		orrs	r0, r0, r2
 2085              	.LVL181:
 2086 07ba 9860     		str	r0, [r3, #8]
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2087              		.loc 1 1859 0
 2088 07bc FF22     		movs	r2, #255
 2089 07be 5A62     		str	r2, [r3, #36]
 2090 07c0 7047     		bx	lr
 2091              	.L171:
 2092 07c2 00BF     		.align	2
 2093              	.L170:
 2094 07c4 00280040 		.word	1073752064
 2095              		.cfi_endproc
 2096              	.LFE142:
 2098              		.align	2
 2099              		.global	RTC_SmoothCalibConfig
 2100              		.thumb
 2101              		.thumb_func
 2103              	RTC_SmoothCalibConfig:
 2104              	.LFB143:
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2105              		.loc 1 1882 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109              		@ link register save eliminated.
 2110              	.LVL182:
 2111 07c8 30B4     		push	{r4, r5}
 2112              		.cfi_def_cfa_offset 8
 2113              		.cfi_offset 4, -8
 2114              		.cfi_offset 5, -4
 2115              	.LVL183:
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2116              		.loc 1 1892 0
 2117 07ca 134B     		ldr	r3, .L179
 2118 07cc CA24     		movs	r4, #202
 2119 07ce 5C62     		str	r4, [r3, #36]
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2120              		.loc 1 1893 0
 2121 07d0 5324     		movs	r4, #83
 2122 07d2 5C62     		str	r4, [r3, #36]
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2123              		.loc 1 1896 0
 2124 07d4 DB68     		ldr	r3, [r3, #12]
 2125 07d6 13F4803F 		tst	r3, #65536
 2126 07da 02D1     		bne	.L177
 2127 07dc 0AE0     		b	.L174
 2128              	.LVL184:
 2129              	.L175:
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2130              		.loc 1 1901 0
 2131 07de 0133     		adds	r3, r3, #1
 2132              	.LVL185:
 2133 07e0 01E0     		b	.L173
 2134              	.LVL186:
 2135              	.L177:
 2136 07e2 0023     		movs	r3, #0
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2137              		.loc 1 1899 0
 2138 07e4 0C4D     		ldr	r5, .L179
 2139              	.LVL187:
 2140              	.L173:
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2141              		.loc 1 1899 0 is_stmt 0 discriminator 1
 2142 07e6 EC68     		ldr	r4, [r5, #12]
 2143 07e8 14F4803F 		tst	r4, #65536
 2144 07ec 02D0     		beq	.L174
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2145              		.loc 1 1899 0 discriminator 2
 2146 07ee B3F5003F 		cmp	r3, #131072
 2147 07f2 F4D1     		bne	.L175
 2148              	.LVL188:
 2149              	.L174:
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2150              		.loc 1 1906 0 is_stmt 1
 2151 07f4 084B     		ldr	r3, .L179
 2152 07f6 DB68     		ldr	r3, [r3, #12]
 2153 07f8 13F4803F 		tst	r3, #65536
 2154 07fc 05D1     		bne	.L178
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2155              		.loc 1 1909 0
 2156 07fe 0843     		orrs	r0, r0, r1
 2157              	.LVL189:
 2158 0800 0243     		orrs	r2, r2, r0
 2159              	.LVL190:
 2160 0802 054B     		ldr	r3, .L179
 2161 0804 DA63     		str	r2, [r3, #60]
 2162              	.LVL191:
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2163              		.loc 1 1911 0
 2164 0806 0120     		movs	r0, #1
 2165 0808 00E0     		b	.L176
 2166              	.LVL192:
 2167              	.L178:
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2168              		.loc 1 1915 0
 2169 080a 0020     		movs	r0, #0
 2170              	.LVL193:
 2171              	.L176:
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2172              		.loc 1 1919 0
 2173 080c FF22     		movs	r2, #255
 2174 080e 024B     		ldr	r3, .L179
 2175 0810 5A62     		str	r2, [r3, #36]
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2176              		.loc 1 1922 0
 2177 0812 30BC     		pop	{r4, r5}
 2178 0814 7047     		bx	lr
 2179              	.L180:
 2180 0816 00BF     		.align	2
 2181              	.L179:
 2182 0818 00280040 		.word	1073752064
 2183              		.cfi_endproc
 2184              	.LFE143:
 2186              		.align	2
 2187              		.global	RTC_TimeStampCmd
 2188              		.thumb
 2189              		.thumb_func
 2191              	RTC_TimeStampCmd:
 2192              	.LFB144:
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2193              		.loc 1 1956 0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              		@ link register save eliminated.
 2198              	.LVL194:
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2199              		.loc 1 1964 0
 2200 081c 0A4B     		ldr	r3, .L184
 2201 081e 9B68     		ldr	r3, [r3, #8]
 2202 0820 23F40063 		bic	r3, r3, #2048
 2203 0824 23F00803 		bic	r3, r3, #8
 2204              	.LVL195:
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2205              		.loc 1 1967 0
 2206 0828 19B1     		cbz	r1, .L182
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2207              		.loc 1 1969 0
 2208 082a 1843     		orrs	r0, r0, r3
 2209              	.LVL196:
 2210 082c 40F40060 		orr	r0, r0, #2048
 2211              	.LVL197:
 2212 0830 00E0     		b	.L183
 2213              	.LVL198:
 2214              	.L182:
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2215              		.loc 1 1973 0
 2216 0832 1843     		orrs	r0, r0, r3
 2217              	.LVL199:
 2218              	.L183:
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2219              		.loc 1 1977 0
 2220 0834 044B     		ldr	r3, .L184
 2221 0836 CA22     		movs	r2, #202
 2222 0838 5A62     		str	r2, [r3, #36]
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2223              		.loc 1 1978 0
 2224 083a 5322     		movs	r2, #83
 2225 083c 5A62     		str	r2, [r3, #36]
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2226              		.loc 1 1981 0
 2227 083e 9860     		str	r0, [r3, #8]
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2228              		.loc 1 1984 0
 2229 0840 FF22     		movs	r2, #255
 2230 0842 5A62     		str	r2, [r3, #36]
 2231 0844 7047     		bx	lr
 2232              	.L185:
 2233 0846 00BF     		.align	2
 2234              	.L184:
 2235 0848 00280040 		.word	1073752064
 2236              		.cfi_endproc
 2237              	.LFE144:
 2239              		.align	2
 2240              		.global	RTC_GetTimeStamp
 2241              		.thumb
 2242              		.thumb_func
 2244              	RTC_GetTimeStamp:
 2245              	.LFB145:
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2246              		.loc 1 2001 0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 0
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
 2250              	.LVL200:
 2251 084c 38B5     		push	{r3, r4, r5, lr}
 2252              		.cfi_def_cfa_offset 16
 2253              		.cfi_offset 3, -16
 2254              		.cfi_offset 4, -12
 2255              		.cfi_offset 5, -8
 2256              		.cfi_offset 14, -4
 2257 084e 0D46     		mov	r5, r1
 2258 0850 1446     		mov	r4, r2
 2259              	.LVL201:
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2260              		.loc 1 2008 0
 2261 0852 1A4A     		ldr	r2, .L188
 2262              	.LVL202:
 2263 0854 136B     		ldr	r3, [r2, #48]
 2264              	.LVL203:
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2265              		.loc 1 2009 0
 2266 0856 526B     		ldr	r2, [r2, #52]
 2267              	.LVL204:
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2268              		.loc 1 2012 0
 2269 0858 C3F30541 		ubfx	r1, r3, #16, #6
 2270              	.LVL205:
 2271 085c 2970     		strb	r1, [r5]
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2272              		.loc 1 2013 0
 2273 085e C3F30621 		ubfx	r1, r3, #8, #7
 2274 0862 6970     		strb	r1, [r5, #1]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2275              		.loc 1 2014 0
 2276 0864 03F07F01 		and	r1, r3, #127
 2277 0868 A970     		strb	r1, [r5, #2]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2278              		.loc 1 2015 0
 2279 086a 03F48003 		and	r3, r3, #4194304
 2280              	.LVL206:
 2281 086e 1B0C     		lsrs	r3, r3, #16
 2282 0870 EB70     		strb	r3, [r5, #3]
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2283              		.loc 1 2018 0
 2284 0872 0023     		movs	r3, #0
 2285 0874 E370     		strb	r3, [r4, #3]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2286              		.loc 1 2019 0
 2287 0876 C2F30423 		ubfx	r3, r2, #8, #5
 2288 087a 6370     		strb	r3, [r4, #1]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2289              		.loc 1 2020 0
 2290 087c 02F03F03 		and	r3, r2, #63
 2291 0880 A370     		strb	r3, [r4, #2]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2292              		.loc 1 2021 0
 2293 0882 C2F34232 		ubfx	r2, r2, #13, #3
 2294              	.LVL207:
 2295 0886 2270     		strb	r2, [r4]
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2296              		.loc 1 2024 0
 2297 0888 B8B9     		cbnz	r0, .L186
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2298              		.loc 1 2027 0
 2299 088a 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2300              	.LVL208:
 2301 088c FFF7C4FB 		bl	RTC_Bcd2ToByte
 2302              	.LVL209:
 2303 0890 2870     		strb	r0, [r5]
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2304              		.loc 1 2028 0
 2305 0892 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2306 0894 FFF7C0FB 		bl	RTC_Bcd2ToByte
 2307              	.LVL210:
 2308 0898 6870     		strb	r0, [r5, #1]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2309              		.loc 1 2029 0
 2310 089a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2311 089c FFF7BCFB 		bl	RTC_Bcd2ToByte
 2312              	.LVL211:
 2313 08a0 A870     		strb	r0, [r5, #2]
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2314              		.loc 1 2032 0
 2315 08a2 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2316 08a4 FFF7B8FB 		bl	RTC_Bcd2ToByte
 2317              	.LVL212:
 2318 08a8 6070     		strb	r0, [r4, #1]
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2319              		.loc 1 2033 0
 2320 08aa A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2321 08ac FFF7B4FB 		bl	RTC_Bcd2ToByte
 2322              	.LVL213:
 2323 08b0 A070     		strb	r0, [r4, #2]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2324              		.loc 1 2034 0
 2325 08b2 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2326 08b4 FFF7B0FB 		bl	RTC_Bcd2ToByte
 2327              	.LVL214:
 2328 08b8 2070     		strb	r0, [r4]
 2329              	.L186:
 2330 08ba 38BD     		pop	{r3, r4, r5, pc}
 2331              	.LVL215:
 2332              	.L189:
 2333              		.align	2
 2334              	.L188:
 2335 08bc 00280040 		.word	1073752064
 2336              		.cfi_endproc
 2337              	.LFE145:
 2339              		.align	2
 2340              		.global	RTC_GetTimeStampSubSecond
 2341              		.thumb
 2342              		.thumb_func
 2344              	RTC_GetTimeStampSubSecond:
 2345              	.LFB146:
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2346              		.loc 1 2044 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 0
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 2350              		@ link register save eliminated.
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2351              		.loc 1 2046 0
 2352 08c0 014B     		ldr	r3, .L191
 2353 08c2 986B     		ldr	r0, [r3, #56]
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2354              		.loc 1 2047 0
 2355 08c4 7047     		bx	lr
 2356              	.L192:
 2357 08c6 00BF     		.align	2
 2358              	.L191:
 2359 08c8 00280040 		.word	1073752064
 2360              		.cfi_endproc
 2361              	.LFE146:
 2363              		.align	2
 2364              		.global	RTC_TamperTriggerConfig
 2365              		.thumb
 2366              		.thumb_func
 2368              	RTC_TamperTriggerConfig:
 2369              	.LFB147:
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2370              		.loc 1 2079 0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 2375              	.LVL216:
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2376              		.loc 1 2084 0
 2377 08cc 29B9     		cbnz	r1, .L194
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2378              		.loc 1 2087 0
 2379 08ce 064B     		ldr	r3, .L196
 2380 08d0 1A6C     		ldr	r2, [r3, #64]
 2381 08d2 22EA4000 		bic	r0, r2, r0, lsl #1
 2382              	.LVL217:
 2383 08d6 1864     		str	r0, [r3, #64]
 2384 08d8 7047     		bx	lr
 2385              	.LVL218:
 2386              	.L194:
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2387              		.loc 1 2092 0
 2388 08da 034B     		ldr	r3, .L196
 2389 08dc 1A6C     		ldr	r2, [r3, #64]
 2390 08de 42EA4000 		orr	r0, r2, r0, lsl #1
 2391              	.LVL219:
 2392 08e2 1864     		str	r0, [r3, #64]
 2393 08e4 7047     		bx	lr
 2394              	.L197:
 2395 08e6 00BF     		.align	2
 2396              	.L196:
 2397 08e8 00280040 		.word	1073752064
 2398              		.cfi_endproc
 2399              	.LFE147:
 2401              		.align	2
 2402              		.global	RTC_TamperCmd
 2403              		.thumb
 2404              		.thumb_func
 2406              	RTC_TamperCmd:
 2407              	.LFB148:
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2408              		.loc 1 2105 0
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 0
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
 2412              		@ link register save eliminated.
 2413              	.LVL220:
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2414              		.loc 1 2110 0
 2415 08ec 21B1     		cbz	r1, .L199
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2416              		.loc 1 2113 0
 2417 08ee 054B     		ldr	r3, .L201
 2418 08f0 1A6C     		ldr	r2, [r3, #64]
 2419 08f2 1043     		orrs	r0, r0, r2
 2420              	.LVL221:
 2421 08f4 1864     		str	r0, [r3, #64]
 2422 08f6 7047     		bx	lr
 2423              	.LVL222:
 2424              	.L199:
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2425              		.loc 1 2118 0
 2426 08f8 024B     		ldr	r3, .L201
 2427 08fa 1A6C     		ldr	r2, [r3, #64]
 2428 08fc 22EA0000 		bic	r0, r2, r0
 2429              	.LVL223:
 2430 0900 1864     		str	r0, [r3, #64]
 2431 0902 7047     		bx	lr
 2432              	.L202:
 2433              		.align	2
 2434              	.L201:
 2435 0904 00280040 		.word	1073752064
 2436              		.cfi_endproc
 2437              	.LFE148:
 2439              		.align	2
 2440              		.global	RTC_TamperFilterConfig
 2441              		.thumb
 2442              		.thumb_func
 2444              	RTC_TamperFilterConfig:
 2445              	.LFB149:
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2446              		.loc 1 2136 0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450              		@ link register save eliminated.
 2451              	.LVL224:
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2452              		.loc 1 2141 0
 2453 0908 044B     		ldr	r3, .L204
 2454 090a 1A6C     		ldr	r2, [r3, #64]
 2455 090c 22F4C052 		bic	r2, r2, #6144
 2456 0910 1A64     		str	r2, [r3, #64]
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 2457              		.loc 1 2144 0
 2458 0912 1A6C     		ldr	r2, [r3, #64]
 2459 0914 1043     		orrs	r0, r0, r2
 2460              	.LVL225:
 2461 0916 1864     		str	r0, [r3, #64]
 2462 0918 7047     		bx	lr
 2463              	.L205:
 2464 091a 00BF     		.align	2
 2465              	.L204:
 2466 091c 00280040 		.word	1073752064
 2467              		.cfi_endproc
 2468              	.LFE149:
 2470              		.align	2
 2471              		.global	RTC_TamperSamplingFreqConfig
 2472              		.thumb
 2473              		.thumb_func
 2475              	RTC_TamperSamplingFreqConfig:
 2476              	.LFB150:
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2477              		.loc 1 2170 0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 2481              		@ link register save eliminated.
 2482              	.LVL226:
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2483              		.loc 1 2175 0
 2484 0920 044B     		ldr	r3, .L207
 2485 0922 1A6C     		ldr	r2, [r3, #64]
 2486 0924 22F4E062 		bic	r2, r2, #1792
 2487 0928 1A64     		str	r2, [r3, #64]
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 2488              		.loc 1 2178 0
 2489 092a 1A6C     		ldr	r2, [r3, #64]
 2490 092c 1043     		orrs	r0, r0, r2
 2491              	.LVL227:
 2492 092e 1864     		str	r0, [r3, #64]
 2493 0930 7047     		bx	lr
 2494              	.L208:
 2495 0932 00BF     		.align	2
 2496              	.L207:
 2497 0934 00280040 		.word	1073752064
 2498              		.cfi_endproc
 2499              	.LFE150:
 2501              		.align	2
 2502              		.global	RTC_TamperPinsPrechargeDuration
 2503              		.thumb
 2504              		.thumb_func
 2506              	RTC_TamperPinsPrechargeDuration:
 2507              	.LFB151:
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2508              		.loc 1 2193 0
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 0
 2511              		@ frame_needed = 0, uses_anonymous_args = 0
 2512              		@ link register save eliminated.
 2513              	.LVL228:
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2514              		.loc 1 2198 0
 2515 0938 044B     		ldr	r3, .L210
 2516 093a 1A6C     		ldr	r2, [r3, #64]
 2517 093c 22F4C042 		bic	r2, r2, #24576
 2518 0940 1A64     		str	r2, [r3, #64]
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 2519              		.loc 1 2201 0
 2520 0942 1A6C     		ldr	r2, [r3, #64]
 2521 0944 1043     		orrs	r0, r0, r2
 2522              	.LVL229:
 2523 0946 1864     		str	r0, [r3, #64]
 2524 0948 7047     		bx	lr
 2525              	.L211:
 2526 094a 00BF     		.align	2
 2527              	.L210:
 2528 094c 00280040 		.word	1073752064
 2529              		.cfi_endproc
 2530              	.LFE151:
 2532              		.align	2
 2533              		.global	RTC_TimeStampOnTamperDetectionCmd
 2534              		.thumb
 2535              		.thumb_func
 2537              	RTC_TimeStampOnTamperDetectionCmd:
 2538              	.LFB152:
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2539              		.loc 1 2213 0
 2540              		.cfi_startproc
 2541              		@ args = 0, pretend = 0, frame = 0
 2542              		@ frame_needed = 0, uses_anonymous_args = 0
 2543              		@ link register save eliminated.
 2544              	.LVL230:
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2545              		.loc 1 2217 0
 2546 0950 28B1     		cbz	r0, .L213
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2547              		.loc 1 2220 0
 2548 0952 064B     		ldr	r3, .L215
 2549 0954 1A6C     		ldr	r2, [r3, #64]
 2550 0956 42F08002 		orr	r2, r2, #128
 2551 095a 1A64     		str	r2, [r3, #64]
 2552 095c 7047     		bx	lr
 2553              	.L213:
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 2554              		.loc 1 2225 0
 2555 095e 034B     		ldr	r3, .L215
 2556 0960 1A6C     		ldr	r2, [r3, #64]
 2557 0962 22F08002 		bic	r2, r2, #128
 2558 0966 1A64     		str	r2, [r3, #64]
 2559 0968 7047     		bx	lr
 2560              	.L216:
 2561 096a 00BF     		.align	2
 2562              	.L215:
 2563 096c 00280040 		.word	1073752064
 2564              		.cfi_endproc
 2565              	.LFE152:
 2567              		.align	2
 2568              		.global	RTC_TamperPullUpCmd
 2569              		.thumb
 2570              		.thumb_func
 2572              	RTC_TamperPullUpCmd:
 2573              	.LFB153:
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2574              		.loc 1 2236 0
 2575              		.cfi_startproc
 2576              		@ args = 0, pretend = 0, frame = 0
 2577              		@ frame_needed = 0, uses_anonymous_args = 0
 2578              		@ link register save eliminated.
 2579              	.LVL231:
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 2580              		.loc 1 2240 0
 2581 0970 28B1     		cbz	r0, .L218
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2582              		.loc 1 2243 0
 2583 0972 064B     		ldr	r3, .L220
 2584 0974 1A6C     		ldr	r2, [r3, #64]
 2585 0976 22F40042 		bic	r2, r2, #32768
 2586 097a 1A64     		str	r2, [r3, #64]
 2587 097c 7047     		bx	lr
 2588              	.L218:
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 2589              		.loc 1 2248 0
 2590 097e 034B     		ldr	r3, .L220
 2591 0980 1A6C     		ldr	r2, [r3, #64]
 2592 0982 42F40042 		orr	r2, r2, #32768
 2593 0986 1A64     		str	r2, [r3, #64]
 2594 0988 7047     		bx	lr
 2595              	.L221:
 2596 098a 00BF     		.align	2
 2597              	.L220:
 2598 098c 00280040 		.word	1073752064
 2599              		.cfi_endproc
 2600              	.LFE153:
 2602              		.align	2
 2603              		.global	RTC_WriteBackupRegister
 2604              		.thumb
 2605              		.thumb_func
 2607              	RTC_WriteBackupRegister:
 2608              	.LFB154:
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2609              		.loc 1 2277 0
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 8
 2612              		@ frame_needed = 0, uses_anonymous_args = 0
 2613              		@ link register save eliminated.
 2614              	.LVL232:
 2615 0990 82B0     		sub	sp, sp, #8
 2616              		.cfi_def_cfa_offset 8
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2617              		.loc 1 2278 0
 2618 0992 0023     		movs	r3, #0
 2619 0994 0193     		str	r3, [sp, #4]
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2620              		.loc 1 2283 0
 2621 0996 054B     		ldr	r3, .L223
 2622 0998 0193     		str	r3, [sp, #4]
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2623              		.loc 1 2284 0
 2624 099a 019B     		ldr	r3, [sp, #4]
 2625 099c 03EB8000 		add	r0, r3, r0, lsl #2
 2626              	.LVL233:
 2627 09a0 0190     		str	r0, [sp, #4]
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2628              		.loc 1 2287 0
 2629 09a2 019B     		ldr	r3, [sp, #4]
 2630 09a4 1960     		str	r1, [r3]
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2631              		.loc 1 2288 0
 2632 09a6 02B0     		add	sp, sp, #8
 2633              		@ sp needed
 2634 09a8 7047     		bx	lr
 2635              	.L224:
 2636 09aa 00BF     		.align	2
 2637              	.L223:
 2638 09ac 50280040 		.word	1073752144
 2639              		.cfi_endproc
 2640              	.LFE154:
 2642              		.align	2
 2643              		.global	RTC_ReadBackupRegister
 2644              		.thumb
 2645              		.thumb_func
 2647              	RTC_ReadBackupRegister:
 2648              	.LFB155:
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2649              		.loc 1 2298 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 8
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              		@ link register save eliminated.
 2654              	.LVL234:
 2655 09b0 82B0     		sub	sp, sp, #8
 2656              		.cfi_def_cfa_offset 8
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2657              		.loc 1 2299 0
 2658 09b2 0023     		movs	r3, #0
 2659 09b4 0193     		str	r3, [sp, #4]
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2660              		.loc 1 2304 0
 2661 09b6 054B     		ldr	r3, .L226
 2662 09b8 0193     		str	r3, [sp, #4]
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2663              		.loc 1 2305 0
 2664 09ba 019B     		ldr	r3, [sp, #4]
 2665 09bc 03EB8000 		add	r0, r3, r0, lsl #2
 2666              	.LVL235:
 2667 09c0 0190     		str	r0, [sp, #4]
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 2668              		.loc 1 2308 0
 2669 09c2 019B     		ldr	r3, [sp, #4]
 2670 09c4 1868     		ldr	r0, [r3]
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2671              		.loc 1 2309 0
 2672 09c6 02B0     		add	sp, sp, #8
 2673              		@ sp needed
 2674 09c8 7047     		bx	lr
 2675              	.L227:
 2676 09ca 00BF     		.align	2
 2677              	.L226:
 2678 09cc 50280040 		.word	1073752144
 2679              		.cfi_endproc
 2680              	.LFE155:
 2682              		.align	2
 2683              		.global	RTC_TamperPinSelection
 2684              		.thumb
 2685              		.thumb_func
 2687              	RTC_TamperPinSelection:
 2688              	.LFB156:
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2689              		.loc 1 2338 0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 2693              		@ link register save eliminated.
 2694              	.LVL236:
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 2695              		.loc 1 2342 0
 2696 09d0 044B     		ldr	r3, .L229
 2697 09d2 1A6C     		ldr	r2, [r3, #64]
 2698 09d4 22F48032 		bic	r2, r2, #65536
 2699 09d8 1A64     		str	r2, [r3, #64]
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2700              		.loc 1 2343 0
 2701 09da 1A6C     		ldr	r2, [r3, #64]
 2702 09dc 1043     		orrs	r0, r0, r2
 2703              	.LVL237:
 2704 09de 1864     		str	r0, [r3, #64]
 2705 09e0 7047     		bx	lr
 2706              	.L230:
 2707 09e2 00BF     		.align	2
 2708              	.L229:
 2709 09e4 00280040 		.word	1073752064
 2710              		.cfi_endproc
 2711              	.LFE156:
 2713              		.align	2
 2714              		.global	RTC_TimeStampPinSelection
 2715              		.thumb
 2716              		.thumb_func
 2718              	RTC_TimeStampPinSelection:
 2719              	.LFB157:
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2720              		.loc 1 2355 0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 0
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 2724              		@ link register save eliminated.
 2725              	.LVL238:
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 2726              		.loc 1 2359 0
 2727 09e8 044B     		ldr	r3, .L232
 2728 09ea 1A6C     		ldr	r2, [r3, #64]
 2729 09ec 22F40032 		bic	r2, r2, #131072
 2730 09f0 1A64     		str	r2, [r3, #64]
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2731              		.loc 1 2360 0
 2732 09f2 1A6C     		ldr	r2, [r3, #64]
 2733 09f4 1043     		orrs	r0, r0, r2
 2734              	.LVL239:
 2735 09f6 1864     		str	r0, [r3, #64]
 2736 09f8 7047     		bx	lr
 2737              	.L233:
 2738 09fa 00BF     		.align	2
 2739              	.L232:
 2740 09fc 00280040 		.word	1073752064
 2741              		.cfi_endproc
 2742              	.LFE157:
 2744              		.align	2
 2745              		.global	RTC_OutputTypeConfig
 2746              		.thumb
 2747              		.thumb_func
 2749              	RTC_OutputTypeConfig:
 2750              	.LFB158:
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2751              		.loc 1 2374 0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 0, uses_anonymous_args = 0
 2755              		@ link register save eliminated.
 2756              	.LVL240:
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2757              		.loc 1 2378 0
 2758 0a00 044B     		ldr	r3, .L235
 2759 0a02 1A6C     		ldr	r2, [r3, #64]
 2760 0a04 22F48022 		bic	r2, r2, #262144
 2761 0a08 1A64     		str	r2, [r3, #64]
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2762              		.loc 1 2379 0
 2763 0a0a 1A6C     		ldr	r2, [r3, #64]
 2764 0a0c 1043     		orrs	r0, r0, r2
 2765              	.LVL241:
 2766 0a0e 1864     		str	r0, [r3, #64]
 2767 0a10 7047     		bx	lr
 2768              	.L236:
 2769 0a12 00BF     		.align	2
 2770              	.L235:
 2771 0a14 00280040 		.word	1073752064
 2772              		.cfi_endproc
 2773              	.LFE158:
 2775              		.align	2
 2776              		.global	RTC_SynchroShiftConfig
 2777              		.thumb
 2778              		.thumb_func
 2780              	RTC_SynchroShiftConfig:
 2781              	.LFB159:
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2782              		.loc 1 2412 0
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 0
 2785              		@ frame_needed = 0, uses_anonymous_args = 0
 2786              	.LVL242:
 2787 0a18 10B5     		push	{r4, lr}
 2788              		.cfi_def_cfa_offset 8
 2789              		.cfi_offset 4, -8
 2790              		.cfi_offset 14, -4
 2791              	.LVL243:
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2792              		.loc 1 2421 0
 2793 0a1a 174B     		ldr	r3, .L246
 2794 0a1c CA22     		movs	r2, #202
 2795 0a1e 5A62     		str	r2, [r3, #36]
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2796              		.loc 1 2422 0
 2797 0a20 5322     		movs	r2, #83
 2798 0a22 5A62     		str	r2, [r3, #36]
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 2799              		.loc 1 2425 0
 2800 0a24 DB68     		ldr	r3, [r3, #12]
 2801 0a26 13F0080F 		tst	r3, #8
 2802 0a2a 02D1     		bne	.L242
 2803 0a2c 0AE0     		b	.L239
 2804              	.LVL244:
 2805              	.L240:
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 2806              		.loc 1 2430 0
 2807 0a2e 0133     		adds	r3, r3, #1
 2808              	.LVL245:
 2809 0a30 01E0     		b	.L238
 2810              	.LVL246:
 2811              	.L242:
 2812 0a32 0023     		movs	r3, #0
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2813              		.loc 1 2428 0
 2814 0a34 104C     		ldr	r4, .L246
 2815              	.LVL247:
 2816              	.L238:
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2817              		.loc 1 2428 0 is_stmt 0 discriminator 1
 2818 0a36 E268     		ldr	r2, [r4, #12]
 2819 0a38 12F0080F 		tst	r2, #8
 2820 0a3c 02D0     		beq	.L239
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2821              		.loc 1 2428 0 discriminator 2
 2822 0a3e B3F5805F 		cmp	r3, #4096
 2823 0a42 F4D1     		bne	.L240
 2824              	.LVL248:
 2825              	.L239:
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2826              		.loc 1 2435 0 is_stmt 1
 2827 0a44 0C4B     		ldr	r3, .L246
 2828 0a46 DB68     		ldr	r3, [r3, #12]
 2829 0a48 13F0080F 		tst	r3, #8
 2830 0a4c 0BD1     		bne	.L243
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2831              		.loc 1 2438 0
 2832 0a4e 0A4B     		ldr	r3, .L246
 2833 0a50 9B68     		ldr	r3, [r3, #8]
 2834 0a52 13F0100F 		tst	r3, #16
 2835 0a56 08D1     		bne	.L244
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 2836              		.loc 1 2441 0
 2837 0a58 0143     		orrs	r1, r1, r0
 2838              	.LVL249:
 2839 0a5a 074B     		ldr	r3, .L246
 2840 0a5c D962     		str	r1, [r3, #44]
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2841              		.loc 1 2443 0
 2842 0a5e FFF7FEFF 		bl	RTC_WaitForSynchro
 2843              	.LVL250:
 2844 0a62 20B9     		cbnz	r0, .L245
 2845 0a64 04E0     		b	.L241
 2846              	.LVL251:
 2847              	.L243:
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2848              		.loc 1 2459 0
 2849 0a66 0020     		movs	r0, #0
 2850              	.LVL252:
 2851 0a68 02E0     		b	.L241
 2852              	.LVL253:
 2853              	.L244:
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2854              		.loc 1 2454 0
 2855 0a6a 0020     		movs	r0, #0
 2856              	.LVL254:
 2857 0a6c 00E0     		b	.L241
 2858              	.LVL255:
 2859              	.L245:
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 2860              		.loc 1 2449 0
 2861 0a6e 0120     		movs	r0, #1
 2862              	.L241:
 2863              	.LVL256:
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2864              		.loc 1 2463 0
 2865 0a70 FF22     		movs	r2, #255
 2866 0a72 014B     		ldr	r3, .L246
 2867 0a74 5A62     		str	r2, [r3, #36]
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2868              		.loc 1 2466 0
 2869 0a76 10BD     		pop	{r4, pc}
 2870              	.L247:
 2871              		.align	2
 2872              	.L246:
 2873 0a78 00280040 		.word	1073752064
 2874              		.cfi_endproc
 2875              	.LFE159:
 2877              		.align	2
 2878              		.global	RTC_ITConfig
 2879              		.thumb
 2880              		.thumb_func
 2882              	RTC_ITConfig:
 2883              	.LFB160:
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2884              		.loc 1 2531 0
 2885              		.cfi_startproc
 2886              		@ args = 0, pretend = 0, frame = 0
 2887              		@ frame_needed = 0, uses_anonymous_args = 0
 2888              		@ link register save eliminated.
 2889              	.LVL257:
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2890              		.loc 1 2537 0
 2891 0a7c 104B     		ldr	r3, .L251
 2892 0a7e CA22     		movs	r2, #202
 2893 0a80 5A62     		str	r2, [r3, #36]
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2894              		.loc 1 2538 0
 2895 0a82 5322     		movs	r2, #83
 2896 0a84 5A62     		str	r2, [r3, #36]
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2897              		.loc 1 2540 0
 2898 0a86 51B1     		cbz	r1, .L249
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 2899              		.loc 1 2543 0
 2900 0a88 9968     		ldr	r1, [r3, #8]
 2901              	.LVL258:
 2902 0a8a 20F00402 		bic	r2, r0, #4
 2903 0a8e 0A43     		orrs	r2, r2, r1
 2904 0a90 9A60     		str	r2, [r3, #8]
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 2905              		.loc 1 2545 0
 2906 0a92 1A6C     		ldr	r2, [r3, #64]
 2907 0a94 00F00400 		and	r0, r0, #4
 2908              	.LVL259:
 2909 0a98 1043     		orrs	r0, r0, r2
 2910 0a9a 1864     		str	r0, [r3, #64]
 2911 0a9c 0CE0     		b	.L250
 2912              	.LVL260:
 2913              	.L249:
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 2914              		.loc 1 2550 0
 2915 0a9e 084B     		ldr	r3, .L251
 2916 0aa0 9A68     		ldr	r2, [r3, #8]
 2917 0aa2 20F00401 		bic	r1, r0, #4
 2918              	.LVL261:
 2919 0aa6 22EA0102 		bic	r2, r2, r1
 2920 0aaa 9A60     		str	r2, [r3, #8]
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 2921              		.loc 1 2552 0
 2922 0aac 1A6C     		ldr	r2, [r3, #64]
 2923 0aae 00F00400 		and	r0, r0, #4
 2924              	.LVL262:
 2925 0ab2 22EA0000 		bic	r0, r2, r0
 2926 0ab6 1864     		str	r0, [r3, #64]
 2927              	.L250:
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2928              		.loc 1 2555 0
 2929 0ab8 FF22     		movs	r2, #255
 2930 0aba 014B     		ldr	r3, .L251
 2931 0abc 5A62     		str	r2, [r3, #36]
 2932 0abe 7047     		bx	lr
 2933              	.L252:
 2934              		.align	2
 2935              	.L251:
 2936 0ac0 00280040 		.word	1073752064
 2937              		.cfi_endproc
 2938              	.LFE160:
 2940              		.align	2
 2941              		.global	RTC_GetFlagStatus
 2942              		.thumb
 2943              		.thumb_func
 2945              	RTC_GetFlagStatus:
 2946              	.LFB161:
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2947              		.loc 1 2577 0
 2948              		.cfi_startproc
 2949              		@ args = 0, pretend = 0, frame = 0
 2950              		@ frame_needed = 0, uses_anonymous_args = 0
 2951              		@ link register save eliminated.
 2952              	.LVL263:
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2953              		.loc 1 2585 0
 2954 0ac4 054B     		ldr	r3, .L256
 2955 0ac6 DB68     		ldr	r3, [r3, #12]
 2956 0ac8 23F08803 		bic	r3, r3, #136
 2957 0acc 9B04     		lsls	r3, r3, #18
 2958 0ace 9B0C     		lsrs	r3, r3, #18
 2959              	.LVL264:
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 2960              		.loc 1 2588 0
 2961 0ad0 0342     		tst	r3, r0
 2962 0ad2 01D0     		beq	.L255
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 2963              		.loc 1 2590 0
 2964 0ad4 0120     		movs	r0, #1
 2965              	.LVL265:
 2966 0ad6 7047     		bx	lr
 2967              	.LVL266:
 2968              	.L255:
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 2969              		.loc 1 2594 0
 2970 0ad8 0020     		movs	r0, #0
 2971              	.LVL267:
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2972              		.loc 1 2597 0
 2973 0ada 7047     		bx	lr
 2974              	.L257:
 2975              		.align	2
 2976              	.L256:
 2977 0adc 00280040 		.word	1073752064
 2978              		.cfi_endproc
 2979              	.LFE161:
 2981              		.align	2
 2982              		.global	RTC_ClearFlag
 2983              		.thumb
 2984              		.thumb_func
 2986              	RTC_ClearFlag:
 2987              	.LFB162:
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2988              		.loc 1 2613 0
 2989              		.cfi_startproc
 2990              		@ args = 0, pretend = 0, frame = 0
 2991              		@ frame_needed = 0, uses_anonymous_args = 0
 2992              		@ link register save eliminated.
 2993              	.LVL268:
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 2994              		.loc 1 2618 0
 2995 0ae0 80B2     		uxth	r0, r0
 2996              	.LVL269:
 2997 0ae2 40F08002 		orr	r2, r0, #128
 2998 0ae6 044B     		ldr	r3, .L259
 2999 0ae8 D968     		ldr	r1, [r3, #12]
 3000 0aea 01F08001 		and	r1, r1, #128
 3001 0aee 61EA0202 		orn	r2, r1, r2
 3002 0af2 DA60     		str	r2, [r3, #12]
 3003 0af4 7047     		bx	lr
 3004              	.L260:
 3005 0af6 00BF     		.align	2
 3006              	.L259:
 3007 0af8 00280040 		.word	1073752064
 3008              		.cfi_endproc
 3009              	.LFE162:
 3011              		.align	2
 3012              		.global	RTC_GetITStatus
 3013              		.thumb
 3014              		.thumb_func
 3016              	RTC_GetITStatus:
 3017              	.LFB163:
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3018              		.loc 1 2633 0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 0
 3021              		@ frame_needed = 0, uses_anonymous_args = 0
 3022              		@ link register save eliminated.
 3023              	.LVL270:
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 3024              		.loc 1 2641 0
 3025 0afc 094B     		ldr	r3, .L265
 3026 0afe 1A6C     		ldr	r2, [r3, #64]
 3027 0b00 02F00402 		and	r2, r2, #4
 3028              	.LVL271:
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 3029              		.loc 1 2644 0
 3030 0b04 9968     		ldr	r1, [r3, #8]
 3031 0b06 0140     		ands	r1, r1, r0
 3032 0b08 02EAD032 		and	r2, r2, r0, lsr #15
 3033              	.LVL272:
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3034              		.loc 1 2647 0
 3035 0b0c DB68     		ldr	r3, [r3, #12]
 3036 0b0e 03EA1010 		and	r0, r3, r0, lsr #4
 3037              	.LVL273:
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3038              		.loc 1 2650 0
 3039 0b12 0A43     		orrs	r2, r1, r2
 3040              	.LVL274:
 3041 0b14 02D0     		beq	.L263
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3042              		.loc 1 2650 0 is_stmt 0 discriminator 1
 3043 0b16 80B2     		uxth	r0, r0
 3044              	.LVL275:
 3045 0b18 10B9     		cbnz	r0, .L264
 3046 0b1a 7047     		bx	lr
 3047              	.LVL276:
 3048              	.L263:
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 3049              		.loc 1 2656 0 is_stmt 1
 3050 0b1c 0020     		movs	r0, #0
 3051              	.LVL277:
 3052 0b1e 7047     		bx	lr
 3053              	.L264:
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 3054              		.loc 1 2652 0
 3055 0b20 0120     		movs	r0, #1
 3056              	.LVL278:
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3057              		.loc 1 2659 0
 3058 0b22 7047     		bx	lr
 3059              	.L266:
 3060              		.align	2
 3061              	.L265:
 3062 0b24 00280040 		.word	1073752064
 3063              		.cfi_endproc
 3064              	.LFE163:
 3066              		.align	2
 3067              		.global	RTC_ClearITPendingBit
 3068              		.thumb
 3069              		.thumb_func
 3071              	RTC_ClearITPendingBit:
 3072              	.LFB164:
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3073              		.loc 1 2673 0
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 0
 3076              		@ frame_needed = 0, uses_anonymous_args = 0
 3077              		@ link register save eliminated.
 3078              	.LVL279:
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3079              		.loc 1 2683 0
 3080 0b28 C0F30F10 		ubfx	r0, r0, #4, #16
 3081              	.LVL280:
 3082 0b2c 40F08002 		orr	r2, r0, #128
 3083 0b30 034B     		ldr	r3, .L268
 3084 0b32 D968     		ldr	r1, [r3, #12]
 3085 0b34 01F08001 		and	r1, r1, #128
 3086 0b38 61EA0202 		orn	r2, r1, r2
 3087 0b3c DA60     		str	r2, [r3, #12]
 3088 0b3e 7047     		bx	lr
 3089              	.L269:
 3090              		.align	2
 3091              	.L268:
 3092 0b40 00280040 		.word	1073752064
 3093              		.cfi_endproc
 3094              	.LFE164:
 3096              	.Letext0:
 3097              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\mach
 3098              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\stdi
 3099              		.file 4 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx\\Include/stm32f4xx.
 3100              		.file 5 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx_StdPeriph_Driver\\i
 3101              		.file 6 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:22     .text:00000000 RTC_ByteToBcd2
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:66     .text:00000018 RTC_Bcd2ToByte
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:94     .text:0000002c RTC_StructInit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:120    .text:0000003c RTC_WriteProtectionCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:147    .text:00000054 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:151    .text:00000058 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:156    .text:00000058 RTC_EnterInitMode
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:223    .text:000000a4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:227    .text:000000a8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:232    .text:000000a8 RTC_ExitInitMode
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:248    .text:000000b4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:252    .text:000000b8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:257    .text:000000b8 RTC_Init
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:321    .text:00000100 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:325    .text:00000104 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:330    .text:00000104 RTC_WaitForSynchro
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:398    .text:00000150 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:402    .text:00000154 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:407    .text:00000154 RTC_DeInit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:523    .text:000001e0 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:528    .text:000001e8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:533    .text:000001e8 RTC_RefClockCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:593    .text:00000228 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:597    .text:0000022c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:602    .text:0000022c RTC_BypassShadowCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:639    .text:00000254 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:643    .text:00000258 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:648    .text:00000258 RTC_SetTime
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:774    .text:000002ec $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:778    .text:000002f0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:783    .text:000002f0 RTC_TimeStructInit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:809    .text:000002fc RTC_GetTime
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:866    .text:0000033c $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:870    .text:00000340 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:875    .text:00000340 RTC_GetSubSecond
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:894    .text:00000348 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:898    .text:0000034c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:903    .text:0000034c RTC_SetDate
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1019   .text:000003d4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1023   .text:000003d8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1028   .text:000003d8 RTC_DateStructInit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1055   .text:000003e8 RTC_GetDate
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1111   .text:00000424 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1115   .text:00000428 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1120   .text:00000428 RTC_SetAlarm
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1260   .text:000004cc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1264   .text:000004d0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1269   .text:000004d0 RTC_AlarmStructInit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1302   .text:000004e4 RTC_GetAlarm
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1388   .text:00000548 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1392   .text:0000054c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1397   .text:0000054c RTC_AlarmCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1485   .text:000005b0 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1489   .text:000005b4 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1494   .text:000005b4 RTC_AlarmSubSecondConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1538   .text:000005dc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1542   .text:000005e0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1547   .text:000005e0 RTC_GetAlarmSubSecond
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1578   .text:000005fc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1582   .text:00000600 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1587   .text:00000600 RTC_WakeUpClockConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1618   .text:00000620 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1622   .text:00000624 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1627   .text:00000624 RTC_SetWakeUpCounter
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1651   .text:00000638 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1655   .text:0000063c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1660   .text:0000063c RTC_GetWakeUpCounter
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1676   .text:00000644 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1680   .text:00000648 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1685   .text:00000648 RTC_WakeUpCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1769   .text:000006a4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1773   .text:000006a8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1778   .text:000006a8 RTC_DayLightSavingConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1810   .text:000006c8 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1814   .text:000006cc $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1819   .text:000006cc RTC_GetStoreOperation
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1835   .text:000006d8 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1839   .text:000006dc $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1844   .text:000006dc RTC_OutputConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1876   .text:000006fc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1880   .text:00000700 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1885   .text:00000700 RTC_CoarseCalibConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1939   .text:00000730 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1943   .text:00000734 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:1948   .text:00000734 RTC_CoarseCalibCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2008   .text:00000774 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2012   .text:00000778 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2017   .text:00000778 RTC_CalibOutputCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2054   .text:000007a0 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2058   .text:000007a4 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2063   .text:000007a4 RTC_CalibOutputConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2094   .text:000007c4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2098   .text:000007c8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2103   .text:000007c8 RTC_SmoothCalibConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2182   .text:00000818 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2186   .text:0000081c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2191   .text:0000081c RTC_TimeStampCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2235   .text:00000848 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2239   .text:0000084c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2244   .text:0000084c RTC_GetTimeStamp
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2335   .text:000008bc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2339   .text:000008c0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2344   .text:000008c0 RTC_GetTimeStampSubSecond
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2359   .text:000008c8 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2363   .text:000008cc $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2368   .text:000008cc RTC_TamperTriggerConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2397   .text:000008e8 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2401   .text:000008ec $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2406   .text:000008ec RTC_TamperCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2435   .text:00000904 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2439   .text:00000908 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2444   .text:00000908 RTC_TamperFilterConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2466   .text:0000091c $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2470   .text:00000920 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2475   .text:00000920 RTC_TamperSamplingFreqConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2497   .text:00000934 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2501   .text:00000938 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2506   .text:00000938 RTC_TamperPinsPrechargeDuration
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2528   .text:0000094c $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2532   .text:00000950 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2537   .text:00000950 RTC_TimeStampOnTamperDetectionCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2563   .text:0000096c $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2567   .text:00000970 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2572   .text:00000970 RTC_TamperPullUpCmd
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2598   .text:0000098c $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2602   .text:00000990 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2607   .text:00000990 RTC_WriteBackupRegister
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2638   .text:000009ac $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2642   .text:000009b0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2647   .text:000009b0 RTC_ReadBackupRegister
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2678   .text:000009cc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2682   .text:000009d0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2687   .text:000009d0 RTC_TamperPinSelection
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2709   .text:000009e4 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2713   .text:000009e8 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2718   .text:000009e8 RTC_TimeStampPinSelection
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2740   .text:000009fc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2744   .text:00000a00 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2749   .text:00000a00 RTC_OutputTypeConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2771   .text:00000a14 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2775   .text:00000a18 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2780   .text:00000a18 RTC_SynchroShiftConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2873   .text:00000a78 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2877   .text:00000a7c $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2882   .text:00000a7c RTC_ITConfig
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2936   .text:00000ac0 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2940   .text:00000ac4 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2945   .text:00000ac4 RTC_GetFlagStatus
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2977   .text:00000adc $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2981   .text:00000ae0 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:2986   .text:00000ae0 RTC_ClearFlag
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3007   .text:00000af8 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3011   .text:00000afc $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3016   .text:00000afc RTC_GetITStatus
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3062   .text:00000b24 $d
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3066   .text:00000b28 $t
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3071   .text:00000b28 RTC_ClearITPendingBit
C:\Users\Filip\AppData\Local\Temp\cc4FGOgU.s:3092   .text:00000b40 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.1c01c98cf54d5aaab4df87c6bb476f00
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_rtc.h.127.d971ab18652a46b4e6f2fc10767eacb7

NO UNDEFINED SYMBOLS
