   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	DMA_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	DMA_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  26              		.loc 1 189 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  32              		.loc 1 194 0
  33 0000 0368     		ldr	r3, [r0]
  34 0002 23F00103 		bic	r3, r3, #1
  35 0006 0360     		str	r3, [r0]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  36              		.loc 1 197 0
  37 0008 0023     		movs	r3, #0
  38 000a 0360     		str	r3, [r0]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  39              		.loc 1 200 0
  40 000c 4360     		str	r3, [r0, #4]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  41              		.loc 1 203 0
  42 000e 8360     		str	r3, [r0, #8]
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  43              		.loc 1 206 0
  44 0010 C360     		str	r3, [r0, #12]
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  45              		.loc 1 209 0
  46 0012 0361     		str	r3, [r0, #16]
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  47              		.loc 1 212 0
  48 0014 2123     		movs	r3, #33
  49 0016 4361     		str	r3, [r0, #20]
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  50              		.loc 1 215 0
  51 0018 3B4B     		ldr	r3, .L18
  52 001a 9842     		cmp	r0, r3
  53 001c 03D1     		bne	.L2
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  54              		.loc 1 218 0
  55 001e 3D22     		movs	r2, #61
  56 0020 103B     		subs	r3, r3, #16
  57 0022 9A60     		str	r2, [r3, #8]
  58 0024 7047     		bx	lr
  59              	.L2:
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  60              		.loc 1 220 0
  61 0026 394B     		ldr	r3, .L18+4
  62 0028 9842     		cmp	r0, r3
  63 002a 04D1     		bne	.L4
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  64              		.loc 1 223 0
  65 002c 4FF47462 		mov	r2, #3904
  66 0030 283B     		subs	r3, r3, #40
  67 0032 9A60     		str	r2, [r3, #8]
  68 0034 7047     		bx	lr
  69              	.L4:
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  70              		.loc 1 225 0
  71 0036 364B     		ldr	r3, .L18+8
  72 0038 9842     		cmp	r0, r3
  73 003a 04D1     		bne	.L5
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
  74              		.loc 1 228 0
  75 003c 4FF47412 		mov	r2, #3997696
  76 0040 403B     		subs	r3, r3, #64
  77 0042 9A60     		str	r2, [r3, #8]
  78 0044 7047     		bx	lr
  79              	.L5:
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
  80              		.loc 1 230 0
  81 0046 334B     		ldr	r3, .L18+12
  82 0048 9842     		cmp	r0, r3
  83 004a 04D1     		bne	.L6
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
  84              		.loc 1 233 0
  85 004c 4FF07462 		mov	r2, #255852544
  86 0050 583B     		subs	r3, r3, #88
  87 0052 9A60     		str	r2, [r3, #8]
  88 0054 7047     		bx	lr
  89              	.L6:
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
  90              		.loc 1 235 0
  91 0056 304B     		ldr	r3, .L18+16
  92 0058 9842     		cmp	r0, r3
  93 005a 03D1     		bne	.L7
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
  94              		.loc 1 238 0
  95 005c 2F4A     		ldr	r2, .L18+20
  96 005e 703B     		subs	r3, r3, #112
  97 0060 DA60     		str	r2, [r3, #12]
  98 0062 7047     		bx	lr
  99              	.L7:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 100              		.loc 1 240 0
 101 0064 2E4B     		ldr	r3, .L18+24
 102 0066 9842     		cmp	r0, r3
 103 0068 03D1     		bne	.L8
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 104              		.loc 1 243 0
 105 006a 2E4A     		ldr	r2, .L18+28
 106 006c 883B     		subs	r3, r3, #136
 107 006e DA60     		str	r2, [r3, #12]
 108 0070 7047     		bx	lr
 109              	.L8:
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 110              		.loc 1 245 0
 111 0072 2D4B     		ldr	r3, .L18+32
 112 0074 9842     		cmp	r0, r3
 113 0076 03D1     		bne	.L9
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 114              		.loc 1 248 0
 115 0078 2C4A     		ldr	r2, .L18+36
 116 007a A03B     		subs	r3, r3, #160
 117 007c DA60     		str	r2, [r3, #12]
 118 007e 7047     		bx	lr
 119              	.L9:
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 120              		.loc 1 250 0
 121 0080 2B4B     		ldr	r3, .L18+40
 122 0082 9842     		cmp	r0, r3
 123 0084 04D1     		bne	.L10
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 124              		.loc 1 253 0
 125 0086 4FF03D52 		mov	r2, #792723456
 126 008a B83B     		subs	r3, r3, #184
 127 008c DA60     		str	r2, [r3, #12]
 128 008e 7047     		bx	lr
 129              	.L10:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 130              		.loc 1 255 0
 131 0090 284B     		ldr	r3, .L18+44
 132 0092 9842     		cmp	r0, r3
 133 0094 03D1     		bne	.L11
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 134              		.loc 1 258 0
 135 0096 3D22     		movs	r2, #61
 136 0098 103B     		subs	r3, r3, #16
 137 009a 9A60     		str	r2, [r3, #8]
 138 009c 7047     		bx	lr
 139              	.L11:
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 140              		.loc 1 260 0
 141 009e 264B     		ldr	r3, .L18+48
 142 00a0 9842     		cmp	r0, r3
 143 00a2 04D1     		bne	.L12
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 144              		.loc 1 263 0
 145 00a4 4FF47462 		mov	r2, #3904
 146 00a8 283B     		subs	r3, r3, #40
 147 00aa 9A60     		str	r2, [r3, #8]
 148 00ac 7047     		bx	lr
 149              	.L12:
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 150              		.loc 1 265 0
 151 00ae 234B     		ldr	r3, .L18+52
 152 00b0 9842     		cmp	r0, r3
 153 00b2 04D1     		bne	.L13
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 154              		.loc 1 268 0
 155 00b4 4FF47412 		mov	r2, #3997696
 156 00b8 403B     		subs	r3, r3, #64
 157 00ba 9A60     		str	r2, [r3, #8]
 158 00bc 7047     		bx	lr
 159              	.L13:
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 160              		.loc 1 270 0
 161 00be 204B     		ldr	r3, .L18+56
 162 00c0 9842     		cmp	r0, r3
 163 00c2 04D1     		bne	.L14
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 164              		.loc 1 273 0
 165 00c4 4FF07462 		mov	r2, #255852544
 166 00c8 583B     		subs	r3, r3, #88
 167 00ca 9A60     		str	r2, [r3, #8]
 168 00cc 7047     		bx	lr
 169              	.L14:
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 170              		.loc 1 275 0
 171 00ce 1D4B     		ldr	r3, .L18+60
 172 00d0 9842     		cmp	r0, r3
 173 00d2 03D1     		bne	.L15
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 174              		.loc 1 278 0
 175 00d4 114A     		ldr	r2, .L18+20
 176 00d6 703B     		subs	r3, r3, #112
 177 00d8 DA60     		str	r2, [r3, #12]
 178 00da 7047     		bx	lr
 179              	.L15:
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 180              		.loc 1 280 0
 181 00dc 1A4B     		ldr	r3, .L18+64
 182 00de 9842     		cmp	r0, r3
 183 00e0 03D1     		bne	.L16
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 184              		.loc 1 283 0
 185 00e2 104A     		ldr	r2, .L18+28
 186 00e4 883B     		subs	r3, r3, #136
 187 00e6 DA60     		str	r2, [r3, #12]
 188 00e8 7047     		bx	lr
 189              	.L16:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 190              		.loc 1 285 0
 191 00ea 184B     		ldr	r3, .L18+68
 192 00ec 9842     		cmp	r0, r3
 193 00ee 03D1     		bne	.L17
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 194              		.loc 1 288 0
 195 00f0 0E4A     		ldr	r2, .L18+36
 196 00f2 A03B     		subs	r3, r3, #160
 197 00f4 DA60     		str	r2, [r3, #12]
 198 00f6 7047     		bx	lr
 199              	.L17:
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 200              		.loc 1 292 0
 201 00f8 154B     		ldr	r3, .L18+72
 202 00fa 9842     		cmp	r0, r3
 203 00fc 03D1     		bne	.L1
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 204              		.loc 1 295 0
 205 00fe 4FF03D52 		mov	r2, #792723456
 206 0102 B83B     		subs	r3, r3, #184
 207 0104 DA60     		str	r2, [r3, #12]
 208              	.L1:
 209 0106 7047     		bx	lr
 210              	.L19:
 211              		.align	2
 212              	.L18:
 213 0108 10600240 		.word	1073897488
 214 010c 28600240 		.word	1073897512
 215 0110 40600240 		.word	1073897536
 216 0114 58600240 		.word	1073897560
 217 0118 70600240 		.word	1073897584
 218 011c 3D000020 		.word	536870973
 219 0120 88600240 		.word	1073897608
 220 0124 400F0020 		.word	536874816
 221 0128 A0600240 		.word	1073897632
 222 012c 00003D20 		.word	540868608
 223 0130 B8600240 		.word	1073897656
 224 0134 10640240 		.word	1073898512
 225 0138 28640240 		.word	1073898536
 226 013c 40640240 		.word	1073898560
 227 0140 58640240 		.word	1073898584
 228 0144 70640240 		.word	1073898608
 229 0148 88640240 		.word	1073898632
 230 014c A0640240 		.word	1073898656
 231 0150 B8640240 		.word	1073898680
 232              		.cfi_endproc
 233              	.LFE110:
 235              		.align	2
 236              		.global	DMA_Init
 237              		.thumb
 238              		.thumb_func
 240              	DMA_Init:
 241              	.LFB111:
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 242              		.loc 1 312 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247              	.LVL1:
 248 0154 10B4     		push	{r4}
 249              		.cfi_def_cfa_offset 4
 250              		.cfi_offset 4, -4
 251              	.LVL2:
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 252              		.loc 1 333 0
 253 0156 0268     		ldr	r2, [r0]
 254              	.LVL3:
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 255              		.loc 1 336 0
 256 0158 134B     		ldr	r3, .L21
 257 015a 1340     		ands	r3, r3, r2
 258              	.LVL4:
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 259              		.loc 1 352 0
 260 015c 0C68     		ldr	r4, [r1]
 261 015e CA68     		ldr	r2, [r1, #12]
 262 0160 1443     		orrs	r4, r4, r2
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 263              		.loc 1 353 0
 264 0162 4A69     		ldr	r2, [r1, #20]
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 265              		.loc 1 352 0
 266 0164 1443     		orrs	r4, r4, r2
 267              		.loc 1 353 0
 268 0166 8A69     		ldr	r2, [r1, #24]
 269 0168 1443     		orrs	r4, r4, r2
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 270              		.loc 1 354 0
 271 016a CA69     		ldr	r2, [r1, #28]
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 272              		.loc 1 353 0
 273 016c 1443     		orrs	r4, r4, r2
 274              		.loc 1 354 0
 275 016e 0A6A     		ldr	r2, [r1, #32]
 276 0170 1443     		orrs	r4, r4, r2
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 277              		.loc 1 355 0
 278 0172 4A6A     		ldr	r2, [r1, #36]
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 279              		.loc 1 354 0
 280 0174 1443     		orrs	r4, r4, r2
 281              		.loc 1 355 0
 282 0176 8A6A     		ldr	r2, [r1, #40]
 283 0178 1443     		orrs	r4, r4, r2
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 284              		.loc 1 356 0
 285 017a 4A6B     		ldr	r2, [r1, #52]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 286              		.loc 1 355 0
 287 017c 1443     		orrs	r4, r4, r2
 288              		.loc 1 356 0
 289 017e 8A6B     		ldr	r2, [r1, #56]
 290 0180 2243     		orrs	r2, r2, r4
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 291              		.loc 1 352 0
 292 0182 1343     		orrs	r3, r3, r2
 293              	.LVL5:
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 294              		.loc 1 359 0
 295 0184 0360     		str	r3, [r0]
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 296              		.loc 1 363 0
 297 0186 4469     		ldr	r4, [r0, #20]
 298              	.LVL6:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 299              		.loc 1 366 0
 300 0188 24F00704 		bic	r4, r4, #7
 301              	.LVL7:
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 302              		.loc 1 371 0
 303 018c CA6A     		ldr	r2, [r1, #44]
 304 018e 0B6B     		ldr	r3, [r1, #48]
 305 0190 1343     		orrs	r3, r3, r2
 306 0192 2343     		orrs	r3, r3, r4
 307              	.LVL8:
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 308              		.loc 1 374 0
 309 0194 4361     		str	r3, [r0, #20]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 310              		.loc 1 378 0
 311 0196 0B69     		ldr	r3, [r1, #16]
 312              	.LVL9:
 313 0198 4360     		str	r3, [r0, #4]
 314              	.LVL10:
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 315              		.loc 1 382 0
 316 019a 4B68     		ldr	r3, [r1, #4]
 317 019c 8360     		str	r3, [r0, #8]
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 318              		.loc 1 386 0
 319 019e 8B68     		ldr	r3, [r1, #8]
 320 01a0 C360     		str	r3, [r0, #12]
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 321              		.loc 1 387 0
 322 01a2 5DF8044B 		ldr	r4, [sp], #4
 323 01a6 7047     		bx	lr
 324              	.L22:
 325              		.align	2
 326              	.L21:
 327 01a8 3F801CF0 		.word	-266567617
 328              		.cfi_endproc
 329              	.LFE111:
 331              		.align	2
 332              		.global	DMA_StructInit
 333              		.thumb
 334              		.thumb_func
 336              	DMA_StructInit:
 337              	.LFB112:
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 338              		.loc 1 396 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 343              	.LVL11:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 344              		.loc 1 399 0
 345 01ac 0023     		movs	r3, #0
 346 01ae 0360     		str	r3, [r0]
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 347              		.loc 1 402 0
 348 01b0 4360     		str	r3, [r0, #4]
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 349              		.loc 1 405 0
 350 01b2 8360     		str	r3, [r0, #8]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 351              		.loc 1 408 0
 352 01b4 C360     		str	r3, [r0, #12]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 353              		.loc 1 411 0
 354 01b6 0361     		str	r3, [r0, #16]
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 355              		.loc 1 414 0
 356 01b8 4361     		str	r3, [r0, #20]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 357              		.loc 1 417 0
 358 01ba 8361     		str	r3, [r0, #24]
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 359              		.loc 1 420 0
 360 01bc C361     		str	r3, [r0, #28]
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 361              		.loc 1 423 0
 362 01be 0362     		str	r3, [r0, #32]
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 363              		.loc 1 426 0
 364 01c0 4362     		str	r3, [r0, #36]
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 365              		.loc 1 429 0
 366 01c2 8362     		str	r3, [r0, #40]
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 367              		.loc 1 432 0
 368 01c4 C362     		str	r3, [r0, #44]
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 369              		.loc 1 435 0
 370 01c6 0363     		str	r3, [r0, #48]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 371              		.loc 1 438 0
 372 01c8 4363     		str	r3, [r0, #52]
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 373              		.loc 1 441 0
 374 01ca 8363     		str	r3, [r0, #56]
 375 01cc 7047     		bx	lr
 376              		.cfi_endproc
 377              	.LFE112:
 379 01ce 00BF     		.align	2
 380              		.global	DMA_Cmd
 381              		.thumb
 382              		.thumb_func
 384              	DMA_Cmd:
 385              	.LFB113:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 386              		.loc 1 471 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391              	.LVL12:
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 392              		.loc 1 476 0
 393 01d0 21B1     		cbz	r1, .L25
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 394              		.loc 1 479 0
 395 01d2 0368     		ldr	r3, [r0]
 396 01d4 43F00103 		orr	r3, r3, #1
 397 01d8 0360     		str	r3, [r0]
 398 01da 7047     		bx	lr
 399              	.L25:
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 400              		.loc 1 484 0
 401 01dc 0368     		ldr	r3, [r0]
 402 01de 23F00103 		bic	r3, r3, #1
 403 01e2 0360     		str	r3, [r0]
 404 01e4 7047     		bx	lr
 405              		.cfi_endproc
 406              	.LFE113:
 408 01e6 00BF     		.align	2
 409              		.global	DMA_PeriphIncOffsetSizeConfig
 410              		.thumb
 411              		.thumb_func
 413              	DMA_PeriphIncOffsetSizeConfig:
 414              	.LFB114:
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 415              		.loc 1 507 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420              	.LVL13:
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 421              		.loc 1 513 0
 422 01e8 21B1     		cbz	r1, .L28
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 423              		.loc 1 516 0
 424 01ea 0368     		ldr	r3, [r0]
 425 01ec 43F40043 		orr	r3, r3, #32768
 426 01f0 0360     		str	r3, [r0]
 427 01f2 7047     		bx	lr
 428              	.L28:
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 429              		.loc 1 521 0
 430 01f4 0368     		ldr	r3, [r0]
 431 01f6 23F40043 		bic	r3, r3, #32768
 432 01fa 0360     		str	r3, [r0]
 433 01fc 7047     		bx	lr
 434              		.cfi_endproc
 435              	.LFE114:
 437 01fe 00BF     		.align	2
 438              		.global	DMA_FlowControllerConfig
 439              		.thumb
 440              		.thumb_func
 442              	DMA_FlowControllerConfig:
 443              	.LFB115:
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 444              		.loc 1 543 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL14:
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 450              		.loc 1 549 0
 451 0200 21B1     		cbz	r1, .L31
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 452              		.loc 1 552 0
 453 0202 0368     		ldr	r3, [r0]
 454 0204 43F02003 		orr	r3, r3, #32
 455 0208 0360     		str	r3, [r0]
 456 020a 7047     		bx	lr
 457              	.L31:
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 458              		.loc 1 557 0
 459 020c 0368     		ldr	r3, [r0]
 460 020e 23F02003 		bic	r3, r3, #32
 461 0212 0360     		str	r3, [r0]
 462 0214 7047     		bx	lr
 463              		.cfi_endproc
 464              	.LFE115:
 466 0216 00BF     		.align	2
 467              		.global	DMA_SetCurrDataCounter
 468              		.thumb
 469              		.thumb_func
 471              	DMA_SetCurrDataCounter:
 472              	.LFB116:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 473              		.loc 1 627 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              	.LVL15:
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 479              		.loc 1 632 0
 480 0218 4160     		str	r1, [r0, #4]
 481 021a 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE116:
 485              		.align	2
 486              		.global	DMA_GetCurrDataCounter
 487              		.thumb
 488              		.thumb_func
 490              	DMA_GetCurrDataCounter:
 491              	.LFB117:
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 492              		.loc 1 642 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497              	.LVL16:
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 498              		.loc 1 647 0
 499 021c 4068     		ldr	r0, [r0, #4]
 500              	.LVL17:
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 501              		.loc 1 648 0
 502 021e 80B2     		uxth	r0, r0
 503 0220 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE117:
 507 0222 00BF     		.align	2
 508              		.global	DMA_DoubleBufferModeConfig
 509              		.thumb
 510              		.thumb_func
 512              	DMA_DoubleBufferModeConfig:
 513              	.LFB118:
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 514              		.loc 1 720 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519              	.LVL18:
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 520              		.loc 1 725 0
 521 0224 22B1     		cbz	r2, .L36
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 522              		.loc 1 728 0
 523 0226 0368     		ldr	r3, [r0]
 524 0228 43F40023 		orr	r3, r3, #524288
 525 022c 0360     		str	r3, [r0]
 526 022e 03E0     		b	.L37
 527              	.L36:
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 528              		.loc 1 733 0
 529 0230 0368     		ldr	r3, [r0]
 530 0232 23F40023 		bic	r3, r3, #524288
 531 0236 0360     		str	r3, [r0]
 532              	.L37:
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 533              		.loc 1 737 0
 534 0238 0161     		str	r1, [r0, #16]
 535 023a 7047     		bx	lr
 536              		.cfi_endproc
 537              	.LFE118:
 539              		.align	2
 540              		.global	DMA_DoubleBufferModeCmd
 541              		.thumb
 542              		.thumb_func
 544              	DMA_DoubleBufferModeCmd:
 545              	.LFB119:
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 546              		.loc 1 750 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 551              	.LVL19:
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 552              		.loc 1 756 0
 553 023c 21B1     		cbz	r1, .L39
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 554              		.loc 1 759 0
 555 023e 0368     		ldr	r3, [r0]
 556 0240 43F48023 		orr	r3, r3, #262144
 557 0244 0360     		str	r3, [r0]
 558 0246 7047     		bx	lr
 559              	.L39:
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 560              		.loc 1 764 0
 561 0248 0368     		ldr	r3, [r0]
 562 024a 23F48023 		bic	r3, r3, #262144
 563 024e 0360     		str	r3, [r0]
 564 0250 7047     		bx	lr
 565              		.cfi_endproc
 566              	.LFE119:
 568 0252 00BF     		.align	2
 569              		.global	DMA_MemoryTargetConfig
 570              		.thumb
 571              		.thumb_func
 573              	DMA_MemoryTargetConfig:
 574              	.LFB120:
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 575              		.loc 1 792 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580              	.LVL20:
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 581              		.loc 1 798 0
 582 0254 0AB1     		cbz	r2, .L42
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 583              		.loc 1 801 0
 584 0256 0161     		str	r1, [r0, #16]
 585 0258 7047     		bx	lr
 586              	.L42:
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 587              		.loc 1 806 0
 588 025a C160     		str	r1, [r0, #12]
 589 025c 7047     		bx	lr
 590              		.cfi_endproc
 591              	.LFE120:
 593 025e 00BF     		.align	2
 594              		.global	DMA_GetCurrentMemoryTarget
 595              		.thumb
 596              		.thumb_func
 598              	DMA_GetCurrentMemoryTarget:
 599              	.LFB121:
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 600              		.loc 1 817 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605              	.LVL21:
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 606              		.loc 1 824 0
 607 0260 0368     		ldr	r3, [r0]
 608 0262 13F4002F 		tst	r3, #524288
 609 0266 01D0     		beq	.L46
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 610              		.loc 1 827 0
 611 0268 0120     		movs	r0, #1
 612              	.LVL22:
 613 026a 7047     		bx	lr
 614              	.LVL23:
 615              	.L46:
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 616              		.loc 1 832 0
 617 026c 0020     		movs	r0, #0
 618              	.LVL24:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 619              		.loc 1 835 0
 620 026e 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE121:
 624              		.align	2
 625              		.global	DMA_GetCmdStatus
 626              		.thumb
 627              		.thumb_func
 629              	DMA_GetCmdStatus:
 630              	.LFB122:
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 631              		.loc 1 926 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 0
 634              		@ frame_needed = 0, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636              	.LVL25:
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 637              		.loc 1 932 0
 638 0270 0368     		ldr	r3, [r0]
 639 0272 13F0010F 		tst	r3, #1
 640 0276 01D0     		beq	.L49
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 641              		.loc 1 935 0
 642 0278 0120     		movs	r0, #1
 643              	.LVL26:
 644 027a 7047     		bx	lr
 645              	.LVL27:
 646              	.L49:
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 647              		.loc 1 941 0
 648 027c 0020     		movs	r0, #0
 649              	.LVL28:
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 650              		.loc 1 944 0
 651 027e 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE122:
 655              		.align	2
 656              		.global	DMA_GetFIFOStatus
 657              		.thumb
 658              		.thumb_func
 660              	DMA_GetFIFOStatus:
 661              	.LFB123:
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 662              		.loc 1 960 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 667              	.LVL29:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 668              		.loc 1 967 0
 669 0280 4069     		ldr	r0, [r0, #20]
 670              	.LVL30:
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 671              		.loc 1 970 0
 672 0282 00F03800 		and	r0, r0, #56
 673              	.LVL31:
 674 0286 7047     		bx	lr
 675              		.cfi_endproc
 676              	.LFE123:
 678              		.align	2
 679              		.global	DMA_GetFlagStatus
 680              		.thumb
 681              		.thumb_func
 683              	DMA_GetFlagStatus:
 684              	.LFB124:
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 685              		.loc 1 987 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 690              	.LVL32:
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 691              		.loc 1 997 0
 692 0288 0B4B     		ldr	r3, .L58
 693 028a 9842     		cmp	r0, r3
 694 028c 02D8     		bhi	.L56
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 695              		.loc 1 1000 0
 696 028e A3F20F43 		subw	r3, r3, #1039
 697 0292 00E0     		b	.L52
 698              	.L56:
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 699              		.loc 1 1005 0
 700 0294 094B     		ldr	r3, .L58+4
 701              	.L52:
 702              	.LVL33:
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 703              		.loc 1 1009 0
 704 0296 11F0005F 		tst	r1, #536870912
 705 029a 01D0     		beq	.L53
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 706              		.loc 1 1012 0
 707 029c 5B68     		ldr	r3, [r3, #4]
 708              	.LVL34:
 709 029e 00E0     		b	.L54
 710              	.LVL35:
 711              	.L53:
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 712              		.loc 1 1017 0
 713 02a0 1B68     		ldr	r3, [r3]
 714              	.LVL36:
 715              	.L54:
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 716              		.loc 1 1021 0
 717 02a2 23F0F023 		bic	r3, r3, #-268374016
 718              	.LVL37:
 719 02a6 23F08213 		bic	r3, r3, #8519810
 720              	.LVL38:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 721              		.loc 1 1024 0
 722 02aa 0B42     		tst	r3, r1
 723 02ac 01D0     		beq	.L57
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 724              		.loc 1 1027 0
 725 02ae 0120     		movs	r0, #1
 726              	.LVL39:
 727 02b0 7047     		bx	lr
 728              	.LVL40:
 729              	.L57:
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 730              		.loc 1 1032 0
 731 02b2 0020     		movs	r0, #0
 732              	.LVL41:
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 733              		.loc 1 1037 0
 734 02b4 7047     		bx	lr
 735              	.L59:
 736 02b6 00BF     		.align	2
 737              	.L58:
 738 02b8 0F640240 		.word	1073898511
 739 02bc 00640240 		.word	1073898496
 740              		.cfi_endproc
 741              	.LFE124:
 743              		.align	2
 744              		.global	DMA_ClearFlag
 745              		.thumb
 746              		.thumb_func
 748              	DMA_ClearFlag:
 749              	.LFB125:
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 750              		.loc 1 1054 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755              	.LVL42:
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 756              		.loc 1 1062 0
 757 02c0 0A4B     		ldr	r3, .L65
 758 02c2 9842     		cmp	r0, r3
 759 02c4 02D8     		bhi	.L64
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 760              		.loc 1 1065 0
 761 02c6 A3F20F43 		subw	r3, r3, #1039
 762 02ca 00E0     		b	.L61
 763              	.L64:
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 764              		.loc 1 1070 0
 765 02cc 084B     		ldr	r3, .L65+4
 766              	.L61:
 767              	.LVL43:
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 768              		.loc 1 1074 0
 769 02ce 11F0005F 		tst	r1, #536870912
 770 02d2 05D0     		beq	.L62
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 771              		.loc 1 1077 0
 772 02d4 21F0F021 		bic	r1, r1, #-268374016
 773              	.LVL44:
 774 02d8 21F08211 		bic	r1, r1, #8519810
 775 02dc D960     		str	r1, [r3, #12]
 776 02de 7047     		bx	lr
 777              	.LVL45:
 778              	.L62:
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 779              		.loc 1 1082 0
 780 02e0 21F0F021 		bic	r1, r1, #-268374016
 781              	.LVL46:
 782 02e4 21F08211 		bic	r1, r1, #8519810
 783 02e8 9960     		str	r1, [r3, #8]
 784 02ea 7047     		bx	lr
 785              	.L66:
 786              		.align	2
 787              	.L65:
 788 02ec 0F640240 		.word	1073898511
 789 02f0 00640240 		.word	1073898496
 790              		.cfi_endproc
 791              	.LFE125:
 793              		.align	2
 794              		.global	DMA_ITConfig
 795              		.thumb
 796              		.thumb_func
 798              	DMA_ITConfig:
 799              	.LFB126:
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 800              		.loc 1 1101 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805              	.LVL47:
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 806              		.loc 1 1108 0
 807 02f4 11F0800F 		tst	r1, #128
 808 02f8 09D0     		beq	.L68
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 809              		.loc 1 1110 0
 810 02fa 22B1     		cbz	r2, .L69
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 811              		.loc 1 1113 0
 812 02fc 4369     		ldr	r3, [r0, #20]
 813 02fe 43F08003 		orr	r3, r3, #128
 814 0302 4361     		str	r3, [r0, #20]
 815 0304 03E0     		b	.L68
 816              	.L69:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 817              		.loc 1 1118 0
 818 0306 4369     		ldr	r3, [r0, #20]
 819 0308 23F08003 		bic	r3, r3, #128
 820 030c 4361     		str	r3, [r0, #20]
 821              	.L68:
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 822              		.loc 1 1123 0
 823 030e 8029     		cmp	r1, #128
 824 0310 0CD0     		beq	.L67
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 825              		.loc 1 1125 0
 826 0312 2AB1     		cbz	r2, .L71
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 827              		.loc 1 1128 0
 828 0314 0368     		ldr	r3, [r0]
 829 0316 01F01E01 		and	r1, r1, #30
 830              	.LVL48:
 831 031a 1943     		orrs	r1, r1, r3
 832 031c 0160     		str	r1, [r0]
 833 031e 7047     		bx	lr
 834              	.LVL49:
 835              	.L71:
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 836              		.loc 1 1133 0
 837 0320 0368     		ldr	r3, [r0]
 838 0322 01F01E01 		and	r1, r1, #30
 839              	.LVL50:
 840 0326 23EA0101 		bic	r1, r3, r1
 841 032a 0160     		str	r1, [r0]
 842              	.L67:
 843 032c 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE126:
 847 032e 00BF     		.align	2
 848              		.global	DMA_GetITStatus
 849              		.thumb
 850              		.thumb_func
 852              	DMA_GetITStatus:
 853              	.LFB127:
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 854              		.loc 1 1153 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859              	.LVL51:
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 860              		.loc 1 1163 0
 861 0330 124B     		ldr	r3, .L82
 862 0332 9842     		cmp	r0, r3
 863 0334 01D8     		bhi	.L79
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 864              		.loc 1 1166 0
 865 0336 124A     		ldr	r2, .L82+4
 866 0338 00E0     		b	.L73
 867              	.L79:
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 868              		.loc 1 1171 0
 869 033a 124A     		ldr	r2, .L82+8
 870              	.L73:
 871              	.LVL52:
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 872              		.loc 1 1175 0
 873 033c 21F0F023 		bic	r3, r1, #-268374016
 874 0340 23F0C313 		bic	r3, r3, #12779715
 875 0344 2BB1     		cbz	r3, .L74
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 876              		.loc 1 1178 0
 877 0346 CB0A     		lsrs	r3, r1, #11
 878 0348 03F01E03 		and	r3, r3, #30
 879              	.LVL53:
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 880              		.loc 1 1181 0
 881 034c 0068     		ldr	r0, [r0]
 882              	.LVL54:
 883 034e 1840     		ands	r0, r0, r3
 884              	.LVL55:
 885 0350 02E0     		b	.L75
 886              	.LVL56:
 887              	.L74:
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 888              		.loc 1 1186 0
 889 0352 4069     		ldr	r0, [r0, #20]
 890              	.LVL57:
 891 0354 00F08000 		and	r0, r0, #128
 892              	.LVL58:
 893              	.L75:
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 894              		.loc 1 1190 0
 895 0358 11F0005F 		tst	r1, #536870912
 896 035c 01D0     		beq	.L76
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 897              		.loc 1 1193 0
 898 035e 5368     		ldr	r3, [r2, #4]
 899              	.LVL59:
 900 0360 00E0     		b	.L77
 901              	.LVL60:
 902              	.L76:
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 903              		.loc 1 1198 0
 904 0362 1368     		ldr	r3, [r2]
 905              	.LVL61:
 906              	.L77:
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 907              		.loc 1 1202 0
 908 0364 23F0F023 		bic	r3, r3, #-268374016
 909              	.LVL62:
 910 0368 23F08213 		bic	r3, r3, #8519810
 911              	.LVL63:
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 912              		.loc 1 1205 0
 913 036c 0B42     		tst	r3, r1
 914 036e 01D0     		beq	.L80
 915              		.loc 1 1205 0 is_stmt 0 discriminator 1
 916 0370 10B9     		cbnz	r0, .L81
 917 0372 7047     		bx	lr
 918              	.L80:
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 919              		.loc 1 1213 0 is_stmt 1
 920 0374 0020     		movs	r0, #0
 921              	.LVL64:
 922 0376 7047     		bx	lr
 923              	.LVL65:
 924              	.L81:
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 925              		.loc 1 1208 0
 926 0378 0120     		movs	r0, #1
 927              	.LVL66:
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 928              		.loc 1 1218 0
 929 037a 7047     		bx	lr
 930              	.L83:
 931              		.align	2
 932              	.L82:
 933 037c 0F640240 		.word	1073898511
 934 0380 00600240 		.word	1073897472
 935 0384 00640240 		.word	1073898496
 936              		.cfi_endproc
 937              	.LFE127:
 939              		.align	2
 940              		.global	DMA_ClearITPendingBit
 941              		.thumb
 942              		.thumb_func
 944              	DMA_ClearITPendingBit:
 945              	.LFB128:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 946              		.loc 1 1235 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              		@ link register save eliminated.
 951              	.LVL67:
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 952              		.loc 1 1243 0
 953 0388 0A4B     		ldr	r3, .L89
 954 038a 9842     		cmp	r0, r3
 955 038c 02D8     		bhi	.L88
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 956              		.loc 1 1246 0
 957 038e A3F20F43 		subw	r3, r3, #1039
 958 0392 00E0     		b	.L85
 959              	.L88:
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 960              		.loc 1 1251 0
 961 0394 084B     		ldr	r3, .L89+4
 962              	.L85:
 963              	.LVL68:
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 964              		.loc 1 1255 0
 965 0396 11F0005F 		tst	r1, #536870912
 966 039a 05D0     		beq	.L86
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 967              		.loc 1 1258 0
 968 039c 21F0F021 		bic	r1, r1, #-268374016
 969              	.LVL69:
 970 03a0 21F08211 		bic	r1, r1, #8519810
 971 03a4 D960     		str	r1, [r3, #12]
 972 03a6 7047     		bx	lr
 973              	.LVL70:
 974              	.L86:
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 975              		.loc 1 1263 0
 976 03a8 21F0F021 		bic	r1, r1, #-268374016
 977              	.LVL71:
 978 03ac 21F08211 		bic	r1, r1, #8519810
 979 03b0 9960     		str	r1, [r3, #8]
 980 03b2 7047     		bx	lr
 981              	.L90:
 982              		.align	2
 983              	.L89:
 984 03b4 0F640240 		.word	1073898511
 985 03b8 00640240 		.word	1073898496
 986              		.cfi_endproc
 987              	.LFE128:
 989              	.Letext0:
 990              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\mach
 991              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\stdi
 992              		.file 4 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx\\Include/stm32f4xx.
 993              		.file 5 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx_StdPeriph_Driver\\i
 994              		.file 6 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:23     .text:00000000 DMA_DeInit
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:213    .text:00000108 $d
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:235    .text:00000154 $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:240    .text:00000154 DMA_Init
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:327    .text:000001a8 $d
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:331    .text:000001ac $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:336    .text:000001ac DMA_StructInit
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:384    .text:000001d0 DMA_Cmd
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:413    .text:000001e8 DMA_PeriphIncOffsetSizeConfig
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:442    .text:00000200 DMA_FlowControllerConfig
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:471    .text:00000218 DMA_SetCurrDataCounter
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:490    .text:0000021c DMA_GetCurrDataCounter
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:512    .text:00000224 DMA_DoubleBufferModeConfig
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:544    .text:0000023c DMA_DoubleBufferModeCmd
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:573    .text:00000254 DMA_MemoryTargetConfig
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:598    .text:00000260 DMA_GetCurrentMemoryTarget
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:629    .text:00000270 DMA_GetCmdStatus
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:660    .text:00000280 DMA_GetFIFOStatus
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:683    .text:00000288 DMA_GetFlagStatus
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:738    .text:000002b8 $d
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:743    .text:000002c0 $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:748    .text:000002c0 DMA_ClearFlag
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:788    .text:000002ec $d
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:793    .text:000002f4 $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:798    .text:000002f4 DMA_ITConfig
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:852    .text:00000330 DMA_GetITStatus
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:933    .text:0000037c $d
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:939    .text:00000388 $t
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:944    .text:00000388 DMA_ClearITPendingBit
C:\Users\Filip\AppData\Local\Temp\ccEqjv68.s:984    .text:000003b4 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.1c01c98cf54d5aaab4df87c6bb476f00
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_dma.h.112.18d4286c7d51453d084bac9a606f398a

NO UNDEFINED SYMBOLS
