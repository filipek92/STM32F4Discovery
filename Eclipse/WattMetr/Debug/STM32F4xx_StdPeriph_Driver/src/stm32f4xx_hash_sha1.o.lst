   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_hash_sha1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	HASH_SHA1
  20              		.thumb
  21              		.thumb_func
  23              	HASH_SHA1:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          1. Enable The HASH controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          2. Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          3. Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *  @endverbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @attention
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */ 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  *
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** @verbatim   
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****                           High Level SHA1 Hash and HMAC functions
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** @endverbatim
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** {
  26              		.loc 1 88 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 48
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8DB0     		sub	sp, sp, #52
  39              		.cfi_def_cfa_offset 72
  40 0004 0E46     		mov	r6, r1
  41 0006 1746     		mov	r7, r2
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  42              		.loc 1 91 0
  43 0008 0024     		movs	r4, #0
  44 000a ADF80A40 		strh	r4, [sp, #10]	@ movhi
  45              	.LVL1:
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  46              		.loc 1 93 0
  47 000e 0194     		str	r4, [sp, #4]
  48              	.LVL2:
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  49              		.loc 1 96 0
  50 0010 0546     		mov	r5, r0
  51              	.LVL3:
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  52              		.loc 1 100 0
  53 0012 01F00303 		and	r3, r1, #3
  54 0016 DB00     		lsls	r3, r3, #3
  55 0018 ADF80A30 		strh	r3, [sp, #10]	@ movhi
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  56              		.loc 1 103 0
  57 001c FFF7FEFF 		bl	HASH_DeInit
  58              	.LVL4:
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  59              		.loc 1 106 0
  60 0020 0894     		str	r4, [sp, #32]
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  61              		.loc 1 107 0
  62 0022 0994     		str	r4, [sp, #36]
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  63              		.loc 1 108 0
  64 0024 2023     		movs	r3, #32
  65 0026 0A93     		str	r3, [sp, #40]
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  66              		.loc 1 109 0
  67 0028 0DEB0300 		add	r0, sp, r3
  68 002c FFF7FEFF 		bl	HASH_Init
  69              	.LVL5:
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  70              		.loc 1 112 0
  71 0030 BDF80A00 		ldrh	r0, [sp, #10]
  72 0034 80B2     		uxth	r0, r0
  73 0036 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  74              	.LVL6:
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  75              		.loc 1 115 0
  76 003a 04E0     		b	.L2
  77              	.LVL7:
  78              	.L3:
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  79              		.loc 1 117 0 discriminator 2
  80 003c 55F8040B 		ldr	r0, [r5], #4
  81              	.LVL8:
  82 0040 FFF7FEFF 		bl	HASH_DataIn
  83              	.LVL9:
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  84              		.loc 1 115 0 discriminator 2
  85 0044 0434     		adds	r4, r4, #4
  86              	.LVL10:
  87              	.L2:
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  88              		.loc 1 115 0 is_stmt 0 discriminator 1
  89 0046 B442     		cmp	r4, r6
  90 0048 F8D3     		bcc	.L3
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
  91              		.loc 1 122 0 is_stmt 1
  92 004a FFF7FEFF 		bl	HASH_StartDigest
  93              	.LVL11:
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   do
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
  94              		.loc 1 127 0
  95 004e 0824     		movs	r4, #8
  96              	.LVL12:
  97              	.L5:
  98              		.loc 1 127 0 is_stmt 0 discriminator 1
  99 0050 2046     		mov	r0, r4
 100 0052 FFF7FEFF 		bl	HASH_GetFlagStatus
 101              	.LVL13:
 102 0056 0246     		mov	r2, r0
 103              	.LVL14:
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter++;
 104              		.loc 1 128 0 is_stmt 1 discriminator 1
 105 0058 019B     		ldr	r3, [sp, #4]
 106 005a 0133     		adds	r3, r3, #1
 107 005c 0193     		str	r3, [sp, #4]
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 108              		.loc 1 129 0 discriminator 1
 109 005e 019B     		ldr	r3, [sp, #4]
 110 0060 B3F5803F 		cmp	r3, #65536
 111 0064 01D0     		beq	.L4
 112 0066 0028     		cmp	r0, #0
 113 0068 F2D1     		bne	.L5
 114              	.L4:
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 115              		.loc 1 131 0
 116 006a 9AB9     		cbnz	r2, .L7
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 117              		.loc 1 138 0
 118 006c 03A8     		add	r0, sp, #12
 119              	.LVL15:
 120 006e FFF7FEFF 		bl	HASH_GetDigest
 121              	.LVL16:
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 122              		.loc 1 139 0
 123 0072 039B     		ldr	r3, [sp, #12]
 124              	.LVL17:
 125              	.LBB22:
 126              	.LBB23:
 127              		.file 2 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\CMSIS\\Include/core_cmInstr.h
   1:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 295:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 296:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 297:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 299:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 301:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 303:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 305:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 309:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 313:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 315:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 317:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 318:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 319:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 324:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 326:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 328:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 329:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 332:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 335:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 337:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** }
 339:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 340:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 343:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** 
 345:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****  */
 348:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h **** {
 350:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   
 352:C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 128              		.loc 2 352 0
 129              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 130 0074 1BBA     		rev r3, r3
 131              	@ 0 "" 2
 132              	.LVL18:
 133              		.thumb
 134              	.LBE23:
 135              	.LBE22:
 136              		.loc 1 139 0
 137 0076 3B60     		str	r3, [r7]
 138              	.LVL19:
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 139              		.loc 1 141 0
 140 0078 049B     		ldr	r3, [sp, #16]
 141              	.LVL20:
 142              	.LBB24:
 143              	.LBB25:
 144              		.loc 2 352 0
 145              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 146 007a 1BBA     		rev r3, r3
 147              	@ 0 "" 2
 148              	.LVL21:
 149              		.thumb
 150              	.LBE25:
 151              	.LBE24:
 152              		.loc 1 141 0
 153 007c 7B60     		str	r3, [r7, #4]
 154              	.LVL22:
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 155              		.loc 1 143 0
 156 007e 059B     		ldr	r3, [sp, #20]
 157              	.LVL23:
 158              	.LBB26:
 159              	.LBB27:
 160              		.loc 2 352 0
 161              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 162 0080 1BBA     		rev r3, r3
 163              	@ 0 "" 2
 164              	.LVL24:
 165              		.thumb
 166              	.LBE27:
 167              	.LBE26:
 168              		.loc 1 143 0
 169 0082 BB60     		str	r3, [r7, #8]
 170              	.LVL25:
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 171              		.loc 1 145 0
 172 0084 069B     		ldr	r3, [sp, #24]
 173              	.LVL26:
 174              	.LBB28:
 175              	.LBB29:
 176              		.loc 2 352 0
 177              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 178 0086 1BBA     		rev r3, r3
 179              	@ 0 "" 2
 180              	.LVL27:
 181              		.thumb
 182              	.LBE29:
 183              	.LBE28:
 184              		.loc 1 145 0
 185 0088 FB60     		str	r3, [r7, #12]
 186              	.LVL28:
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 187              		.loc 1 147 0
 188 008a 079B     		ldr	r3, [sp, #28]
 189              	.LVL29:
 190              	.LBB30:
 191              	.LBB31:
 192              		.loc 2 352 0
 193              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 194 008c 1BBA     		rev r3, r3
 195              	@ 0 "" 2
 196              	.LVL30:
 197              		.thumb
 198              	.LBE31:
 199              	.LBE30:
 200              		.loc 1 147 0
 201 008e 3B61     		str	r3, [r7, #16]
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 202              		.loc 1 95 0
 203 0090 0120     		movs	r0, #1
 204 0092 00E0     		b	.L6
 205              	.LVL31:
 206              	.L7:
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 207              		.loc 1 133 0
 208 0094 0020     		movs	r0, #0
 209              	.LVL32:
 210              	.L6:
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   return status;
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** }
 211              		.loc 1 150 0
 212 0096 0DB0     		add	sp, sp, #52
 213              		@ sp needed
 214 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 215              		.cfi_endproc
 216              	.LFE110:
 218 009a 00BF     		.align	2
 219              		.global	HMAC_SHA1
 220              		.thumb
 221              		.thumb_func
 223              	HMAC_SHA1:
 224              	.LFB111:
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** {
 225              		.loc 1 165 0
 226              		.cfi_startproc
 227              		@ args = 4, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL33:
 230 009c 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 231              		.cfi_def_cfa_offset 28
 232              		.cfi_offset 4, -28
 233              		.cfi_offset 5, -24
 234              		.cfi_offset 6, -20
 235              		.cfi_offset 7, -16
 236              		.cfi_offset 8, -12
 237              		.cfi_offset 9, -8
 238              		.cfi_offset 14, -4
 239 00a0 8DB0     		sub	sp, sp, #52
 240              		.cfi_def_cfa_offset 80
 241 00a2 8146     		mov	r9, r0
 242 00a4 0D46     		mov	r5, r1
 243 00a6 1F46     		mov	r7, r3
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 244              		.loc 1 168 0
 245 00a8 0024     		movs	r4, #0
 246 00aa ADF80A40 		strh	r4, [sp, #10]	@ movhi
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 247              		.loc 1 169 0
 248 00ae ADF80840 		strh	r4, [sp, #8]	@ movhi
 249              	.LVL34:
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 250              		.loc 1 171 0
 251 00b2 0194     		str	r4, [sp, #4]
 252              	.LVL35:
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 253              		.loc 1 174 0
 254 00b4 8046     		mov	r8, r0
 255              	.LVL36:
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 256              		.loc 1 175 0
 257 00b6 1646     		mov	r6, r2
 258              	.LVL37:
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 259              		.loc 1 179 0
 260 00b8 03F00303 		and	r3, r3, #3
 261              	.LVL38:
 262 00bc DB00     		lsls	r3, r3, #3
 263 00be ADF80A30 		strh	r3, [sp, #10]	@ movhi
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 264              		.loc 1 182 0
 265 00c2 01F00303 		and	r3, r1, #3
 266 00c6 DB00     		lsls	r3, r3, #3
 267 00c8 ADF80830 		strh	r3, [sp, #8]	@ movhi
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 268              		.loc 1 185 0
 269 00cc FFF7FEFF 		bl	HASH_DeInit
 270              	.LVL39:
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 271              		.loc 1 188 0
 272 00d0 0894     		str	r4, [sp, #32]
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 273              		.loc 1 189 0
 274 00d2 4023     		movs	r3, #64
 275 00d4 0993     		str	r3, [sp, #36]
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 276              		.loc 1 190 0
 277 00d6 2023     		movs	r3, #32
 278 00d8 0A93     		str	r3, [sp, #40]
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 279              		.loc 1 191 0
 280 00da 402D     		cmp	r5, #64
 281 00dc 03D9     		bls	.L10
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 282              		.loc 1 194 0
 283 00de 4FF48033 		mov	r3, #65536
 284 00e2 0B93     		str	r3, [sp, #44]
 285 00e4 01E0     		b	.L11
 286              	.L10:
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 287              		.loc 1 199 0
 288 00e6 0023     		movs	r3, #0
 289 00e8 0B93     		str	r3, [sp, #44]
 290              	.L11:
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 291              		.loc 1 201 0
 292 00ea 08A8     		add	r0, sp, #32
 293 00ec FFF7FEFF 		bl	HASH_Init
 294              	.LVL40:
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 295              		.loc 1 204 0
 296 00f0 BDF80800 		ldrh	r0, [sp, #8]
 297 00f4 80B2     		uxth	r0, r0
 298 00f6 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 299              	.LVL41:
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 300              		.loc 1 207 0
 301 00fa 0024     		movs	r4, #0
 302 00fc 04E0     		b	.L12
 303              	.LVL42:
 304              	.L13:
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 305              		.loc 1 209 0 discriminator 2
 306 00fe 59F8040B 		ldr	r0, [r9], #4
 307              	.LVL43:
 308 0102 FFF7FEFF 		bl	HASH_DataIn
 309              	.LVL44:
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 310              		.loc 1 207 0 discriminator 2
 311 0106 0434     		adds	r4, r4, #4
 312              	.LVL45:
 313              	.L12:
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 314              		.loc 1 207 0 is_stmt 0 discriminator 1
 315 0108 AC42     		cmp	r4, r5
 316 010a F8D3     		bcc	.L13
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 317              		.loc 1 214 0 is_stmt 1
 318 010c FFF7FEFF 		bl	HASH_StartDigest
 319              	.LVL46:
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   do
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 320              		.loc 1 219 0
 321 0110 4FF00809 		mov	r9, #8
 322              	.LVL47:
 323              	.L15:
 324              		.loc 1 219 0 is_stmt 0 discriminator 1
 325 0114 4846     		mov	r0, r9
 326 0116 FFF7FEFF 		bl	HASH_GetFlagStatus
 327              	.LVL48:
 328 011a 0346     		mov	r3, r0
 329              	.LVL49:
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter++;
 330              		.loc 1 220 0 is_stmt 1 discriminator 1
 331 011c 019C     		ldr	r4, [sp, #4]
 332 011e 0134     		adds	r4, r4, #1
 333 0120 0194     		str	r4, [sp, #4]
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 334              		.loc 1 221 0 discriminator 1
 335 0122 019C     		ldr	r4, [sp, #4]
 336 0124 B4F5803F 		cmp	r4, #65536
 337 0128 01D0     		beq	.L14
 338 012a 0028     		cmp	r0, #0
 339 012c F2D1     		bne	.L15
 340              	.L14:
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 341              		.loc 1 223 0
 342 012e 002B     		cmp	r3, #0
 343 0130 57D1     		bne	.L25
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 344              		.loc 1 230 0
 345 0132 BDF80A00 		ldrh	r0, [sp, #10]
 346              	.LVL50:
 347 0136 80B2     		uxth	r0, r0
 348 0138 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 349              	.LVL51:
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 350              		.loc 1 233 0
 351 013c 0024     		movs	r4, #0
 352 013e 04E0     		b	.L17
 353              	.LVL52:
 354              	.L18:
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 355              		.loc 1 235 0 discriminator 2
 356 0140 56F8040B 		ldr	r0, [r6], #4
 357              	.LVL53:
 358 0144 FFF7FEFF 		bl	HASH_DataIn
 359              	.LVL54:
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 360              		.loc 1 233 0 discriminator 2
 361 0148 0434     		adds	r4, r4, #4
 362              	.LVL55:
 363              	.L17:
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 364              		.loc 1 233 0 is_stmt 0 discriminator 1
 365 014a BC42     		cmp	r4, r7
 366 014c F8D3     		bcc	.L18
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 367              		.loc 1 240 0 is_stmt 1
 368 014e FFF7FEFF 		bl	HASH_StartDigest
 369              	.LVL56:
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter =0;
 370              		.loc 1 244 0
 371 0152 0023     		movs	r3, #0
 372 0154 0193     		str	r3, [sp, #4]
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     do
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 373              		.loc 1 247 0
 374 0156 0824     		movs	r4, #8
 375              	.LVL57:
 376              	.L20:
 377              		.loc 1 247 0 is_stmt 0 discriminator 1
 378 0158 2046     		mov	r0, r4
 379 015a FFF7FEFF 		bl	HASH_GetFlagStatus
 380              	.LVL58:
 381 015e 0246     		mov	r2, r0
 382              	.LVL59:
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       counter++;
 383              		.loc 1 248 0 is_stmt 1 discriminator 1
 384 0160 019B     		ldr	r3, [sp, #4]
 385 0162 0133     		adds	r3, r3, #1
 386 0164 0193     		str	r3, [sp, #4]
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 387              		.loc 1 249 0 discriminator 1
 388 0166 019B     		ldr	r3, [sp, #4]
 389 0168 B3F5803F 		cmp	r3, #65536
 390 016c 01D0     		beq	.L19
 391 016e 0028     		cmp	r0, #0
 392 0170 F2D1     		bne	.L20
 393              	.L19:
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 394              		.loc 1 251 0
 395 0172 002A     		cmp	r2, #0
 396 0174 37D1     		bne	.L26
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     else
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {  
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 397              		.loc 1 258 0
 398 0176 BDF80800 		ldrh	r0, [sp, #8]
 399              	.LVL60:
 400 017a 80B2     		uxth	r0, r0
 401 017c FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 402              	.LVL61:
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Write the Key */
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 403              		.loc 1 262 0
 404 0180 0024     		movs	r4, #0
 405 0182 04E0     		b	.L21
 406              	.LVL62:
 407              	.L22:
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 408              		.loc 1 264 0 discriminator 2
 409 0184 58F8040B 		ldr	r0, [r8], #4
 410              	.LVL63:
 411 0188 FFF7FEFF 		bl	HASH_DataIn
 412              	.LVL64:
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 413              		.loc 1 262 0 discriminator 2
 414 018c 0434     		adds	r4, r4, #4
 415              	.LVL65:
 416              	.L21:
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 417              		.loc 1 262 0 is_stmt 0 discriminator 1
 418 018e AC42     		cmp	r4, r5
 419 0190 F8D3     		bcc	.L22
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 420              		.loc 1 269 0 is_stmt 1
 421 0192 FFF7FEFF 		bl	HASH_StartDigest
 422              	.LVL66:
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       counter =0;
 423              		.loc 1 272 0
 424 0196 0023     		movs	r3, #0
 425 0198 0193     		str	r3, [sp, #4]
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       do
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 426              		.loc 1 275 0
 427 019a 0824     		movs	r4, #8
 428              	.LVL67:
 429              	.L24:
 430              		.loc 1 275 0 is_stmt 0 discriminator 1
 431 019c 2046     		mov	r0, r4
 432 019e FFF7FEFF 		bl	HASH_GetFlagStatus
 433              	.LVL68:
 434 01a2 0246     		mov	r2, r0
 435              	.LVL69:
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         counter++;
 436              		.loc 1 276 0 is_stmt 1 discriminator 1
 437 01a4 019B     		ldr	r3, [sp, #4]
 438 01a6 0133     		adds	r3, r3, #1
 439 01a8 0193     		str	r3, [sp, #4]
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 440              		.loc 1 277 0 discriminator 1
 441 01aa 019B     		ldr	r3, [sp, #4]
 442 01ac B3F5803F 		cmp	r3, #65536
 443 01b0 01D0     		beq	.L23
 444 01b2 0028     		cmp	r0, #0
 445 01b4 F2D1     		bne	.L24
 446              	.L23:
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 447              		.loc 1 279 0
 448 01b6 C2B9     		cbnz	r2, .L27
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       else
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
 449              		.loc 1 286 0
 450 01b8 03A8     		add	r0, sp, #12
 451              	.LVL70:
 452 01ba FFF7FEFF 		bl	HASH_GetDigest
 453              	.LVL71:
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 454              		.loc 1 287 0
 455 01be 039B     		ldr	r3, [sp, #12]
 456              	.LVL72:
 457              	.LBB32:
 458              	.LBB33:
 459              		.loc 2 352 0
 460              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 461 01c0 1BBA     		rev r3, r3
 462              	@ 0 "" 2
 463              	.LVL73:
 464              		.thumb
 465              	.LBE33:
 466              	.LBE32:
 467              		.loc 1 287 0
 468 01c2 149A     		ldr	r2, [sp, #80]
 469 01c4 1360     		str	r3, [r2]
 470              	.LVL74:
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 471              		.loc 1 289 0
 472 01c6 049B     		ldr	r3, [sp, #16]
 473              	.LVL75:
 474              	.LBB34:
 475              	.LBB35:
 476              		.loc 2 352 0
 477              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 478 01c8 1BBA     		rev r3, r3
 479              	@ 0 "" 2
 480              	.LVL76:
 481              		.thumb
 482              	.LBE35:
 483              	.LBE34:
 484              		.loc 1 289 0
 485 01ca 5360     		str	r3, [r2, #4]
 486              	.LVL77:
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 487              		.loc 1 291 0
 488 01cc 059B     		ldr	r3, [sp, #20]
 489              	.LVL78:
 490              	.LBB36:
 491              	.LBB37:
 492              		.loc 2 352 0
 493              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 494 01ce 1BBA     		rev r3, r3
 495              	@ 0 "" 2
 496              	.LVL79:
 497              		.thumb
 498              	.LBE37:
 499              	.LBE36:
 500              		.loc 1 291 0
 501 01d0 9360     		str	r3, [r2, #8]
 502              	.LVL80:
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 503              		.loc 1 293 0
 504 01d2 069B     		ldr	r3, [sp, #24]
 505              	.LVL81:
 506              	.LBB38:
 507              	.LBB39:
 508              		.loc 2 352 0
 509              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 510 01d4 1BBA     		rev r3, r3
 511              	@ 0 "" 2
 512              	.LVL82:
 513              		.thumb
 514              	.LBE39:
 515              	.LBE38:
 516              		.loc 1 293 0
 517 01d6 D360     		str	r3, [r2, #12]
 518              	.LVL83:
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 519              		.loc 1 295 0
 520 01d8 079B     		ldr	r3, [sp, #28]
 521              	.LVL84:
 522              	.LBB40:
 523              	.LBB41:
 524              		.loc 2 352 0
 525              	@ 352 "C:\Users\Filip\Git\STM32F4Discovery\Eclipse\WattMetr\CMSIS\Include/core_cmInstr.h" 1
 526 01da 1BBA     		rev r3, r3
 527              	@ 0 "" 2
 528              	.LVL85:
 529              		.thumb
 530              	.LBE41:
 531              	.LBE40:
 532              		.loc 1 295 0
 533 01dc 1361     		str	r3, [r2, #16]
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 534              		.loc 1 173 0
 535 01de 0120     		movs	r0, #1
 536 01e0 04E0     		b	.L16
 537              	.LVL86:
 538              	.L25:
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 539              		.loc 1 225 0
 540 01e2 0020     		movs	r0, #0
 541              	.LVL87:
 542 01e4 02E0     		b	.L16
 543              	.LVL88:
 544              	.L26:
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 545              		.loc 1 253 0
 546 01e6 0020     		movs	r0, #0
 547              	.LVL89:
 548 01e8 00E0     		b	.L16
 549              	.LVL90:
 550              	.L27:
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 551              		.loc 1 281 0
 552 01ea 0020     		movs	r0, #0
 553              	.LVL91:
 554              	.L16:
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }  
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   return status;  
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** }
 555              		.loc 1 300 0
 556 01ec 0DB0     		add	sp, sp, #52
 557              		@ sp needed
 558 01ee BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 559              		.cfi_endproc
 560              	.LFE111:
 562              	.Letext0:
 563              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\mach
 564              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q2\\arm-none-eabi\\include\\stdi
 565              		.file 5 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx\\Include/stm32f4xx.
 566              		.file 6 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\STM32F4xx_StdPeriph_Driver\\i
 567              		.file 7 "C:\\Users\\Filip\\Git\\STM32F4Discovery\\Eclipse\\WattMetr\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash_sha1.c
C:\Users\Filip\AppData\Local\Temp\cc5dfyCd.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\cc5dfyCd.s:23     .text:00000000 HASH_SHA1
C:\Users\Filip\AppData\Local\Temp\cc5dfyCd.s:223    .text:0000009c HMAC_SHA1
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.1c01c98cf54d5aaab4df87c6bb476f00
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_hash.h.89.9ba18c49c32633e81d41c07ca4cb2830

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
