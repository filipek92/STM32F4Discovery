#include "main.h"

#define LED_R GPIO_Pin_14
#define LED_G GPIO_Pin_12
#define LED_B GPIO_Pin_15
#define LED_O GPIO_Pin_13

#define SETREG BSRRL
#define CLRREG BSRRH

extern volatile uint32_t Time;
uint32_t Last_Blink = 0;
uint32_t Last_Send = 0;

void proccess_rx(void);
void init_output(void);
void timer_init(void);

int main(void) {
	SysTick_Config(SystemCoreClock / 1000);
	STM_EVAL_LEDInit(LED3); // Oranzova
	STM_EVAL_LEDInit(LED4); // Zelena
	STM_EVAL_LEDInit(LED5); // Cervena
	STM_EVAL_LEDInit(LED6); // Modra

	GPIOD->BSRRL = LED_G;
	Delay(1000);
	GPIOD->BSRRH = LED_G;
	Init_Comunication();
	timer_init();

	USART_SendString(USART6, "\nSwitching Power Source Welcome\n");
	while (1) {
		GPIOD->ODR ^= LED_B;
		Delay(100);
	}
}

char rx_buffer[50];
char rx_last = 0;
uint8_t rx_pointer = 0;

void USART6_IRQHandler(void) {
	char ch;
	ch = USART_ReceiveData(USART6);

	if (ch == '\r' || ch == '\n') {
		if (rx_last != '\r') {
			rx_buffer[rx_pointer] = 0;
			proccess_rx();
			rx_pointer = 0;
		}
	} else if (ch == 8 && rx_pointer > 0) {
		rx_pointer--;
	} else {
		rx_buffer[rx_pointer++] = ch;
	}
	rx_last = ch;
}

void proccess_rx(void) {
	uint32_t u, i;

	switch (rx_buffer[0]) {
	case 'q':
		GPIO_SetBits(GPIOC, GPIO_Pin_0);
		USART_SendString(USART6, "PC0 ON\n");
		break;
	case 'a':
		GPIO_ResetBits(GPIOC, GPIO_Pin_0);
		USART_SendString(USART6, "PC0 OFF\n");
		break;
	default:
		USART_SendString(USART6, "Unknown command\n");
		break;
	}
}

void init_output(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void timer_init(void) {
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
	NVIC_EnableIRQ(TIM4_IRQn);

	//25Hz merení 200-1 50Hz 100-1 100Hz 50-1
	TIM_TimeBaseStructure.TIM_Period = 168 - 1; //336
	TIM_TimeBaseStructure.TIM_Prescaler = 5 - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOB, GPIO_Pin_6, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOB, GPIO_Pin_7, GPIO_AF_TIM4);


	TIM4->DIER = TIM_DIER_UIE;  // povolení prerušení

	TIM_Cmd(TIM4, ENABLE);
}

void TIM4_IRQHandler(void) {
	if (TIM4->SR & TIM_SR_UIF) // if UIF flag is set
	{
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
		GPIOC->ODR ^= GPIO_Pin_5;
	}
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t* file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while (1)
	{
	}
}
#endif
