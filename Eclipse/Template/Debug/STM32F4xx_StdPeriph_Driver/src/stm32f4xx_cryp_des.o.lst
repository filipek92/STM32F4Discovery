   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_des.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CRYP_DES_ECB
  20              		.thumb
  21              		.thumb_func
  23              	CRYP_DES_ECB:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          1. Enable The CRYP controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @endverbatim
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @attention
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */ 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @verbatim   
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                           High Level DES functions
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @endverbatim
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  26              		.loc 1 96 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 48
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  32              		.cfi_def_cfa_offset 32
  33              		.cfi_offset 4, -32
  34              		.cfi_offset 5, -28
  35              		.cfi_offset 6, -24
  36              		.cfi_offset 7, -20
  37              		.cfi_offset 8, -16
  38              		.cfi_offset 9, -12
  39              		.cfi_offset 10, -8
  40              		.cfi_offset 14, -4
  41 0004 8CB0     		sub	sp, sp, #48
  42              		.cfi_def_cfa_offset 80
  43 0006 0646     		mov	r6, r0
  44 0008 0C46     		mov	r4, r1
  45 000a 9A46     		mov	r10, r3
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  46              		.loc 1 99 0
  47 000c 0023     		movs	r3, #0
  48              	.LVL1:
  49 000e 0193     		str	r3, [sp, #4]
  50              	.LVL2:
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  51              		.loc 1 103 0
  52 0010 1546     		mov	r5, r2
  53              	.LVL3:
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  54              		.loc 1 104 0
  55 0012 DDF85090 		ldr	r9, [sp, #80]
  56              	.LVL4:
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  57              		.loc 1 108 0
  58 0016 02A8     		add	r0, sp, #8
  59              	.LVL5:
  60 0018 FFF7FEFF 		bl	CRYP_KeyStructInit
  61              	.LVL6:
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  62              		.loc 1 111 0
  63 001c 012E     		cmp	r6, #1
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  64              		.loc 1 113 0
  65 001e 0CBF     		ite	eq
  66 0020 0023     		moveq	r3, #0
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {      
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  67              		.loc 1 117 0
  68 0022 0423     		movne	r3, #4
  69 0024 ADF82830 		strh	r3, [sp, #40]	@ movhi
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  70              		.loc 1 120 0
  71 0028 1023     		movs	r3, #16
  72 002a ADF82A30 		strh	r3, [sp, #42]	@ movhi
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  73              		.loc 1 121 0
  74 002e 8023     		movs	r3, #128
  75 0030 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  76              		.loc 1 122 0
  77 0034 0AA8     		add	r0, sp, #40
  78 0036 FFF7FEFF 		bl	CRYP_Init
  79              	.LVL7:
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  80              		.loc 1 125 0
  81 003a 2368     		ldr	r3, [r4]
  82              	.LVL8:
  83              	.LBB14:
  84              	.LBB15:
  85              		.file 2 "C:\\Users\\Filip\\Eclipse\\Template\\CMSIS\\Include/core_cmInstr.h"
   1:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 295:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 296:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 297:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 299:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 301:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 303:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 305:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 309:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 313:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 315:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 317:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 318:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 319:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 324:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 326:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 328:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 329:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 332:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 335:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 337:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** }
 339:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 340:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 343:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** 
 345:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****  */
 348:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h **** {
 350:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   
 352:C:\Users\Filip\Eclipse\Template\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  86              		.loc 2 352 0
  87              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
  88 003c 1BBA     		rev r3, r3
  89              	@ 0 "" 2
  90              	.LVL9:
  91              		.thumb
  92              	.LBE15:
  93              	.LBE14:
  94              		.loc 1 125 0
  95 003e 0493     		str	r3, [sp, #16]
  96              	.LVL10:
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  97              		.loc 1 127 0
  98 0040 6368     		ldr	r3, [r4, #4]
  99              	.LVL11:
 100              	.LBB16:
 101              	.LBB17:
 102              		.loc 2 352 0
 103              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
 104 0042 1BBA     		rev r3, r3
 105              	@ 0 "" 2
 106              	.LVL12:
 107              		.thumb
 108              	.LBE17:
 109              	.LBE16:
 110              		.loc 1 127 0
 111 0044 0593     		str	r3, [sp, #20]
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 112              		.loc 1 128 0
 113 0046 02A8     		add	r0, sp, #8
 114 0048 FFF7FEFF 		bl	CRYP_KeyInit
 115              	.LVL13:
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 116              		.loc 1 131 0
 117 004c FFF7FEFF 		bl	CRYP_FIFOFlush
 118              	.LVL14:
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 119              		.loc 1 134 0
 120 0050 0120     		movs	r0, #1
 121 0052 FFF7FEFF 		bl	CRYP_Cmd
 122              	.LVL15:
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 123              		.loc 1 136 0
 124 0056 0026     		movs	r6, #0
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 125              		.loc 1 101 0
 126 0058 0127     		movs	r7, #1
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Wait until the complete message has been processed */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 127              		.loc 1 146 0
 128 005a B046     		mov	r8, r6
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 129              		.loc 1 149 0
 130 005c 1024     		movs	r4, #16
 131              	.LVL16:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 132              		.loc 1 136 0
 133 005e 23E0     		b	.L4
 134              	.LVL17:
 135              	.L9:
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 136              		.loc 1 140 0
 137 0060 2868     		ldr	r0, [r5]
 138 0062 FFF7FEFF 		bl	CRYP_DataIn
 139              	.LVL18:
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 140              		.loc 1 142 0
 141 0066 6868     		ldr	r0, [r5, #4]
 142 0068 FFF7FEFF 		bl	CRYP_DataIn
 143              	.LVL19:
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 144              		.loc 1 143 0
 145 006c 0835     		adds	r5, r5, #8
 146              	.LVL20:
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 147              		.loc 1 146 0
 148 006e CDF80480 		str	r8, [sp, #4]
 149              	.L6:
 150              		.loc 1 149 0 discriminator 1
 151 0072 2046     		mov	r0, r4
 152 0074 FFF7FEFF 		bl	CRYP_GetFlagStatus
 153              	.LVL21:
 154 0078 0246     		mov	r2, r0
 155              	.LVL22:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 156              		.loc 1 150 0 discriminator 1
 157 007a 019B     		ldr	r3, [sp, #4]
 158 007c 0133     		adds	r3, r3, #1
 159 007e 0193     		str	r3, [sp, #4]
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 160              		.loc 1 151 0 discriminator 1
 161 0080 019B     		ldr	r3, [sp, #4]
 162 0082 B3F5803F 		cmp	r3, #65536
 163 0086 01D0     		beq	.L5
 164 0088 0028     		cmp	r0, #0
 165 008a F2D1     		bne	.L6
 166              	.L5:
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 167              		.loc 1 153 0
 168 008c 52B9     		cbnz	r2, .L10
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 169              		.loc 1 161 0
 170 008e FFF7FEFF 		bl	CRYP_DataOut
 171              	.LVL23:
 172 0092 C9F80000 		str	r0, [r9]
 173              	.LVL24:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 174              		.loc 1 163 0
 175 0096 FFF7FEFF 		bl	CRYP_DataOut
 176              	.LVL25:
 177 009a C9F80400 		str	r0, [r9, #4]
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 178              		.loc 1 164 0
 179 009e 09F10809 		add	r9, r9, #8
 180              	.LVL26:
 181 00a2 00E0     		b	.L7
 182              	.LVL27:
 183              	.L10:
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 184              		.loc 1 155 0
 185 00a4 4746     		mov	r7, r8
 186              	.LVL28:
 187              	.L7:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 188              		.loc 1 136 0
 189 00a6 0836     		adds	r6, r6, #8
 190              	.LVL29:
 191              	.L4:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 192              		.loc 1 136 0 is_stmt 0 discriminator 1
 193 00a8 5645     		cmp	r6, r10
 194 00aa 01D2     		bcs	.L8
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 195              		.loc 1 136 0 discriminator 2
 196 00ac 002F     		cmp	r7, #0
 197 00ae D7D1     		bne	.L9
 198              	.L8:
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 199              		.loc 1 169 0 is_stmt 1
 200 00b0 0020     		movs	r0, #0
 201 00b2 FFF7FEFF 		bl	CRYP_Cmd
 202              	.LVL30:
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 203              		.loc 1 172 0
 204 00b6 3846     		mov	r0, r7
 205 00b8 0CB0     		add	sp, sp, #48
 206              		@ sp needed
 207 00ba BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 208              		.cfi_endproc
 209              	.LFE110:
 211 00be 00BF     		.align	2
 212              		.global	CRYP_DES_CBC
 213              		.thumb
 214              		.thumb_func
 216              	CRYP_DES_CBC:
 217              	.LFB111:
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 218              		.loc 1 191 0
 219              		.cfi_startproc
 220              		@ args = 8, pretend = 0, frame = 64
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              	.LVL31:
 223 00c0 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 224              		.cfi_def_cfa_offset 32
 225              		.cfi_offset 4, -32
 226              		.cfi_offset 5, -28
 227              		.cfi_offset 6, -24
 228              		.cfi_offset 7, -20
 229              		.cfi_offset 8, -16
 230              		.cfi_offset 9, -12
 231              		.cfi_offset 10, -8
 232              		.cfi_offset 14, -4
 233 00c4 90B0     		sub	sp, sp, #64
 234              		.cfi_def_cfa_offset 96
 235 00c6 0746     		mov	r7, r0
 236 00c8 0E46     		mov	r6, r1
 237 00ca 1446     		mov	r4, r2
 238 00cc DDF860A0 		ldr	r10, [sp, #96]
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 239              		.loc 1 195 0
 240 00d0 0022     		movs	r2, #0
 241              	.LVL32:
 242 00d2 0192     		str	r2, [sp, #4]
 243              	.LVL33:
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 244              		.loc 1 199 0
 245 00d4 1D46     		mov	r5, r3
 246              	.LVL34:
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 247              		.loc 1 200 0
 248 00d6 DDF86490 		ldr	r9, [sp, #100]
 249              	.LVL35:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 250              		.loc 1 205 0
 251 00da 06A8     		add	r0, sp, #24
 252              	.LVL36:
 253 00dc FFF7FEFF 		bl	CRYP_KeyStructInit
 254              	.LVL37:
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 255              		.loc 1 208 0
 256 00e0 012F     		cmp	r7, #1
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 257              		.loc 1 210 0
 258 00e2 0CBF     		ite	eq
 259 00e4 0023     		moveq	r3, #0
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 260              		.loc 1 214 0
 261 00e6 0423     		movne	r3, #4
 262 00e8 ADF83830 		strh	r3, [sp, #56]	@ movhi
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 263              		.loc 1 217 0
 264 00ec 1823     		movs	r3, #24
 265 00ee ADF83A30 		strh	r3, [sp, #58]	@ movhi
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 266              		.loc 1 218 0
 267 00f2 8023     		movs	r3, #128
 268 00f4 ADF83C30 		strh	r3, [sp, #60]	@ movhi
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 269              		.loc 1 219 0
 270 00f8 0EA8     		add	r0, sp, #56
 271 00fa FFF7FEFF 		bl	CRYP_Init
 272              	.LVL38:
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 273              		.loc 1 222 0
 274 00fe 3368     		ldr	r3, [r6]
 275              	.LVL39:
 276              	.LBB18:
 277              	.LBB19:
 278              		.loc 2 352 0
 279              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
 280 0100 1BBA     		rev r3, r3
 281              	@ 0 "" 2
 282              	.LVL40:
 283              		.thumb
 284              	.LBE19:
 285              	.LBE18:
 286              		.loc 1 222 0
 287 0102 0893     		str	r3, [sp, #32]
 288              	.LVL41:
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 289              		.loc 1 224 0
 290 0104 7368     		ldr	r3, [r6, #4]
 291              	.LVL42:
 292              	.LBB20:
 293              	.LBB21:
 294              		.loc 2 352 0
 295              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
 296 0106 1BBA     		rev r3, r3
 297              	@ 0 "" 2
 298              	.LVL43:
 299              		.thumb
 300              	.LBE21:
 301              	.LBE20:
 302              		.loc 1 224 0
 303 0108 0993     		str	r3, [sp, #36]
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 304              		.loc 1 225 0
 305 010a 06A8     		add	r0, sp, #24
 306 010c FFF7FEFF 		bl	CRYP_KeyInit
 307              	.LVL44:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 308              		.loc 1 228 0
 309 0110 2368     		ldr	r3, [r4]
 310              	.LVL45:
 311              	.LBB22:
 312              	.LBB23:
 313              		.loc 2 352 0
 314              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
 315 0112 1BBA     		rev r3, r3
 316              	@ 0 "" 2
 317              	.LVL46:
 318              		.thumb
 319              	.LBE23:
 320              	.LBE22:
 321              		.loc 1 228 0
 322 0114 0293     		str	r3, [sp, #8]
 323              	.LVL47:
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 324              		.loc 1 230 0
 325 0116 6368     		ldr	r3, [r4, #4]
 326              	.LVL48:
 327              	.LBB24:
 328              	.LBB25:
 329              		.loc 2 352 0
 330              	@ 352 "C:\Users\Filip\Eclipse\Template\CMSIS\Include/core_cmInstr.h" 1
 331 0118 1BBA     		rev r3, r3
 332              	@ 0 "" 2
 333              	.LVL49:
 334              		.thumb
 335              	.LBE25:
 336              	.LBE24:
 337              		.loc 1 230 0
 338 011a 0393     		str	r3, [sp, #12]
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 339              		.loc 1 231 0
 340 011c 02A8     		add	r0, sp, #8
 341              	.LVL50:
 342 011e FFF7FEFF 		bl	CRYP_IVInit
 343              	.LVL51:
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 344              		.loc 1 234 0
 345 0122 FFF7FEFF 		bl	CRYP_FIFOFlush
 346              	.LVL52:
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 347              		.loc 1 237 0
 348 0126 0120     		movs	r0, #1
 349 0128 FFF7FEFF 		bl	CRYP_Cmd
 350              	.LVL53:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 351              		.loc 1 239 0
 352 012c 0026     		movs	r6, #0
 353              	.LVL54:
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 354              		.loc 1 197 0
 355 012e 0127     		movs	r7, #1
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Wait until the complete message has been processed */
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 356              		.loc 1 248 0
 357 0130 B046     		mov	r8, r6
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 358              		.loc 1 251 0
 359 0132 1024     		movs	r4, #16
 360              	.LVL55:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 361              		.loc 1 239 0
 362 0134 23E0     		b	.L15
 363              	.LVL56:
 364              	.L20:
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 365              		.loc 1 242 0
 366 0136 2868     		ldr	r0, [r5]
 367 0138 FFF7FEFF 		bl	CRYP_DataIn
 368              	.LVL57:
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 369              		.loc 1 244 0
 370 013c 6868     		ldr	r0, [r5, #4]
 371 013e FFF7FEFF 		bl	CRYP_DataIn
 372              	.LVL58:
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 373              		.loc 1 245 0
 374 0142 0835     		adds	r5, r5, #8
 375              	.LVL59:
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 376              		.loc 1 248 0
 377 0144 CDF80480 		str	r8, [sp, #4]
 378              	.L17:
 379              		.loc 1 251 0 discriminator 1
 380 0148 2046     		mov	r0, r4
 381 014a FFF7FEFF 		bl	CRYP_GetFlagStatus
 382              	.LVL60:
 383 014e 0246     		mov	r2, r0
 384              	.LVL61:
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 385              		.loc 1 252 0 discriminator 1
 386 0150 019B     		ldr	r3, [sp, #4]
 387 0152 0133     		adds	r3, r3, #1
 388 0154 0193     		str	r3, [sp, #4]
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 389              		.loc 1 253 0 discriminator 1
 390 0156 019B     		ldr	r3, [sp, #4]
 391 0158 B3F5803F 		cmp	r3, #65536
 392 015c 01D0     		beq	.L16
 393 015e 0028     		cmp	r0, #0
 394 0160 F2D1     		bne	.L17
 395              	.L16:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 396              		.loc 1 255 0
 397 0162 52B9     		cbnz	r2, .L21
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 398              		.loc 1 262 0
 399 0164 FFF7FEFF 		bl	CRYP_DataOut
 400              	.LVL62:
 401 0168 C9F80000 		str	r0, [r9]
 402              	.LVL63:
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 403              		.loc 1 264 0
 404 016c FFF7FEFF 		bl	CRYP_DataOut
 405              	.LVL64:
 406 0170 C9F80400 		str	r0, [r9, #4]
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 407              		.loc 1 265 0
 408 0174 09F10809 		add	r9, r9, #8
 409              	.LVL65:
 410 0178 00E0     		b	.L18
 411              	.LVL66:
 412              	.L21:
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 413              		.loc 1 257 0
 414 017a 4746     		mov	r7, r8
 415              	.LVL67:
 416              	.L18:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 417              		.loc 1 239 0
 418 017c 0836     		adds	r6, r6, #8
 419              	.LVL68:
 420              	.L15:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 421              		.loc 1 239 0 is_stmt 0 discriminator 1
 422 017e 5645     		cmp	r6, r10
 423 0180 01D2     		bcs	.L19
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 424              		.loc 1 239 0 discriminator 2
 425 0182 002F     		cmp	r7, #0
 426 0184 D7D1     		bne	.L20
 427              	.L19:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 428              		.loc 1 270 0 is_stmt 1
 429 0186 0020     		movs	r0, #0
 430 0188 FFF7FEFF 		bl	CRYP_Cmd
 431              	.LVL69:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 432              		.loc 1 273 0
 433 018c 3846     		mov	r0, r7
 434 018e 10B0     		add	sp, sp, #64
 435              		@ sp needed
 436 0190 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 437              		.cfi_endproc
 438              	.LFE111:
 440              	.Letext0:
 441              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\mach
 442              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\stdi
 443              		.file 5 "C:\\Users\\Filip\\Eclipse\\Template\\STM32F4xx\\Include/stm32f4xx.h"
 444              		.file 6 "C:\\Users\\Filip\\Eclipse\\Template\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_cryp.h"
 445              		.file 7 "C:\\Users\\Filip\\Eclipse\\Template\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_des.c
C:\Users\Filip\AppData\Local\Temp\ccTcXAiE.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\ccTcXAiE.s:23     .text:00000000 CRYP_DES_ECB
C:\Users\Filip\AppData\Local\Temp\ccTcXAiE.s:216    .text:000000c0 CRYP_DES_CBC
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.2bb9d917777380cc06007ef782f1739f
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_cryp.h.119.d9dc2f059ca5f1650f6b9481919a2fab

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
