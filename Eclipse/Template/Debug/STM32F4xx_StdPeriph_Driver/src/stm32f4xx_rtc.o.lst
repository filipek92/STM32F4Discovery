   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.thumb
  20              		.thumb_func
  22              	RTC_ByteToBcd2:
  23              	.LFB165:
  24              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
1780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
1902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
2431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
2446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
2455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
2460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  25              		.loc 1 2696 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  31              		.loc 1 2697 0
  32 0000 0023     		movs	r3, #0
2698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  33              		.loc 1 2699 0
  34 0002 03E0     		b	.L2
  35              	.LVL1:
  36              	.L3:
2700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
  37              		.loc 1 2701 0
  38 0004 0133     		adds	r3, r3, #1
  39              	.LVL2:
  40 0006 DBB2     		uxtb	r3, r3
  41              	.LVL3:
2702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
  42              		.loc 1 2702 0
  43 0008 0A38     		subs	r0, r0, #10
  44              	.LVL4:
  45 000a C0B2     		uxtb	r0, r0
  46              	.LVL5:
  47              	.L2:
2699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  48              		.loc 1 2699 0 discriminator 1
  49 000c 0928     		cmp	r0, #9
  50 000e F9D8     		bhi	.L3
2703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  51              		.loc 1 2705 0
  52 0010 1B01     		lsls	r3, r3, #4
  53              	.LVL6:
  54 0012 DBB2     		uxtb	r3, r3
2706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  55              		.loc 1 2706 0
  56 0014 1843     		orrs	r0, r0, r3
  57              	.LVL7:
  58 0016 7047     		bx	lr
  59              		.cfi_endproc
  60              	.LFE165:
  62              		.align	2
  63              		.thumb
  64              		.thumb_func
  66              	RTC_Bcd2ToByte:
  67              	.LFB166:
2707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  68              		.loc 1 2714 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL8:
2715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  74              		.loc 1 2716 0
  75 0018 0309     		lsrs	r3, r0, #4
  76 001a 03EB8303 		add	r3, r3, r3, lsl #2
  77              	.LVL9:
2717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  78              		.loc 1 2717 0
  79 001e 00F00F00 		and	r0, r0, #15
  80              	.LVL10:
  81 0022 00EB4300 		add	r0, r0, r3, lsl #1
2718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  82              		.loc 1 2718 0
  83 0026 C0B2     		uxtb	r0, r0
  84 0028 7047     		bx	lr
  85              		.cfi_endproc
  86              	.LFE166:
  88 002a 00BF     		.align	2
  89              		.global	RTC_StructInit
  90              		.thumb
  91              		.thumb_func
  93              	RTC_StructInit:
  94              	.LFB112:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  95              		.loc 1 492 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.LVL11:
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 101              		.loc 1 494 0
 102 002c 0023     		movs	r3, #0
 103 002e 0360     		str	r3, [r0]
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 104              		.loc 1 497 0
 105 0030 7F23     		movs	r3, #127
 106 0032 4360     		str	r3, [r0, #4]
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 107              		.loc 1 500 0
 108 0034 FF23     		movs	r3, #255
 109 0036 8360     		str	r3, [r0, #8]
 110 0038 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE112:
 114 003a 00BF     		.align	2
 115              		.global	RTC_WriteProtectionCmd
 116              		.thumb
 117              		.thumb_func
 119              	RTC_WriteProtectionCmd:
 120              	.LFB113:
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 121              		.loc 1 514 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.LVL12:
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 127              		.loc 1 518 0
 128 003c 18B1     		cbz	r0, .L7
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 129              		.loc 1 521 0
 130 003e FF22     		movs	r2, #255
 131 0040 044B     		ldr	r3, .L9
 132 0042 5A62     		str	r2, [r3, #36]
 133 0044 7047     		bx	lr
 134              	.L7:
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 135              		.loc 1 526 0
 136 0046 034B     		ldr	r3, .L9
 137 0048 CA22     		movs	r2, #202
 138 004a 5A62     		str	r2, [r3, #36]
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 139              		.loc 1 527 0
 140 004c 5322     		movs	r2, #83
 141 004e 5A62     		str	r2, [r3, #36]
 142 0050 7047     		bx	lr
 143              	.L10:
 144 0052 00BF     		.align	2
 145              	.L9:
 146 0054 00280040 		.word	1073752064
 147              		.cfi_endproc
 148              	.LFE113:
 150              		.align	2
 151              		.global	RTC_EnterInitMode
 152              		.thumb
 153              		.thumb_func
 155              	RTC_EnterInitMode:
 156              	.LFB114:
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 157              		.loc 1 541 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162 0058 82B0     		sub	sp, sp, #8
 163              		.cfi_def_cfa_offset 8
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 164              		.loc 1 542 0
 165 005a 0023     		movs	r3, #0
 166 005c 0193     		str	r3, [sp, #4]
 167              	.LVL13:
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 168              		.loc 1 547 0
 169 005e 104B     		ldr	r3, .L18
 170 0060 DB68     		ldr	r3, [r3, #12]
 171 0062 13F0400F 		tst	r3, #64
 172 0066 18D1     		bne	.L15
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 173              		.loc 1 550 0
 174 0068 4FF0FF32 		mov	r2, #-1
 175 006c 0C4B     		ldr	r3, .L18
 176 006e DA60     		str	r2, [r3, #12]
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 177              		.loc 1 555 0
 178 0070 1946     		mov	r1, r3
 179              	.LVL14:
 180              	.L14:
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 181              		.loc 1 555 0 is_stmt 0 discriminator 1
 182 0072 CB68     		ldr	r3, [r1, #12]
 183 0074 03F04002 		and	r2, r3, #64
 184              	.LVL15:
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 185              		.loc 1 556 0 is_stmt 1 discriminator 1
 186 0078 019B     		ldr	r3, [sp, #4]
 187 007a 0133     		adds	r3, r3, #1
 188 007c 0193     		str	r3, [sp, #4]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 189              		.loc 1 557 0 discriminator 1
 190 007e 019B     		ldr	r3, [sp, #4]
 191 0080 B3F5803F 		cmp	r3, #65536
 192 0084 01D0     		beq	.L13
 193 0086 002A     		cmp	r2, #0
 194 0088 F3D0     		beq	.L14
 195              	.L13:
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 196              		.loc 1 559 0
 197 008a 054B     		ldr	r3, .L18
 198 008c D868     		ldr	r0, [r3, #12]
 199 008e 00F04000 		and	r0, r0, #64
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 200              		.loc 1 561 0
 201 0092 0030     		adds	r0, r0, #0
 202 0094 18BF     		it	ne
 203 0096 0120     		movne	r0, #1
 204 0098 00E0     		b	.L12
 205              	.LVL16:
 206              	.L15:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 207              		.loc 1 570 0
 208 009a 0120     		movs	r0, #1
 209              	.LVL17:
 210              	.L12:
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 211              		.loc 1 574 0
 212 009c 02B0     		add	sp, sp, #8
 213              		@ sp needed
 214 009e 7047     		bx	lr
 215              	.L19:
 216              		.align	2
 217              	.L18:
 218 00a0 00280040 		.word	1073752064
 219              		.cfi_endproc
 220              	.LFE114:
 222              		.align	2
 223              		.global	RTC_ExitInitMode
 224              		.thumb
 225              		.thumb_func
 227              	RTC_ExitInitMode:
 228              	.LFB115:
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 229              		.loc 1 586 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 234              		.loc 1 588 0
 235 00a4 024B     		ldr	r3, .L21
 236 00a6 DA68     		ldr	r2, [r3, #12]
 237 00a8 22F08002 		bic	r2, r2, #128
 238 00ac DA60     		str	r2, [r3, #12]
 239 00ae 7047     		bx	lr
 240              	.L22:
 241              		.align	2
 242              	.L21:
 243 00b0 00280040 		.word	1073752064
 244              		.cfi_endproc
 245              	.LFE115:
 247              		.align	2
 248              		.global	RTC_Init
 249              		.thumb
 250              		.thumb_func
 252              	RTC_Init:
 253              	.LFB111:
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 254              		.loc 1 446 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              	.LVL18:
 259 00b4 10B5     		push	{r4, lr}
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 4, -8
 262              		.cfi_offset 14, -4
 263 00b6 0446     		mov	r4, r0
 264              	.LVL19:
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 265              		.loc 1 455 0
 266 00b8 104B     		ldr	r3, .L26
 267 00ba CA22     		movs	r2, #202
 268 00bc 5A62     		str	r2, [r3, #36]
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 269              		.loc 1 456 0
 270 00be 5322     		movs	r2, #83
 271 00c0 5A62     		str	r2, [r3, #36]
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 272              		.loc 1 459 0
 273 00c2 FFF7FEFF 		bl	RTC_EnterInitMode
 274              	.LVL20:
 275 00c6 98B1     		cbz	r0, .L25
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 276              		.loc 1 466 0
 277 00c8 0C4B     		ldr	r3, .L26
 278 00ca 9A68     		ldr	r2, [r3, #8]
 279 00cc 22F04002 		bic	r2, r2, #64
 280 00d0 9A60     		str	r2, [r3, #8]
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 281              		.loc 1 468 0
 282 00d2 9968     		ldr	r1, [r3, #8]
 283 00d4 2268     		ldr	r2, [r4]
 284 00d6 0A43     		orrs	r2, r2, r1
 285 00d8 9A60     		str	r2, [r3, #8]
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 286              		.loc 1 471 0
 287 00da A268     		ldr	r2, [r4, #8]
 288 00dc 1A61     		str	r2, [r3, #16]
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 289              		.loc 1 472 0
 290 00de 1A69     		ldr	r2, [r3, #16]
 291 00e0 6168     		ldr	r1, [r4, #4]
 292 00e2 42EA0142 		orr	r2, r2, r1, lsl #16
 293 00e6 1A61     		str	r2, [r3, #16]
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 294              		.loc 1 475 0
 295 00e8 FFF7FEFF 		bl	RTC_ExitInitMode
 296              	.LVL21:
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 297              		.loc 1 477 0
 298 00ec 0120     		movs	r0, #1
 299 00ee 00E0     		b	.L24
 300              	.LVL22:
 301              	.L25:
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 302              		.loc 1 461 0
 303 00f0 0020     		movs	r0, #0
 304              	.LVL23:
 305              	.L24:
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 306              		.loc 1 480 0
 307 00f2 FF22     		movs	r2, #255
 308 00f4 014B     		ldr	r3, .L26
 309 00f6 5A62     		str	r2, [r3, #36]
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 310              		.loc 1 483 0
 311 00f8 10BD     		pop	{r4, pc}
 312              	.LVL24:
 313              	.L27:
 314 00fa 00BF     		.align	2
 315              	.L26:
 316 00fc 00280040 		.word	1073752064
 317              		.cfi_endproc
 318              	.LFE111:
 320              		.align	2
 321              		.global	RTC_WaitForSynchro
 322              		.thumb
 323              		.thumb_func
 325              	RTC_WaitForSynchro:
 326              	.LFB116:
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 327              		.loc 1 608 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0100 82B0     		sub	sp, sp, #8
 333              		.cfi_def_cfa_offset 8
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 334              		.loc 1 609 0
 335 0102 0023     		movs	r3, #0
 336 0104 0193     		str	r3, [sp, #4]
 337              	.LVL25:
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 338              		.loc 1 614 0
 339 0106 104B     		ldr	r3, .L34
 340 0108 CA22     		movs	r2, #202
 341 010a 5A62     		str	r2, [r3, #36]
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 342              		.loc 1 615 0
 343 010c 5322     		movs	r2, #83
 344 010e 5A62     		str	r2, [r3, #36]
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 345              		.loc 1 618 0
 346 0110 DA68     		ldr	r2, [r3, #12]
 347 0112 22F0A002 		bic	r2, r2, #160
 348 0116 DA60     		str	r2, [r3, #12]
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 349              		.loc 1 623 0
 350 0118 1946     		mov	r1, r3
 351              	.LVL26:
 352              	.L30:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 353              		.loc 1 623 0 is_stmt 0 discriminator 1
 354 011a CB68     		ldr	r3, [r1, #12]
 355 011c 03F02002 		and	r2, r3, #32
 356              	.LVL27:
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 357              		.loc 1 624 0 is_stmt 1 discriminator 1
 358 0120 019B     		ldr	r3, [sp, #4]
 359 0122 0133     		adds	r3, r3, #1
 360 0124 0193     		str	r3, [sp, #4]
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 361              		.loc 1 625 0 discriminator 1
 362 0126 019B     		ldr	r3, [sp, #4]
 363 0128 B3F5003F 		cmp	r3, #131072
 364 012c 01D0     		beq	.L29
 365 012e 002A     		cmp	r2, #0
 366 0130 F3D0     		beq	.L30
 367              	.L29:
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 368              		.loc 1 627 0
 369 0132 054B     		ldr	r3, .L34
 370 0134 D868     		ldr	r0, [r3, #12]
 371 0136 00F02000 		and	r0, r0, #32
 372              	.LVL28:
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 373              		.loc 1 637 0
 374 013a FF22     		movs	r2, #255
 375              	.LVL29:
 376 013c 5A62     		str	r2, [r3, #36]
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 377              		.loc 1 640 0
 378 013e 0030     		adds	r0, r0, #0
 379 0140 18BF     		it	ne
 380 0142 0120     		movne	r0, #1
 381              	.LVL30:
 382 0144 02B0     		add	sp, sp, #8
 383              		@ sp needed
 384 0146 7047     		bx	lr
 385              	.L35:
 386              		.align	2
 387              	.L34:
 388 0148 00280040 		.word	1073752064
 389              		.cfi_endproc
 390              	.LFE116:
 392              		.align	2
 393              		.global	RTC_DeInit
 394              		.thumb
 395              		.thumb_func
 397              	RTC_DeInit:
 398              	.LFB110:
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 399              		.loc 1 368 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 8
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 014c 00B5     		push	{lr}
 404              		.cfi_def_cfa_offset 4
 405              		.cfi_offset 14, -4
 406 014e 83B0     		sub	sp, sp, #12
 407              		.cfi_def_cfa_offset 16
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 408              		.loc 1 369 0
 409 0150 0023     		movs	r3, #0
 410 0152 0193     		str	r3, [sp, #4]
 411              	.LVL31:
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 412              		.loc 1 374 0
 413 0154 204B     		ldr	r3, .L44
 414 0156 CA22     		movs	r2, #202
 415 0158 5A62     		str	r2, [r3, #36]
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 416              		.loc 1 375 0
 417 015a 5322     		movs	r2, #83
 418 015c 5A62     		str	r2, [r3, #36]
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 419              		.loc 1 378 0
 420 015e FFF7FEFF 		bl	RTC_EnterInitMode
 421              	.LVL32:
 422 0162 0028     		cmp	r0, #0
 423 0164 2FD0     		beq	.L40
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 424              		.loc 1 385 0
 425 0166 1C4B     		ldr	r3, .L44
 426 0168 0022     		movs	r2, #0
 427 016a 1A60     		str	r2, [r3]
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 428              		.loc 1 386 0
 429 016c 42F20112 		movw	r2, #8449
 430 0170 5A60     		str	r2, [r3, #4]
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 431              		.loc 1 388 0
 432 0172 9A68     		ldr	r2, [r3, #8]
 433 0174 02F00702 		and	r2, r2, #7
 434 0178 9A60     		str	r2, [r3, #8]
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 435              		.loc 1 393 0
 436 017a 1946     		mov	r1, r3
 437              	.LVL33:
 438              	.L39:
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 439              		.loc 1 393 0 is_stmt 0 discriminator 1
 440 017c CB68     		ldr	r3, [r1, #12]
 441 017e 03F00402 		and	r2, r3, #4
 442              	.LVL34:
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 443              		.loc 1 394 0 is_stmt 1 discriminator 1
 444 0182 019B     		ldr	r3, [sp, #4]
 445 0184 0133     		adds	r3, r3, #1
 446 0186 0193     		str	r3, [sp, #4]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 447              		.loc 1 395 0 discriminator 1
 448 0188 019B     		ldr	r3, [sp, #4]
 449 018a B3F5803F 		cmp	r3, #65536
 450 018e 01D0     		beq	.L38
 451 0190 002A     		cmp	r2, #0
 452 0192 F3D0     		beq	.L39
 453              	.L38:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 454              		.loc 1 397 0
 455 0194 104B     		ldr	r3, .L44
 456 0196 DB68     		ldr	r3, [r3, #12]
 457 0198 13F0040F 		tst	r3, #4
 458 019c 15D0     		beq	.L41
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 459              		.loc 1 404 0
 460 019e 0E4B     		ldr	r3, .L44
 461 01a0 9A68     		ldr	r2, [r3, #8]
 462              	.LVL35:
 463 01a2 0022     		movs	r2, #0
 464 01a4 9A60     		str	r2, [r3, #8]
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 465              		.loc 1 405 0
 466 01a6 4FF6FF71 		movw	r1, #65535
 467 01aa 5961     		str	r1, [r3, #20]
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 468              		.loc 1 406 0
 469 01ac 0B49     		ldr	r1, .L44+4
 470 01ae 1961     		str	r1, [r3, #16]
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 471              		.loc 1 407 0
 472 01b0 9A61     		str	r2, [r3, #24]
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 473              		.loc 1 408 0
 474 01b2 DA61     		str	r2, [r3, #28]
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 475              		.loc 1 409 0
 476 01b4 1A62     		str	r2, [r3, #32]
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 477              		.loc 1 412 0
 478 01b6 DA60     		str	r2, [r3, #12]
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 479              		.loc 1 415 0
 480 01b8 1A64     		str	r2, [r3, #64]
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 481              		.loc 1 417 0
 482 01ba FFF7FEFF 		bl	RTC_WaitForSynchro
 483              	.LVL36:
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 484              		.loc 1 419 0
 485 01be 0030     		adds	r0, r0, #0
 486 01c0 18BF     		it	ne
 487 01c2 0120     		movne	r0, #1
 488 01c4 02E0     		b	.L37
 489              	.LVL37:
 490              	.L40:
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 491              		.loc 1 380 0
 492 01c6 0020     		movs	r0, #0
 493 01c8 00E0     		b	.L37
 494              	.LVL38:
 495              	.L41:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 496              		.loc 1 399 0
 497 01ca 0020     		movs	r0, #0
 498              	.LVL39:
 499              	.L37:
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 500              		.loc 1 429 0
 501 01cc FF22     		movs	r2, #255
 502 01ce 024B     		ldr	r3, .L44
 503 01d0 5A62     		str	r2, [r3, #36]
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 504              		.loc 1 432 0
 505 01d2 03B0     		add	sp, sp, #12
 506              		@ sp needed
 507 01d4 5DF804FB 		ldr	pc, [sp], #4
 508              	.L45:
 509              		.align	2
 510              	.L44:
 511 01d8 00280040 		.word	1073752064
 512 01dc FF007F00 		.word	8323327
 513              		.cfi_endproc
 514              	.LFE110:
 516              		.align	2
 517              		.global	RTC_RefClockCmd
 518              		.thumb
 519              		.thumb_func
 521              	RTC_RefClockCmd:
 522              	.LFB117:
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 523              		.loc 1 651 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              	.LVL40:
 528 01e0 10B5     		push	{r4, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 4, -8
 531              		.cfi_offset 14, -4
 532 01e2 0446     		mov	r4, r0
 533              	.LVL41:
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 534              		.loc 1 658 0
 535 01e4 0E4B     		ldr	r3, .L51
 536 01e6 CA22     		movs	r2, #202
 537 01e8 5A62     		str	r2, [r3, #36]
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 538              		.loc 1 659 0
 539 01ea 5322     		movs	r2, #83
 540 01ec 5A62     		str	r2, [r3, #36]
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 541              		.loc 1 662 0
 542 01ee FFF7FEFF 		bl	RTC_EnterInitMode
 543              	.LVL42:
 544 01f2 78B1     		cbz	r0, .L50
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 545              		.loc 1 668 0
 546 01f4 2CB1     		cbz	r4, .L48
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 547              		.loc 1 671 0
 548 01f6 0A4B     		ldr	r3, .L51
 549 01f8 9A68     		ldr	r2, [r3, #8]
 550 01fa 42F01002 		orr	r2, r2, #16
 551 01fe 9A60     		str	r2, [r3, #8]
 552 0200 04E0     		b	.L49
 553              	.L48:
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 554              		.loc 1 676 0
 555 0202 074B     		ldr	r3, .L51
 556 0204 9A68     		ldr	r2, [r3, #8]
 557 0206 22F01002 		bic	r2, r2, #16
 558 020a 9A60     		str	r2, [r3, #8]
 559              	.L49:
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 560              		.loc 1 679 0
 561 020c FFF7FEFF 		bl	RTC_ExitInitMode
 562              	.LVL43:
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 563              		.loc 1 681 0
 564 0210 0120     		movs	r0, #1
 565 0212 00E0     		b	.L47
 566              	.LVL44:
 567              	.L50:
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 568              		.loc 1 664 0
 569 0214 0020     		movs	r0, #0
 570              	.LVL45:
 571              	.L47:
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 572              		.loc 1 685 0
 573 0216 FF22     		movs	r2, #255
 574 0218 014B     		ldr	r3, .L51
 575 021a 5A62     		str	r2, [r3, #36]
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 576              		.loc 1 688 0
 577 021c 10BD     		pop	{r4, pc}
 578              	.L52:
 579 021e 00BF     		.align	2
 580              	.L51:
 581 0220 00280040 		.word	1073752064
 582              		.cfi_endproc
 583              	.LFE117:
 585              		.align	2
 586              		.global	RTC_BypassShadowCmd
 587              		.thumb
 588              		.thumb_func
 590              	RTC_BypassShadowCmd:
 591              	.LFB118:
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 592              		.loc 1 699 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597              	.LVL46:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 598              		.loc 1 704 0
 599 0224 094B     		ldr	r3, .L56
 600 0226 CA22     		movs	r2, #202
 601 0228 5A62     		str	r2, [r3, #36]
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 602              		.loc 1 705 0
 603 022a 5322     		movs	r2, #83
 604 022c 5A62     		str	r2, [r3, #36]
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 605              		.loc 1 707 0
 606 022e 20B1     		cbz	r0, .L54
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 607              		.loc 1 710 0
 608 0230 9A68     		ldr	r2, [r3, #8]
 609 0232 42F02002 		orr	r2, r2, #32
 610 0236 9A60     		str	r2, [r3, #8]
 611 0238 04E0     		b	.L55
 612              	.L54:
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 613              		.loc 1 715 0
 614 023a 044B     		ldr	r3, .L56
 615 023c 9A68     		ldr	r2, [r3, #8]
 616 023e 02F0DF02 		and	r2, r2, #223
 617 0242 9A60     		str	r2, [r3, #8]
 618              	.L55:
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 619              		.loc 1 719 0
 620 0244 FF22     		movs	r2, #255
 621 0246 014B     		ldr	r3, .L56
 622 0248 5A62     		str	r2, [r3, #36]
 623 024a 7047     		bx	lr
 624              	.L57:
 625              		.align	2
 626              	.L56:
 627 024c 00280040 		.word	1073752064
 628              		.cfi_endproc
 629              	.LFE118:
 631              		.align	2
 632              		.global	RTC_SetTime
 633              		.thumb
 634              		.thumb_func
 636              	RTC_SetTime:
 637              	.LFB119:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 638              		.loc 1 754 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              	.LVL47:
 643 0250 38B5     		push	{r3, r4, r5, lr}
 644              		.cfi_def_cfa_offset 16
 645              		.cfi_offset 3, -16
 646              		.cfi_offset 4, -12
 647              		.cfi_offset 5, -8
 648              		.cfi_offset 14, -4
 649 0252 0C46     		mov	r4, r1
 650              	.LVL48:
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 651              		.loc 1 761 0
 652 0254 0346     		mov	r3, r0
 653 0256 38B9     		cbnz	r0, .L59
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 654              		.loc 1 763 0
 655 0258 224A     		ldr	r2, .L66
 656 025a 9268     		ldr	r2, [r2, #8]
 657 025c 12F0400F 		tst	r2, #64
 658 0260 09D1     		bne	.L60
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 659              		.loc 1 770 0
 660 0262 0022     		movs	r2, #0
 661 0264 CA70     		strb	r2, [r1, #3]
 662 0266 06E0     		b	.L60
 663              	.L59:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 664              		.loc 1 778 0
 665 0268 1E4A     		ldr	r2, .L66
 666 026a 9268     		ldr	r2, [r2, #8]
 667 026c 12F0400F 		tst	r2, #64
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 668              		.loc 1 786 0
 669 0270 04BF     		itt	eq
 670 0272 0022     		moveq	r2, #0
 671 0274 CA70     		strbeq	r2, [r1, #3]
 672              	.L60:
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 673              		.loc 1 794 0
 674 0276 53B1     		cbz	r3, .L61
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 675              		.loc 1 796 0
 676 0278 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 677              		.loc 1 797 0
 678 027a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 679 027c 1B02     		lsls	r3, r3, #8
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 680              		.loc 1 796 0
 681 027e 43EA0243 		orr	r3, r3, r2, lsl #16
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 682              		.loc 1 798 0
 683 0282 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 684              		.loc 1 797 0
 685 0284 1343     		orrs	r3, r3, r2
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 686              		.loc 1 799 0
 687 0286 E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 688              		.loc 1 796 0
 689 0288 43EA0444 		orr	r4, r3, r4, lsl #16
 690              	.LVL49:
 691 028c 0FE0     		b	.L62
 692              	.LVL50:
 693              	.L61:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 694              		.loc 1 803 0
 695 028e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 696              	.LVL51:
 697 0290 FFF7B6FE 		bl	RTC_ByteToBcd2
 698              	.LVL52:
 699 0294 0504     		lsls	r5, r0, #16
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 700              		.loc 1 804 0
 701 0296 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 702 0298 FFF7B2FE 		bl	RTC_ByteToBcd2
 703              	.LVL53:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 704              		.loc 1 803 0
 705 029c 45EA0025 		orr	r5, r5, r0, lsl #8
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 706              		.loc 1 805 0
 707 02a0 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 708 02a2 FFF7ADFE 		bl	RTC_ByteToBcd2
 709              	.LVL54:
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 710              		.loc 1 804 0
 711 02a6 2843     		orrs	r0, r0, r5
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 712              		.loc 1 806 0
 713 02a8 E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 714              	.LVL55:
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 715              		.loc 1 803 0
 716 02aa 40EA0444 		orr	r4, r0, r4, lsl #16
 717              	.LVL56:
 718              	.L62:
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 719              		.loc 1 810 0
 720 02ae 0D4B     		ldr	r3, .L66
 721 02b0 CA22     		movs	r2, #202
 722 02b2 5A62     		str	r2, [r3, #36]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 723              		.loc 1 811 0
 724 02b4 5322     		movs	r2, #83
 725 02b6 5A62     		str	r2, [r3, #36]
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 726              		.loc 1 814 0
 727 02b8 FFF7FEFF 		bl	RTC_EnterInitMode
 728              	.LVL57:
 729 02bc 68B1     		cbz	r0, .L64
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 730              		.loc 1 821 0
 731 02be 04F07F33 		and	r3, r4, #2139062143
 732 02c2 23F0FE43 		bic	r3, r3, #2130706432
 733 02c6 074A     		ldr	r2, .L66
 734 02c8 1360     		str	r3, [r2]
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 735              		.loc 1 824 0
 736 02ca FFF7FEFF 		bl	RTC_ExitInitMode
 737              	.LVL58:
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 738              		.loc 1 826 0
 739 02ce FFF7FEFF 		bl	RTC_WaitForSynchro
 740              	.LVL59:
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 741              		.loc 1 828 0
 742 02d2 0030     		adds	r0, r0, #0
 743 02d4 18BF     		it	ne
 744 02d6 0120     		movne	r0, #1
 745 02d8 00E0     		b	.L63
 746              	.L64:
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 747              		.loc 1 816 0
 748 02da 0020     		movs	r0, #0
 749              	.L63:
 750              	.LVL60:
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 751              		.loc 1 837 0
 752 02dc FF22     		movs	r2, #255
 753 02de 014B     		ldr	r3, .L66
 754 02e0 5A62     		str	r2, [r3, #36]
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 755              		.loc 1 840 0
 756 02e2 38BD     		pop	{r3, r4, r5, pc}
 757              	.LVL61:
 758              	.L67:
 759              		.align	2
 760              	.L66:
 761 02e4 00280040 		.word	1073752064
 762              		.cfi_endproc
 763              	.LFE119:
 765              		.align	2
 766              		.global	RTC_TimeStructInit
 767              		.thumb
 768              		.thumb_func
 770              	RTC_TimeStructInit:
 771              	.LFB120:
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 772              		.loc 1 850 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 777              	.LVL62:
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 778              		.loc 1 852 0
 779 02e8 0023     		movs	r3, #0
 780 02ea C370     		strb	r3, [r0, #3]
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 781              		.loc 1 853 0
 782 02ec 0370     		strb	r3, [r0]
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 783              		.loc 1 854 0
 784 02ee 4370     		strb	r3, [r0, #1]
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 785              		.loc 1 855 0
 786 02f0 8370     		strb	r3, [r0, #2]
 787 02f2 7047     		bx	lr
 788              		.cfi_endproc
 789              	.LFE120:
 791              		.align	2
 792              		.global	RTC_GetTime
 793              		.thumb
 794              		.thumb_func
 796              	RTC_GetTime:
 797              	.LFB121:
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 798              		.loc 1 869 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              	.LVL63:
 803 02f4 70B5     		push	{r4, r5, r6, lr}
 804              		.cfi_def_cfa_offset 16
 805              		.cfi_offset 4, -16
 806              		.cfi_offset 5, -12
 807              		.cfi_offset 6, -8
 808              		.cfi_offset 14, -4
 809 02f6 0C46     		mov	r4, r1
 810              	.LVL64:
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 811              		.loc 1 876 0
 812 02f8 0E4B     		ldr	r3, .L71
 813 02fa 1B68     		ldr	r3, [r3]
 814              	.LVL65:
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 815              		.loc 1 879 0
 816 02fc C3F30542 		ubfx	r2, r3, #16, #6
 817 0300 0A70     		strb	r2, [r1]
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 818              		.loc 1 880 0
 819 0302 C3F30626 		ubfx	r6, r3, #8, #7
 820 0306 4E70     		strb	r6, [r1, #1]
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 821              		.loc 1 881 0
 822 0308 03F07F05 		and	r5, r3, #127
 823 030c 8D70     		strb	r5, [r1, #2]
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 824              		.loc 1 882 0
 825 030e 03F48003 		and	r3, r3, #4194304
 826              	.LVL66:
 827 0312 1B0C     		lsrs	r3, r3, #16
 828 0314 CB70     		strb	r3, [r1, #3]
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 829              		.loc 1 885 0
 830 0316 58B9     		cbnz	r0, .L69
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 831              		.loc 1 888 0
 832 0318 1046     		mov	r0, r2
 833              	.LVL67:
 834 031a FFF77DFE 		bl	RTC_Bcd2ToByte
 835              	.LVL68:
 836 031e 2070     		strb	r0, [r4]
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 837              		.loc 1 889 0
 838 0320 3046     		mov	r0, r6
 839 0322 FFF779FE 		bl	RTC_Bcd2ToByte
 840              	.LVL69:
 841 0326 6070     		strb	r0, [r4, #1]
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 842              		.loc 1 890 0
 843 0328 2846     		mov	r0, r5
 844 032a FFF775FE 		bl	RTC_Bcd2ToByte
 845              	.LVL70:
 846 032e A070     		strb	r0, [r4, #2]
 847              	.L69:
 848 0330 70BD     		pop	{r4, r5, r6, pc}
 849              	.LVL71:
 850              	.L72:
 851 0332 00BF     		.align	2
 852              	.L71:
 853 0334 00280040 		.word	1073752064
 854              		.cfi_endproc
 855              	.LFE121:
 857              		.align	2
 858              		.global	RTC_GetSubSecond
 859              		.thumb
 860              		.thumb_func
 862              	RTC_GetSubSecond:
 863              	.LFB122:
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 864              		.loc 1 902 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              		@ link register save eliminated.
 869              	.LVL72:
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 870              		.loc 1 906 0
 871 0338 014B     		ldr	r3, .L74
 872 033a 986A     		ldr	r0, [r3, #40]
 873              	.LVL73:
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 874              		.loc 1 909 0
 875 033c 5B68     		ldr	r3, [r3, #4]
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 876              		.loc 1 912 0
 877 033e 7047     		bx	lr
 878              	.L75:
 879              		.align	2
 880              	.L74:
 881 0340 00280040 		.word	1073752064
 882              		.cfi_endproc
 883              	.LFE122:
 885              		.align	2
 886              		.global	RTC_SetDate
 887              		.thumb
 888              		.thumb_func
 890              	RTC_SetDate:
 891              	.LFB123:
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 892              		.loc 1 927 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              	.LVL74:
 897 0344 38B5     		push	{r3, r4, r5, lr}
 898              		.cfi_def_cfa_offset 16
 899              		.cfi_offset 3, -16
 900              		.cfi_offset 4, -12
 901              		.cfi_offset 5, -8
 902              		.cfi_offset 14, -4
 903 0346 0C46     		mov	r4, r1
 904              	.LVL75:
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 905              		.loc 1 934 0
 906 0348 0346     		mov	r3, r0
 907 034a 38B9     		cbnz	r0, .L77
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 908              		.loc 1 934 0 is_stmt 0 discriminator 1
 909 034c 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 910 034e 12F0100F 		tst	r2, #16
 911 0352 03D0     		beq	.L77
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 912              		.loc 1 936 0 is_stmt 1
 913 0354 22F01002 		bic	r2, r2, #16
 914 0358 0A32     		adds	r2, r2, #10
 915 035a 4A70     		strb	r2, [r1, #1]
 916              	.L77:
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 917              		.loc 1 955 0
 918 035c 53B1     		cbz	r3, .L78
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 919              		.loc 1 957 0
 920 035e E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 921              		.loc 1 958 0
 922 0360 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 923 0362 1B02     		lsls	r3, r3, #8
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 924              		.loc 1 957 0
 925 0364 43EA0243 		orr	r3, r3, r2, lsl #16
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 926              		.loc 1 959 0
 927 0368 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 928              		.loc 1 958 0
 929 036a 1343     		orrs	r3, r3, r2
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 930              		.loc 1 960 0
 931 036c 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 932              		.loc 1 957 0
 933 036e 43EA4434 		orr	r4, r3, r4, lsl #13
 934              	.LVL76:
 935 0372 0FE0     		b	.L79
 936              	.LVL77:
 937              	.L78:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 938              		.loc 1 964 0
 939 0374 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 940              	.LVL78:
 941 0376 FFF743FE 		bl	RTC_ByteToBcd2
 942              	.LVL79:
 943 037a 0504     		lsls	r5, r0, #16
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 944              		.loc 1 965 0
 945 037c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 946 037e FFF73FFE 		bl	RTC_ByteToBcd2
 947              	.LVL80:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 948              		.loc 1 964 0
 949 0382 45EA0025 		orr	r5, r5, r0, lsl #8
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 950              		.loc 1 966 0
 951 0386 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 952 0388 FFF73AFE 		bl	RTC_ByteToBcd2
 953              	.LVL81:
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 954              		.loc 1 965 0
 955 038c 2843     		orrs	r0, r0, r5
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 956              		.loc 1 967 0
 957 038e 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 958              	.LVL82:
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 959              		.loc 1 964 0
 960 0390 40EA4434 		orr	r4, r0, r4, lsl #13
 961              	.LVL83:
 962              	.L79:
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 963              		.loc 1 971 0
 964 0394 0D4B     		ldr	r3, .L83
 965 0396 CA22     		movs	r2, #202
 966 0398 5A62     		str	r2, [r3, #36]
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 967              		.loc 1 972 0
 968 039a 5322     		movs	r2, #83
 969 039c 5A62     		str	r2, [r3, #36]
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 970              		.loc 1 975 0
 971 039e FFF7FEFF 		bl	RTC_EnterInitMode
 972              	.LVL84:
 973 03a2 68B1     		cbz	r0, .L81
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 974              		.loc 1 982 0
 975 03a4 24F07F43 		bic	r3, r4, #-16777216
 976 03a8 23F0C003 		bic	r3, r3, #192
 977 03ac 074A     		ldr	r2, .L83
 978 03ae 5360     		str	r3, [r2, #4]
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 979              		.loc 1 985 0
 980 03b0 FFF7FEFF 		bl	RTC_ExitInitMode
 981              	.LVL85:
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 982              		.loc 1 987 0
 983 03b4 FFF7FEFF 		bl	RTC_WaitForSynchro
 984              	.LVL86:
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 985              		.loc 1 989 0
 986 03b8 0030     		adds	r0, r0, #0
 987 03ba 18BF     		it	ne
 988 03bc 0120     		movne	r0, #1
 989 03be 00E0     		b	.L80
 990              	.L81:
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 991              		.loc 1 977 0
 992 03c0 0020     		movs	r0, #0
 993              	.L80:
 994              	.LVL87:
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 995              		.loc 1 997 0
 996 03c2 FF22     		movs	r2, #255
 997 03c4 014B     		ldr	r3, .L83
 998 03c6 5A62     		str	r2, [r3, #36]
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 999              		.loc 1 1000 0
 1000 03c8 38BD     		pop	{r3, r4, r5, pc}
 1001              	.LVL88:
 1002              	.L84:
 1003 03ca 00BF     		.align	2
 1004              	.L83:
 1005 03cc 00280040 		.word	1073752064
 1006              		.cfi_endproc
 1007              	.LFE123:
 1009              		.align	2
 1010              		.global	RTC_DateStructInit
 1011              		.thumb
 1012              		.thumb_func
 1014              	RTC_DateStructInit:
 1015              	.LFB124:
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1016              		.loc 1 1010 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020              		@ link register save eliminated.
 1021              	.LVL89:
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1022              		.loc 1 1012 0
 1023 03d0 0123     		movs	r3, #1
 1024 03d2 0370     		strb	r3, [r0]
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1025              		.loc 1 1013 0
 1026 03d4 8370     		strb	r3, [r0, #2]
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1027              		.loc 1 1014 0
 1028 03d6 4370     		strb	r3, [r0, #1]
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1029              		.loc 1 1015 0
 1030 03d8 0023     		movs	r3, #0
 1031 03da C370     		strb	r3, [r0, #3]
 1032 03dc 7047     		bx	lr
 1033              		.cfi_endproc
 1034              	.LFE124:
 1036 03de 00BF     		.align	2
 1037              		.global	RTC_GetDate
 1038              		.thumb
 1039              		.thumb_func
 1041              	RTC_GetDate:
 1042              	.LFB125:
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1043              		.loc 1 1029 0
 1044              		.cfi_startproc
 1045              		@ args = 0, pretend = 0, frame = 0
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047              	.LVL90:
 1048 03e0 70B5     		push	{r4, r5, r6, lr}
 1049              		.cfi_def_cfa_offset 16
 1050              		.cfi_offset 4, -16
 1051              		.cfi_offset 5, -12
 1052              		.cfi_offset 6, -8
 1053              		.cfi_offset 14, -4
 1054 03e2 0C46     		mov	r4, r1
 1055              	.LVL91:
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1056              		.loc 1 1036 0
 1057 03e4 0D4B     		ldr	r3, .L88
 1058 03e6 5B68     		ldr	r3, [r3, #4]
 1059              	.LVL92:
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1060              		.loc 1 1039 0
 1061 03e8 C3F30742 		ubfx	r2, r3, #16, #8
 1062 03ec CA70     		strb	r2, [r1, #3]
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1063              		.loc 1 1040 0
 1064 03ee C3F30426 		ubfx	r6, r3, #8, #5
 1065 03f2 4E70     		strb	r6, [r1, #1]
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1066              		.loc 1 1041 0
 1067 03f4 03F03F05 		and	r5, r3, #63
 1068 03f8 8D70     		strb	r5, [r1, #2]
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1069              		.loc 1 1042 0
 1070 03fa C3F34233 		ubfx	r3, r3, #13, #3
 1071              	.LVL93:
 1072 03fe 0B70     		strb	r3, [r1]
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1073              		.loc 1 1045 0
 1074 0400 58B9     		cbnz	r0, .L86
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1075              		.loc 1 1048 0
 1076 0402 1046     		mov	r0, r2
 1077              	.LVL94:
 1078 0404 FFF708FE 		bl	RTC_Bcd2ToByte
 1079              	.LVL95:
 1080 0408 E070     		strb	r0, [r4, #3]
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1081              		.loc 1 1049 0
 1082 040a 3046     		mov	r0, r6
 1083 040c FFF704FE 		bl	RTC_Bcd2ToByte
 1084              	.LVL96:
 1085 0410 6070     		strb	r0, [r4, #1]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1086              		.loc 1 1050 0
 1087 0412 2846     		mov	r0, r5
 1088 0414 FFF700FE 		bl	RTC_Bcd2ToByte
 1089              	.LVL97:
 1090 0418 A070     		strb	r0, [r4, #2]
 1091              	.L86:
 1092 041a 70BD     		pop	{r4, r5, r6, pc}
 1093              	.LVL98:
 1094              	.L89:
 1095              		.align	2
 1096              	.L88:
 1097 041c 00280040 		.word	1073752064
 1098              		.cfi_endproc
 1099              	.LFE125:
 1101              		.align	2
 1102              		.global	RTC_SetAlarm
 1103              		.thumb
 1104              		.thumb_func
 1106              	RTC_SetAlarm:
 1107              	.LFB126:
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1108              		.loc 1 1089 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 1112              	.LVL99:
 1113 0420 70B5     		push	{r4, r5, r6, lr}
 1114              		.cfi_def_cfa_offset 16
 1115              		.cfi_offset 4, -16
 1116              		.cfi_offset 5, -12
 1117              		.cfi_offset 6, -8
 1118              		.cfi_offset 14, -4
 1119 0422 0D46     		mov	r5, r1
 1120 0424 1446     		mov	r4, r2
 1121              	.LVL100:
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1122              		.loc 1 1098 0
 1123 0426 0346     		mov	r3, r0
 1124 0428 38B9     		cbnz	r0, .L91
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1125              		.loc 1 1100 0
 1126 042a 254A     		ldr	r2, .L97
 1127              	.LVL101:
 1128 042c 9268     		ldr	r2, [r2, #8]
 1129 042e 12F0400F 		tst	r2, #64
 1130 0432 09D1     		bne	.L92
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1131              		.loc 1 1107 0
 1132 0434 0022     		movs	r2, #0
 1133 0436 E270     		strb	r2, [r4, #3]
 1134 0438 06E0     		b	.L92
 1135              	.LVL102:
 1136              	.L91:
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1137              		.loc 1 1124 0
 1138 043a 214A     		ldr	r2, .L97
 1139              	.LVL103:
 1140 043c 9268     		ldr	r2, [r2, #8]
 1141 043e 12F0400F 		tst	r2, #64
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1142              		.loc 1 1132 0
 1143 0442 04BF     		itt	eq
 1144 0444 0022     		moveq	r2, #0
 1145 0446 E270     		strbeq	r2, [r4, #3]
 1146              	.L92:
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1147              		.loc 1 1152 0
 1148 0448 8BB1     		cbz	r3, .L93
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1149              		.loc 1 1154 0
 1150 044a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1151              		.loc 1 1155 0
 1152 044c 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 1153              	.LVL104:
 1154 044e 0902     		lsls	r1, r1, #8
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1155              		.loc 1 1154 0
 1156 0450 41EA0341 		orr	r1, r1, r3, lsl #16
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1157              		.loc 1 1156 0
 1158 0454 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1159              		.loc 1 1155 0
 1160 0456 1943     		orrs	r1, r1, r3
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1161              		.loc 1 1157 0
 1162 0458 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1163              		.loc 1 1156 0
 1164 045a 41EA0341 		orr	r1, r1, r3, lsl #16
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1165              		.loc 1 1158 0
 1166 045e 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1167              		.loc 1 1157 0
 1168 0460 41EA0361 		orr	r1, r1, r3, lsl #24
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1169              		.loc 1 1159 0
 1170 0464 A368     		ldr	r3, [r4, #8]
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1171              		.loc 1 1158 0
 1172 0466 1943     		orrs	r1, r1, r3
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1173              		.loc 1 1160 0
 1174 0468 6268     		ldr	r2, [r4, #4]
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1175              		.loc 1 1154 0
 1176 046a 1143     		orrs	r1, r1, r2
 1177              	.LVL105:
 1178 046c 19E0     		b	.L94
 1179              	.LVL106:
 1180              	.L93:
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1181              		.loc 1 1164 0
 1182 046e 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1183              	.LVL107:
 1184 0470 FFF7C6FD 		bl	RTC_ByteToBcd2
 1185              	.LVL108:
 1186 0474 0604     		lsls	r6, r0, #16
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1187              		.loc 1 1165 0
 1188 0476 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1189 0478 FFF7C2FD 		bl	RTC_ByteToBcd2
 1190              	.LVL109:
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1191              		.loc 1 1164 0
 1192 047c 46EA0026 		orr	r6, r6, r0, lsl #8
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1193              		.loc 1 1166 0
 1194 0480 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1195 0482 FFF7BDFD 		bl	RTC_ByteToBcd2
 1196              	.LVL110:
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1197              		.loc 1 1165 0
 1198 0486 3043     		orrs	r0, r0, r6
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1199              		.loc 1 1167 0
 1200 0488 E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1201              		.loc 1 1166 0
 1202 048a 40EA0346 		orr	r6, r0, r3, lsl #16
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1203              		.loc 1 1168 0
 1204 048e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1205 0490 FFF7B6FD 		bl	RTC_ByteToBcd2
 1206              	.LVL111:
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1207              		.loc 1 1167 0
 1208 0494 46EA0060 		orr	r0, r6, r0, lsl #24
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1209              		.loc 1 1169 0
 1210 0498 A368     		ldr	r3, [r4, #8]
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1211              		.loc 1 1168 0
 1212 049a 40EA0301 		orr	r1, r0, r3
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1213              		.loc 1 1170 0
 1214 049e 6268     		ldr	r2, [r4, #4]
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1215              		.loc 1 1164 0
 1216 04a0 1143     		orrs	r1, r1, r2
 1217              	.LVL112:
 1218              	.L94:
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1219              		.loc 1 1174 0
 1220 04a2 074B     		ldr	r3, .L97
 1221 04a4 CA22     		movs	r2, #202
 1222 04a6 5A62     		str	r2, [r3, #36]
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1223              		.loc 1 1175 0
 1224 04a8 5322     		movs	r2, #83
 1225 04aa 5A62     		str	r2, [r3, #36]
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1226              		.loc 1 1178 0
 1227 04ac B5F5807F 		cmp	r5, #256
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1228              		.loc 1 1180 0
 1229 04b0 0EBF     		itee	eq
 1230 04b2 D961     		streq	r1, [r3, #28]
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1231              		.loc 1 1184 0
 1232 04b4 024B     		ldrne	r3, .L97
 1233 04b6 1962     		strne	r1, [r3, #32]
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1234              		.loc 1 1188 0
 1235 04b8 FF22     		movs	r2, #255
 1236 04ba 014B     		ldr	r3, .L97
 1237 04bc 5A62     		str	r2, [r3, #36]
 1238 04be 70BD     		pop	{r4, r5, r6, pc}
 1239              	.LVL113:
 1240              	.L98:
 1241              		.align	2
 1242              	.L97:
 1243 04c0 00280040 		.word	1073752064
 1244              		.cfi_endproc
 1245              	.LFE126:
 1247              		.align	2
 1248              		.global	RTC_AlarmStructInit
 1249              		.thumb
 1250              		.thumb_func
 1252              	RTC_AlarmStructInit:
 1253              	.LFB127:
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1254              		.loc 1 1200 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259              	.LVL114:
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1260              		.loc 1 1202 0
 1261 04c4 0023     		movs	r3, #0
 1262 04c6 C370     		strb	r3, [r0, #3]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1263              		.loc 1 1203 0
 1264 04c8 0370     		strb	r3, [r0]
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1265              		.loc 1 1204 0
 1266 04ca 4370     		strb	r3, [r0, #1]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1267              		.loc 1 1205 0
 1268 04cc 8370     		strb	r3, [r0, #2]
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1269              		.loc 1 1208 0
 1270 04ce 8360     		str	r3, [r0, #8]
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1271              		.loc 1 1209 0
 1272 04d0 0122     		movs	r2, #1
 1273 04d2 0273     		strb	r2, [r0, #12]
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1274              		.loc 1 1212 0
 1275 04d4 4360     		str	r3, [r0, #4]
 1276 04d6 7047     		bx	lr
 1277              		.cfi_endproc
 1278              	.LFE127:
 1280              		.align	2
 1281              		.global	RTC_GetAlarm
 1282              		.thumb
 1283              		.thumb_func
 1285              	RTC_GetAlarm:
 1286              	.LFB128:
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1287              		.loc 1 1230 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291              	.LVL115:
 1292 04d8 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 3, -24
 1295              		.cfi_offset 4, -20
 1296              		.cfi_offset 5, -16
 1297              		.cfi_offset 6, -12
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 04da 1446     		mov	r4, r2
 1301              	.LVL116:
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1302              		.loc 1 1238 0
 1303 04dc B1F5807F 		cmp	r1, #256
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1304              		.loc 1 1240 0
 1305 04e0 154B     		ldr	r3, .L104
 1306 04e2 0CBF     		ite	eq
 1307 04e4 DB69     		ldreq	r3, [r3, #28]
 1308              	.LVL117:
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1309              		.loc 1 1244 0
 1310 04e6 1B6A     		ldrne	r3, [r3, #32]
 1311              	.LVL118:
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1312              		.loc 1 1248 0
 1313 04e8 C3F30542 		ubfx	r2, r3, #16, #6
 1314              	.LVL119:
 1315 04ec 2270     		strb	r2, [r4]
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1316              		.loc 1 1250 0
 1317 04ee C3F30627 		ubfx	r7, r3, #8, #7
 1318 04f2 6770     		strb	r7, [r4, #1]
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1319              		.loc 1 1252 0
 1320 04f4 03F07F06 		and	r6, r3, #127
 1321 04f8 A670     		strb	r6, [r4, #2]
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1322              		.loc 1 1254 0
 1323 04fa 03F48001 		and	r1, r3, #4194304
 1324              	.LVL120:
 1325 04fe 090C     		lsrs	r1, r1, #16
 1326 0500 E170     		strb	r1, [r4, #3]
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1327              		.loc 1 1255 0
 1328 0502 C3F30565 		ubfx	r5, r3, #24, #6
 1329 0506 2573     		strb	r5, [r4, #12]
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1330              		.loc 1 1256 0
 1331 0508 03F08041 		and	r1, r3, #1073741824
 1332 050c A160     		str	r1, [r4, #8]
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1333              		.loc 1 1257 0
 1334 050e 03F08033 		and	r3, r3, #-2139062144
 1335              	.LVL121:
 1336 0512 6360     		str	r3, [r4, #4]
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1337              		.loc 1 1259 0
 1338 0514 78B9     		cbnz	r0, .L100
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1339              		.loc 1 1261 0
 1340 0516 1046     		mov	r0, r2
 1341              	.LVL122:
 1342 0518 FFF77EFD 		bl	RTC_Bcd2ToByte
 1343              	.LVL123:
 1344 051c 2070     		strb	r0, [r4]
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1345              		.loc 1 1263 0
 1346 051e 3846     		mov	r0, r7
 1347 0520 FFF77AFD 		bl	RTC_Bcd2ToByte
 1348              	.LVL124:
 1349 0524 6070     		strb	r0, [r4, #1]
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1350              		.loc 1 1265 0
 1351 0526 3046     		mov	r0, r6
 1352 0528 FFF776FD 		bl	RTC_Bcd2ToByte
 1353              	.LVL125:
 1354 052c A070     		strb	r0, [r4, #2]
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1355              		.loc 1 1267 0
 1356 052e 2846     		mov	r0, r5
 1357 0530 FFF772FD 		bl	RTC_Bcd2ToByte
 1358              	.LVL126:
 1359 0534 2073     		strb	r0, [r4, #12]
 1360              	.L100:
 1361 0536 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1362              	.LVL127:
 1363              	.L105:
 1364              		.align	2
 1365              	.L104:
 1366 0538 00280040 		.word	1073752064
 1367              		.cfi_endproc
 1368              	.LFE128:
 1370              		.align	2
 1371              		.global	RTC_AlarmCmd
 1372              		.thumb
 1373              		.thumb_func
 1375              	RTC_AlarmCmd:
 1376              	.LFB129:
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1377              		.loc 1 1284 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 8
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              		@ link register save eliminated.
 1382              	.LVL128:
 1383 053c 10B4     		push	{r4}
 1384              		.cfi_def_cfa_offset 4
 1385              		.cfi_offset 4, -4
 1386 053e 83B0     		sub	sp, sp, #12
 1387              		.cfi_def_cfa_offset 16
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1388              		.loc 1 1285 0
 1389 0540 0023     		movs	r3, #0
 1390 0542 0193     		str	r3, [sp, #4]
 1391              	.LVL129:
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1392              		.loc 1 1294 0
 1393 0544 154B     		ldr	r3, .L113
 1394 0546 CA22     		movs	r2, #202
 1395 0548 5A62     		str	r2, [r3, #36]
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1396              		.loc 1 1295 0
 1397 054a 5322     		movs	r2, #83
 1398 054c 5A62     		str	r2, [r3, #36]
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1399              		.loc 1 1298 0
 1400 054e 21B1     		cbz	r1, .L107
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1401              		.loc 1 1300 0
 1402 0550 9A68     		ldr	r2, [r3, #8]
 1403 0552 1043     		orrs	r0, r0, r2
 1404              	.LVL130:
 1405 0554 9860     		str	r0, [r3, #8]
 1406              	.LVL131:
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1407              		.loc 1 1302 0
 1408 0556 0120     		movs	r0, #1
 1409 0558 19E0     		b	.L108
 1410              	.LVL132:
 1411              	.L107:
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1412              		.loc 1 1307 0
 1413 055a 104B     		ldr	r3, .L113
 1414 055c 9A68     		ldr	r2, [r3, #8]
 1415 055e 22EA0002 		bic	r2, r2, r0
 1416 0562 9A60     		str	r2, [r3, #8]
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1417              		.loc 1 1312 0
 1418 0564 1C46     		mov	r4, r3
 1419 0566 000A     		lsrs	r0, r0, #8
 1420              	.LVL133:
 1421              	.L110:
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1422              		.loc 1 1312 0 is_stmt 0 discriminator 1
 1423 0568 E368     		ldr	r3, [r4, #12]
 1424 056a 0146     		mov	r1, r0
 1425 056c 03EA0002 		and	r2, r3, r0
 1426              	.LVL134:
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1427              		.loc 1 1313 0 is_stmt 1 discriminator 1
 1428 0570 019B     		ldr	r3, [sp, #4]
 1429 0572 0133     		adds	r3, r3, #1
 1430 0574 0193     		str	r3, [sp, #4]
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1431              		.loc 1 1314 0 discriminator 1
 1432 0576 019B     		ldr	r3, [sp, #4]
 1433 0578 B3F5803F 		cmp	r3, #65536
 1434 057c 01D0     		beq	.L109
 1435 057e 002A     		cmp	r2, #0
 1436 0580 F2D0     		beq	.L110
 1437              	.L109:
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1438              		.loc 1 1316 0
 1439 0582 064B     		ldr	r3, .L113
 1440 0584 D868     		ldr	r0, [r3, #12]
 1441 0586 0140     		ands	r1, r1, r0
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1442              		.loc 1 1318 0
 1443 0588 081C     		adds	r0, r1, #0
 1444 058a 18BF     		it	ne
 1445 058c 0120     		movne	r0, #1
 1446              	.LVL135:
 1447              	.L108:
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1448              		.loc 1 1327 0
 1449 058e FF22     		movs	r2, #255
 1450 0590 024B     		ldr	r3, .L113
 1451 0592 5A62     		str	r2, [r3, #36]
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1452              		.loc 1 1330 0
 1453 0594 03B0     		add	sp, sp, #12
 1454              		@ sp needed
 1455 0596 5DF8044B 		ldr	r4, [sp], #4
 1456 059a 7047     		bx	lr
 1457              	.L114:
 1458              		.align	2
 1459              	.L113:
 1460 059c 00280040 		.word	1073752064
 1461              		.cfi_endproc
 1462              	.LFE129:
 1464              		.align	2
 1465              		.global	RTC_AlarmSubSecondConfig
 1466              		.thumb
 1467              		.thumb_func
 1469              	RTC_AlarmSubSecondConfig:
 1470              	.LFB130:
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1471              		.loc 1 1378 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 1476              	.LVL136:
 1477 05a0 10B4     		push	{r4}
 1478              		.cfi_def_cfa_offset 4
 1479              		.cfi_offset 4, -4
 1480              	.LVL137:
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1481              		.loc 1 1387 0
 1482 05a2 094B     		ldr	r3, .L118
 1483 05a4 CA24     		movs	r4, #202
 1484 05a6 5C62     		str	r4, [r3, #36]
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1485              		.loc 1 1388 0
 1486 05a8 5324     		movs	r4, #83
 1487 05aa 5C62     		str	r4, [r3, #36]
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 1488              		.loc 1 1391 0
 1489 05ac 0A43     		orrs	r2, r2, r1
 1490              	.LVL138:
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1491              		.loc 1 1393 0
 1492 05ae B0F5807F 		cmp	r0, #256
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 1493              		.loc 1 1396 0
 1494 05b2 0EBF     		itee	eq
 1495 05b4 5A64     		streq	r2, [r3, #68]
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 1496              		.loc 1 1401 0
 1497 05b6 044B     		ldrne	r3, .L118
 1498 05b8 9A64     		strne	r2, [r3, #72]
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 1499              		.loc 1 1405 0
 1500 05ba FF22     		movs	r2, #255
 1501              	.LVL139:
 1502 05bc 024B     		ldr	r3, .L118
 1503 05be 5A62     		str	r2, [r3, #36]
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1504              		.loc 1 1407 0
 1505 05c0 5DF8044B 		ldr	r4, [sp], #4
 1506 05c4 7047     		bx	lr
 1507              	.L119:
 1508 05c6 00BF     		.align	2
 1509              	.L118:
 1510 05c8 00280040 		.word	1073752064
 1511              		.cfi_endproc
 1512              	.LFE130:
 1514              		.align	2
 1515              		.global	RTC_GetAlarmSubSecond
 1516              		.thumb
 1517              		.thumb_func
 1519              	RTC_GetAlarmSubSecond:
 1520              	.LFB131:
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1521              		.loc 1 1419 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 0
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526              	.LVL140:
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1527              		.loc 1 1423 0
 1528 05cc B0F5807F 		cmp	r0, #256
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1529              		.loc 1 1425 0
 1530 05d0 034B     		ldr	r3, .L123
 1531 05d2 0CBF     		ite	eq
 1532 05d4 586C     		ldreq	r0, [r3, #68]
 1533              	.LVL141:
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 1534              		.loc 1 1429 0
 1535 05d6 986C     		ldrne	r0, [r3, #72]
 1536 05d8 C0F30E00 		ubfx	r0, r0, #0, #15
 1537              	.LVL142:
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1538              		.loc 1 1433 0
 1539 05dc 7047     		bx	lr
 1540              	.L124:
 1541 05de 00BF     		.align	2
 1542              	.L123:
 1543 05e0 00280040 		.word	1073752064
 1544              		.cfi_endproc
 1545              	.LFE131:
 1547              		.align	2
 1548              		.global	RTC_WakeUpClockConfig
 1549              		.thumb
 1550              		.thumb_func
 1552              	RTC_WakeUpClockConfig:
 1553              	.LFB132:
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1554              		.loc 1 1468 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 0
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 1558              		@ link register save eliminated.
 1559              	.LVL143:
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1560              		.loc 1 1473 0
 1561 05e4 074B     		ldr	r3, .L126
 1562 05e6 CA22     		movs	r2, #202
 1563 05e8 5A62     		str	r2, [r3, #36]
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1564              		.loc 1 1474 0
 1565 05ea 5322     		movs	r2, #83
 1566 05ec 5A62     		str	r2, [r3, #36]
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1567              		.loc 1 1477 0
 1568 05ee 9A68     		ldr	r2, [r3, #8]
 1569 05f0 22F00702 		bic	r2, r2, #7
 1570 05f4 9A60     		str	r2, [r3, #8]
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1571              		.loc 1 1480 0
 1572 05f6 9A68     		ldr	r2, [r3, #8]
 1573 05f8 1043     		orrs	r0, r0, r2
 1574              	.LVL144:
 1575 05fa 9860     		str	r0, [r3, #8]
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1576              		.loc 1 1483 0
 1577 05fc FF22     		movs	r2, #255
 1578 05fe 5A62     		str	r2, [r3, #36]
 1579 0600 7047     		bx	lr
 1580              	.L127:
 1581 0602 00BF     		.align	2
 1582              	.L126:
 1583 0604 00280040 		.word	1073752064
 1584              		.cfi_endproc
 1585              	.LFE132:
 1587              		.align	2
 1588              		.global	RTC_SetWakeUpCounter
 1589              		.thumb
 1590              		.thumb_func
 1592              	RTC_SetWakeUpCounter:
 1593              	.LFB133:
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1594              		.loc 1 1495 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 0, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599              	.LVL145:
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1600              		.loc 1 1500 0
 1601 0608 044B     		ldr	r3, .L129
 1602 060a CA22     		movs	r2, #202
 1603 060c 5A62     		str	r2, [r3, #36]
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1604              		.loc 1 1501 0
 1605 060e 5322     		movs	r2, #83
 1606 0610 5A62     		str	r2, [r3, #36]
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 1607              		.loc 1 1504 0
 1608 0612 5861     		str	r0, [r3, #20]
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1609              		.loc 1 1507 0
 1610 0614 FF22     		movs	r2, #255
 1611 0616 5A62     		str	r2, [r3, #36]
 1612 0618 7047     		bx	lr
 1613              	.L130:
 1614 061a 00BF     		.align	2
 1615              	.L129:
 1616 061c 00280040 		.word	1073752064
 1617              		.cfi_endproc
 1618              	.LFE133:
 1620              		.align	2
 1621              		.global	RTC_GetWakeUpCounter
 1622              		.thumb
 1623              		.thumb_func
 1625              	RTC_GetWakeUpCounter:
 1626              	.LFB134:
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1627              		.loc 1 1516 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1632              		.loc 1 1518 0
 1633 0620 014B     		ldr	r3, .L132
 1634 0622 5869     		ldr	r0, [r3, #20]
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1635              		.loc 1 1519 0
 1636 0624 80B2     		uxth	r0, r0
 1637 0626 7047     		bx	lr
 1638              	.L133:
 1639              		.align	2
 1640              	.L132:
 1641 0628 00280040 		.word	1073752064
 1642              		.cfi_endproc
 1643              	.LFE134:
 1645              		.align	2
 1646              		.global	RTC_WakeUpCmd
 1647              		.thumb
 1648              		.thumb_func
 1650              	RTC_WakeUpCmd:
 1651              	.LFB135:
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1652              		.loc 1 1528 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 8
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 1657              	.LVL146:
 1658 062c 82B0     		sub	sp, sp, #8
 1659              		.cfi_def_cfa_offset 8
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1660              		.loc 1 1529 0
 1661 062e 0023     		movs	r3, #0
 1662 0630 0193     		str	r3, [sp, #4]
 1663              	.LVL147:
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1664              		.loc 1 1537 0
 1665 0632 154B     		ldr	r3, .L141
 1666 0634 CA22     		movs	r2, #202
 1667 0636 5A62     		str	r2, [r3, #36]
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1668              		.loc 1 1538 0
 1669 0638 5322     		movs	r2, #83
 1670 063a 5A62     		str	r2, [r3, #36]
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1671              		.loc 1 1540 0
 1672 063c 28B1     		cbz	r0, .L135
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1673              		.loc 1 1543 0
 1674 063e 9A68     		ldr	r2, [r3, #8]
 1675 0640 42F48062 		orr	r2, r2, #1024
 1676 0644 9A60     		str	r2, [r3, #8]
 1677              	.LVL148:
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1678              		.loc 1 1544 0
 1679 0646 0120     		movs	r0, #1
 1680              	.LVL149:
 1681 0648 18E0     		b	.L136
 1682              	.LVL150:
 1683              	.L135:
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1684              		.loc 1 1549 0
 1685 064a 0F4B     		ldr	r3, .L141
 1686 064c 9A68     		ldr	r2, [r3, #8]
 1687 064e 22F48062 		bic	r2, r2, #1024
 1688 0652 9A60     		str	r2, [r3, #8]
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1689              		.loc 1 1553 0
 1690 0654 1946     		mov	r1, r3
 1691              	.LVL151:
 1692              	.L138:
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1693              		.loc 1 1553 0 is_stmt 0 discriminator 1
 1694 0656 CB68     		ldr	r3, [r1, #12]
 1695 0658 03F00402 		and	r2, r3, #4
 1696              	.LVL152:
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1697              		.loc 1 1554 0 is_stmt 1 discriminator 1
 1698 065c 019B     		ldr	r3, [sp, #4]
 1699 065e 0133     		adds	r3, r3, #1
 1700 0660 0193     		str	r3, [sp, #4]
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1701              		.loc 1 1555 0 discriminator 1
 1702 0662 019B     		ldr	r3, [sp, #4]
 1703 0664 B3F5803F 		cmp	r3, #65536
 1704 0668 01D0     		beq	.L137
 1705 066a 002A     		cmp	r2, #0
 1706 066c F3D0     		beq	.L138
 1707              	.L137:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1708              		.loc 1 1557 0
 1709 066e 064B     		ldr	r3, .L141
 1710 0670 D868     		ldr	r0, [r3, #12]
 1711              	.LVL153:
 1712 0672 00F00400 		and	r0, r0, #4
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1713              		.loc 1 1559 0
 1714 0676 0030     		adds	r0, r0, #0
 1715 0678 18BF     		it	ne
 1716 067a 0120     		movne	r0, #1
 1717              	.LVL154:
 1718              	.L136:
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1719              		.loc 1 1568 0
 1720 067c FF22     		movs	r2, #255
 1721 067e 024B     		ldr	r3, .L141
 1722 0680 5A62     		str	r2, [r3, #36]
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1723              		.loc 1 1571 0
 1724 0682 02B0     		add	sp, sp, #8
 1725              		@ sp needed
 1726 0684 7047     		bx	lr
 1727              	.L142:
 1728 0686 00BF     		.align	2
 1729              	.L141:
 1730 0688 00280040 		.word	1073752064
 1731              		.cfi_endproc
 1732              	.LFE135:
 1734              		.align	2
 1735              		.global	RTC_DayLightSavingConfig
 1736              		.thumb
 1737              		.thumb_func
 1739              	RTC_DayLightSavingConfig:
 1740              	.LFB136:
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1741              		.loc 1 1605 0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 0
 1744              		@ frame_needed = 0, uses_anonymous_args = 0
 1745              		@ link register save eliminated.
 1746              	.LVL155:
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1747              		.loc 1 1611 0
 1748 068c 074B     		ldr	r3, .L144
 1749 068e CA22     		movs	r2, #202
 1750 0690 5A62     		str	r2, [r3, #36]
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1751              		.loc 1 1612 0
 1752 0692 5322     		movs	r2, #83
 1753 0694 5A62     		str	r2, [r3, #36]
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1754              		.loc 1 1615 0
 1755 0696 9A68     		ldr	r2, [r3, #8]
 1756 0698 22F48022 		bic	r2, r2, #262144
 1757 069c 9A60     		str	r2, [r3, #8]
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1758              		.loc 1 1618 0
 1759 069e 9A68     		ldr	r2, [r3, #8]
 1760 06a0 0143     		orrs	r1, r1, r0
 1761              	.LVL156:
 1762 06a2 0A43     		orrs	r2, r2, r1
 1763 06a4 9A60     		str	r2, [r3, #8]
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1764              		.loc 1 1621 0
 1765 06a6 FF22     		movs	r2, #255
 1766 06a8 5A62     		str	r2, [r3, #36]
 1767 06aa 7047     		bx	lr
 1768              	.L145:
 1769              		.align	2
 1770              	.L144:
 1771 06ac 00280040 		.word	1073752064
 1772              		.cfi_endproc
 1773              	.LFE136:
 1775              		.align	2
 1776              		.global	RTC_GetStoreOperation
 1777              		.thumb
 1778              		.thumb_func
 1780              	RTC_GetStoreOperation:
 1781              	.LFB137:
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1782              		.loc 1 1632 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1787              		.loc 1 1633 0
 1788 06b0 024B     		ldr	r3, .L147
 1789 06b2 9868     		ldr	r0, [r3, #8]
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1790              		.loc 1 1634 0
 1791 06b4 00F48020 		and	r0, r0, #262144
 1792 06b8 7047     		bx	lr
 1793              	.L148:
 1794 06ba 00BF     		.align	2
 1795              	.L147:
 1796 06bc 00280040 		.word	1073752064
 1797              		.cfi_endproc
 1798              	.LFE137:
 1800              		.align	2
 1801              		.global	RTC_OutputConfig
 1802              		.thumb
 1803              		.thumb_func
 1805              	RTC_OutputConfig:
 1806              	.LFB138:
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1807              		.loc 1 1671 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812              	.LVL157:
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1813              		.loc 1 1677 0
 1814 06c0 074B     		ldr	r3, .L150
 1815 06c2 CA22     		movs	r2, #202
 1816 06c4 5A62     		str	r2, [r3, #36]
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1817              		.loc 1 1678 0
 1818 06c6 5322     		movs	r2, #83
 1819 06c8 5A62     		str	r2, [r3, #36]
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1820              		.loc 1 1681 0
 1821 06ca 9A68     		ldr	r2, [r3, #8]
 1822 06cc 22F4E002 		bic	r2, r2, #7340032
 1823 06d0 9A60     		str	r2, [r3, #8]
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1824              		.loc 1 1684 0
 1825 06d2 9A68     		ldr	r2, [r3, #8]
 1826 06d4 0143     		orrs	r1, r1, r0
 1827              	.LVL158:
 1828 06d6 0A43     		orrs	r2, r2, r1
 1829 06d8 9A60     		str	r2, [r3, #8]
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1830              		.loc 1 1687 0
 1831 06da FF22     		movs	r2, #255
 1832 06dc 5A62     		str	r2, [r3, #36]
 1833 06de 7047     		bx	lr
 1834              	.L151:
 1835              		.align	2
 1836              	.L150:
 1837 06e0 00280040 		.word	1073752064
 1838              		.cfi_endproc
 1839              	.LFE138:
 1841              		.align	2
 1842              		.global	RTC_CoarseCalibConfig
 1843              		.thumb
 1844              		.thumb_func
 1846              	RTC_CoarseCalibConfig:
 1847              	.LFB139:
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1848              		.loc 1 1725 0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852              	.LVL159:
 1853 06e4 38B5     		push	{r3, r4, r5, lr}
 1854              		.cfi_def_cfa_offset 16
 1855              		.cfi_offset 3, -16
 1856              		.cfi_offset 4, -12
 1857              		.cfi_offset 5, -8
 1858              		.cfi_offset 14, -4
 1859 06e6 0546     		mov	r5, r0
 1860 06e8 0C46     		mov	r4, r1
 1861              	.LVL160:
1733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1862              		.loc 1 1733 0
 1863 06ea 0A4B     		ldr	r3, .L155
 1864 06ec CA22     		movs	r2, #202
 1865 06ee 5A62     		str	r2, [r3, #36]
1734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1866              		.loc 1 1734 0
 1867 06f0 5322     		movs	r2, #83
 1868 06f2 5A62     		str	r2, [r3, #36]
1737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1869              		.loc 1 1737 0
 1870 06f4 FFF7FEFF 		bl	RTC_EnterInitMode
 1871              	.LVL161:
 1872 06f8 30B1     		cbz	r0, .L154
1744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 1873              		.loc 1 1744 0
 1874 06fa 2C43     		orrs	r4, r4, r5
 1875              	.LVL162:
 1876 06fc 054B     		ldr	r3, .L155
 1877 06fe 9C61     		str	r4, [r3, #24]
1746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1878              		.loc 1 1746 0
 1879 0700 FFF7FEFF 		bl	RTC_ExitInitMode
 1880              	.LVL163:
1748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1881              		.loc 1 1748 0
 1882 0704 0120     		movs	r0, #1
 1883 0706 00E0     		b	.L153
 1884              	.LVL164:
 1885              	.L154:
1739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1886              		.loc 1 1739 0
 1887 0708 0020     		movs	r0, #0
 1888              	.LVL165:
 1889              	.L153:
1752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1890              		.loc 1 1752 0
 1891 070a FF22     		movs	r2, #255
 1892 070c 014B     		ldr	r3, .L155
 1893 070e 5A62     		str	r2, [r3, #36]
1755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1894              		.loc 1 1755 0
 1895 0710 38BD     		pop	{r3, r4, r5, pc}
 1896              	.LVL166:
 1897              	.L156:
 1898 0712 00BF     		.align	2
 1899              	.L155:
 1900 0714 00280040 		.word	1073752064
 1901              		.cfi_endproc
 1902              	.LFE139:
 1904              		.align	2
 1905              		.global	RTC_CoarseCalibCmd
 1906              		.thumb
 1907              		.thumb_func
 1909              	RTC_CoarseCalibCmd:
 1910              	.LFB140:
1766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1911              		.loc 1 1766 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 0
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              	.LVL167:
 1916 0718 10B5     		push	{r4, lr}
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 4, -8
 1919              		.cfi_offset 14, -4
 1920 071a 0446     		mov	r4, r0
 1921              	.LVL168:
1773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1922              		.loc 1 1773 0
 1923 071c 0E4B     		ldr	r3, .L162
 1924 071e CA22     		movs	r2, #202
 1925 0720 5A62     		str	r2, [r3, #36]
1774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1926              		.loc 1 1774 0
 1927 0722 5322     		movs	r2, #83
 1928 0724 5A62     		str	r2, [r3, #36]
1777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1929              		.loc 1 1777 0
 1930 0726 FFF7FEFF 		bl	RTC_EnterInitMode
 1931              	.LVL169:
 1932 072a 78B1     		cbz	r0, .L161
1783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 1933              		.loc 1 1783 0
 1934 072c 2CB1     		cbz	r4, .L159
1786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 1935              		.loc 1 1786 0
 1936 072e 0A4B     		ldr	r3, .L162
 1937 0730 9A68     		ldr	r2, [r3, #8]
 1938 0732 42F08002 		orr	r2, r2, #128
 1939 0736 9A60     		str	r2, [r3, #8]
 1940 0738 04E0     		b	.L160
 1941              	.L159:
1791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 1942              		.loc 1 1791 0
 1943 073a 074B     		ldr	r3, .L162
 1944 073c 9A68     		ldr	r2, [r3, #8]
 1945 073e 22F08002 		bic	r2, r2, #128
 1946 0742 9A60     		str	r2, [r3, #8]
 1947              	.L160:
1794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 1948              		.loc 1 1794 0
 1949 0744 FFF7FEFF 		bl	RTC_ExitInitMode
 1950              	.LVL170:
1796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 1951              		.loc 1 1796 0
 1952 0748 0120     		movs	r0, #1
 1953 074a 00E0     		b	.L158
 1954              	.LVL171:
 1955              	.L161:
1779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 1956              		.loc 1 1779 0
 1957 074c 0020     		movs	r0, #0
 1958              	.LVL172:
 1959              	.L158:
1800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1960              		.loc 1 1800 0
 1961 074e FF22     		movs	r2, #255
 1962 0750 014B     		ldr	r3, .L162
 1963 0752 5A62     		str	r2, [r3, #36]
1803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1964              		.loc 1 1803 0
 1965 0754 10BD     		pop	{r4, pc}
 1966              	.L163:
 1967 0756 00BF     		.align	2
 1968              	.L162:
 1969 0758 00280040 		.word	1073752064
 1970              		.cfi_endproc
 1971              	.LFE140:
 1973              		.align	2
 1974              		.global	RTC_CalibOutputCmd
 1975              		.thumb
 1976              		.thumb_func
 1978              	RTC_CalibOutputCmd:
 1979              	.LFB141:
1812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1980              		.loc 1 1812 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 1985              	.LVL173:
1817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1986              		.loc 1 1817 0
 1987 075c 094B     		ldr	r3, .L167
 1988 075e CA22     		movs	r2, #202
 1989 0760 5A62     		str	r2, [r3, #36]
1818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1990              		.loc 1 1818 0
 1991 0762 5322     		movs	r2, #83
 1992 0764 5A62     		str	r2, [r3, #36]
1820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1993              		.loc 1 1820 0
 1994 0766 20B1     		cbz	r0, .L165
1823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 1995              		.loc 1 1823 0
 1996 0768 9A68     		ldr	r2, [r3, #8]
 1997 076a 42F40002 		orr	r2, r2, #8388608
 1998 076e 9A60     		str	r2, [r3, #8]
 1999 0770 04E0     		b	.L166
 2000              	.L165:
1828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2001              		.loc 1 1828 0
 2002 0772 044B     		ldr	r3, .L167
 2003 0774 9A68     		ldr	r2, [r3, #8]
 2004 0776 22F40002 		bic	r2, r2, #8388608
 2005 077a 9A60     		str	r2, [r3, #8]
 2006              	.L166:
1832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2007              		.loc 1 1832 0
 2008 077c FF22     		movs	r2, #255
 2009 077e 014B     		ldr	r3, .L167
 2010 0780 5A62     		str	r2, [r3, #36]
 2011 0782 7047     		bx	lr
 2012              	.L168:
 2013              		.align	2
 2014              	.L167:
 2015 0784 00280040 		.word	1073752064
 2016              		.cfi_endproc
 2017              	.LFE141:
 2019              		.align	2
 2020              		.global	RTC_CalibOutputConfig
 2021              		.thumb
 2022              		.thumb_func
 2024              	RTC_CalibOutputConfig:
 2025              	.LFB142:
1844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2026              		.loc 1 1844 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 2031              	.LVL174:
1849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2032              		.loc 1 1849 0
 2033 0788 074B     		ldr	r3, .L170
 2034 078a CA22     		movs	r2, #202
 2035 078c 5A62     		str	r2, [r3, #36]
1850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2036              		.loc 1 1850 0
 2037 078e 5322     		movs	r2, #83
 2038 0790 5A62     		str	r2, [r3, #36]
1853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2039              		.loc 1 1853 0
 2040 0792 9A68     		ldr	r2, [r3, #8]
 2041 0794 22F40022 		bic	r2, r2, #524288
 2042 0798 9A60     		str	r2, [r3, #8]
1856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2043              		.loc 1 1856 0
 2044 079a 9A68     		ldr	r2, [r3, #8]
 2045 079c 1043     		orrs	r0, r0, r2
 2046              	.LVL175:
 2047 079e 9860     		str	r0, [r3, #8]
1859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2048              		.loc 1 1859 0
 2049 07a0 FF22     		movs	r2, #255
 2050 07a2 5A62     		str	r2, [r3, #36]
 2051 07a4 7047     		bx	lr
 2052              	.L171:
 2053 07a6 00BF     		.align	2
 2054              	.L170:
 2055 07a8 00280040 		.word	1073752064
 2056              		.cfi_endproc
 2057              	.LFE142:
 2059              		.align	2
 2060              		.global	RTC_SmoothCalibConfig
 2061              		.thumb
 2062              		.thumb_func
 2064              	RTC_SmoothCalibConfig:
 2065              	.LFB143:
1882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2066              		.loc 1 1882 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070              		@ link register save eliminated.
 2071              	.LVL176:
 2072 07ac 30B4     		push	{r4, r5}
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 4, -8
 2075              		.cfi_offset 5, -4
 2076              	.LVL177:
1892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2077              		.loc 1 1892 0
 2078 07ae 134B     		ldr	r3, .L179
 2079 07b0 CA24     		movs	r4, #202
 2080 07b2 5C62     		str	r4, [r3, #36]
1893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2081              		.loc 1 1893 0
 2082 07b4 5324     		movs	r4, #83
 2083 07b6 5C62     		str	r4, [r3, #36]
1896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2084              		.loc 1 1896 0
 2085 07b8 DB68     		ldr	r3, [r3, #12]
 2086 07ba 13F4803F 		tst	r3, #65536
 2087 07be 02D1     		bne	.L177
 2088 07c0 0AE0     		b	.L174
 2089              	.LVL178:
 2090              	.L175:
1901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2091              		.loc 1 1901 0
 2092 07c2 0133     		adds	r3, r3, #1
 2093              	.LVL179:
 2094 07c4 01E0     		b	.L173
 2095              	.LVL180:
 2096              	.L177:
 2097 07c6 0023     		movs	r3, #0
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2098              		.loc 1 1899 0
 2099 07c8 0C4D     		ldr	r5, .L179
 2100              	.LVL181:
 2101              	.L173:
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2102              		.loc 1 1899 0 is_stmt 0 discriminator 1
 2103 07ca EC68     		ldr	r4, [r5, #12]
 2104 07cc 14F4803F 		tst	r4, #65536
 2105 07d0 02D0     		beq	.L174
1899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2106              		.loc 1 1899 0 discriminator 2
 2107 07d2 B3F5003F 		cmp	r3, #131072
 2108 07d6 F4D1     		bne	.L175
 2109              	.LVL182:
 2110              	.L174:
1906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2111              		.loc 1 1906 0 is_stmt 1
 2112 07d8 084B     		ldr	r3, .L179
 2113 07da DB68     		ldr	r3, [r3, #12]
 2114 07dc 13F4803F 		tst	r3, #65536
 2115 07e0 05D1     		bne	.L178
1909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2116              		.loc 1 1909 0
 2117 07e2 0843     		orrs	r0, r0, r1
 2118              	.LVL183:
 2119 07e4 0243     		orrs	r2, r2, r0
 2120              	.LVL184:
 2121 07e6 054B     		ldr	r3, .L179
 2122 07e8 DA63     		str	r2, [r3, #60]
 2123              	.LVL185:
1911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2124              		.loc 1 1911 0
 2125 07ea 0120     		movs	r0, #1
 2126 07ec 00E0     		b	.L176
 2127              	.LVL186:
 2128              	.L178:
1915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2129              		.loc 1 1915 0
 2130 07ee 0020     		movs	r0, #0
 2131              	.LVL187:
 2132              	.L176:
1919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2133              		.loc 1 1919 0
 2134 07f0 FF22     		movs	r2, #255
 2135 07f2 024B     		ldr	r3, .L179
 2136 07f4 5A62     		str	r2, [r3, #36]
1922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2137              		.loc 1 1922 0
 2138 07f6 30BC     		pop	{r4, r5}
 2139 07f8 7047     		bx	lr
 2140              	.L180:
 2141 07fa 00BF     		.align	2
 2142              	.L179:
 2143 07fc 00280040 		.word	1073752064
 2144              		.cfi_endproc
 2145              	.LFE143:
 2147              		.align	2
 2148              		.global	RTC_TimeStampCmd
 2149              		.thumb
 2150              		.thumb_func
 2152              	RTC_TimeStampCmd:
 2153              	.LFB144:
1956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2154              		.loc 1 1956 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              		@ link register save eliminated.
 2159              	.LVL188:
1964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2160              		.loc 1 1964 0
 2161 0800 0A4B     		ldr	r3, .L184
 2162 0802 9B68     		ldr	r3, [r3, #8]
 2163 0804 23F40063 		bic	r3, r3, #2048
 2164 0808 23F00803 		bic	r3, r3, #8
 2165              	.LVL189:
1967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2166              		.loc 1 1967 0
 2167 080c 19B1     		cbz	r1, .L182
1969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2168              		.loc 1 1969 0
 2169 080e 1843     		orrs	r0, r0, r3
 2170              	.LVL190:
 2171 0810 40F40060 		orr	r0, r0, #2048
 2172              	.LVL191:
 2173 0814 00E0     		b	.L183
 2174              	.LVL192:
 2175              	.L182:
1973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2176              		.loc 1 1973 0
 2177 0816 1843     		orrs	r0, r0, r3
 2178              	.LVL193:
 2179              	.L183:
1977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2180              		.loc 1 1977 0
 2181 0818 044B     		ldr	r3, .L184
 2182 081a CA22     		movs	r2, #202
 2183 081c 5A62     		str	r2, [r3, #36]
1978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2184              		.loc 1 1978 0
 2185 081e 5322     		movs	r2, #83
 2186 0820 5A62     		str	r2, [r3, #36]
1981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2187              		.loc 1 1981 0
 2188 0822 9860     		str	r0, [r3, #8]
1984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2189              		.loc 1 1984 0
 2190 0824 FF22     		movs	r2, #255
 2191 0826 5A62     		str	r2, [r3, #36]
 2192 0828 7047     		bx	lr
 2193              	.L185:
 2194 082a 00BF     		.align	2
 2195              	.L184:
 2196 082c 00280040 		.word	1073752064
 2197              		.cfi_endproc
 2198              	.LFE144:
 2200              		.align	2
 2201              		.global	RTC_GetTimeStamp
 2202              		.thumb
 2203              		.thumb_func
 2205              	RTC_GetTimeStamp:
 2206              	.LFB145:
2001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2207              		.loc 1 2001 0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 0
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211              	.LVL194:
 2212 0830 38B5     		push	{r3, r4, r5, lr}
 2213              		.cfi_def_cfa_offset 16
 2214              		.cfi_offset 3, -16
 2215              		.cfi_offset 4, -12
 2216              		.cfi_offset 5, -8
 2217              		.cfi_offset 14, -4
 2218 0832 0D46     		mov	r5, r1
 2219 0834 1446     		mov	r4, r2
 2220              	.LVL195:
2008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2221              		.loc 1 2008 0
 2222 0836 1A4A     		ldr	r2, .L188
 2223              	.LVL196:
 2224 0838 136B     		ldr	r3, [r2, #48]
 2225              	.LVL197:
2009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2226              		.loc 1 2009 0
 2227 083a 526B     		ldr	r2, [r2, #52]
 2228              	.LVL198:
2012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2229              		.loc 1 2012 0
 2230 083c C3F30541 		ubfx	r1, r3, #16, #6
 2231              	.LVL199:
 2232 0840 2970     		strb	r1, [r5]
2013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2233              		.loc 1 2013 0
 2234 0842 C3F30621 		ubfx	r1, r3, #8, #7
 2235 0846 6970     		strb	r1, [r5, #1]
2014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2236              		.loc 1 2014 0
 2237 0848 03F07F01 		and	r1, r3, #127
 2238 084c A970     		strb	r1, [r5, #2]
2015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2239              		.loc 1 2015 0
 2240 084e 03F48003 		and	r3, r3, #4194304
 2241              	.LVL200:
 2242 0852 1B0C     		lsrs	r3, r3, #16
 2243 0854 EB70     		strb	r3, [r5, #3]
2018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2244              		.loc 1 2018 0
 2245 0856 0023     		movs	r3, #0
 2246 0858 E370     		strb	r3, [r4, #3]
2019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2247              		.loc 1 2019 0
 2248 085a C2F30423 		ubfx	r3, r2, #8, #5
 2249 085e 6370     		strb	r3, [r4, #1]
2020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2250              		.loc 1 2020 0
 2251 0860 02F03F03 		and	r3, r2, #63
 2252 0864 A370     		strb	r3, [r4, #2]
2021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2253              		.loc 1 2021 0
 2254 0866 C2F34232 		ubfx	r2, r2, #13, #3
 2255              	.LVL201:
 2256 086a 2270     		strb	r2, [r4]
2024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2257              		.loc 1 2024 0
 2258 086c B8B9     		cbnz	r0, .L186
2027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2259              		.loc 1 2027 0
 2260 086e 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2261              	.LVL202:
 2262 0870 FFF7D2FB 		bl	RTC_Bcd2ToByte
 2263              	.LVL203:
 2264 0874 2870     		strb	r0, [r5]
2028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2265              		.loc 1 2028 0
 2266 0876 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2267 0878 FFF7CEFB 		bl	RTC_Bcd2ToByte
 2268              	.LVL204:
 2269 087c 6870     		strb	r0, [r5, #1]
2029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2270              		.loc 1 2029 0
 2271 087e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2272 0880 FFF7CAFB 		bl	RTC_Bcd2ToByte
 2273              	.LVL205:
 2274 0884 A870     		strb	r0, [r5, #2]
2032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2275              		.loc 1 2032 0
 2276 0886 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2277 0888 FFF7C6FB 		bl	RTC_Bcd2ToByte
 2278              	.LVL206:
 2279 088c 6070     		strb	r0, [r4, #1]
2033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2280              		.loc 1 2033 0
 2281 088e A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2282 0890 FFF7C2FB 		bl	RTC_Bcd2ToByte
 2283              	.LVL207:
 2284 0894 A070     		strb	r0, [r4, #2]
2034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2285              		.loc 1 2034 0
 2286 0896 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2287 0898 FFF7BEFB 		bl	RTC_Bcd2ToByte
 2288              	.LVL208:
 2289 089c 2070     		strb	r0, [r4]
 2290              	.L186:
 2291 089e 38BD     		pop	{r3, r4, r5, pc}
 2292              	.LVL209:
 2293              	.L189:
 2294              		.align	2
 2295              	.L188:
 2296 08a0 00280040 		.word	1073752064
 2297              		.cfi_endproc
 2298              	.LFE145:
 2300              		.align	2
 2301              		.global	RTC_GetTimeStampSubSecond
 2302              		.thumb
 2303              		.thumb_func
 2305              	RTC_GetTimeStampSubSecond:
 2306              	.LFB146:
2044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2307              		.loc 1 2044 0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
2046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2312              		.loc 1 2046 0
 2313 08a4 014B     		ldr	r3, .L191
 2314 08a6 986B     		ldr	r0, [r3, #56]
2047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2315              		.loc 1 2047 0
 2316 08a8 7047     		bx	lr
 2317              	.L192:
 2318 08aa 00BF     		.align	2
 2319              	.L191:
 2320 08ac 00280040 		.word	1073752064
 2321              		.cfi_endproc
 2322              	.LFE146:
 2324              		.align	2
 2325              		.global	RTC_TamperTriggerConfig
 2326              		.thumb
 2327              		.thumb_func
 2329              	RTC_TamperTriggerConfig:
 2330              	.LFB147:
2079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2331              		.loc 1 2079 0
 2332              		.cfi_startproc
 2333              		@ args = 0, pretend = 0, frame = 0
 2334              		@ frame_needed = 0, uses_anonymous_args = 0
 2335              		@ link register save eliminated.
 2336              	.LVL210:
2084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2337              		.loc 1 2084 0
 2338 08b0 29B9     		cbnz	r1, .L194
2087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2339              		.loc 1 2087 0
 2340 08b2 064B     		ldr	r3, .L196
 2341 08b4 1A6C     		ldr	r2, [r3, #64]
 2342 08b6 22EA4000 		bic	r0, r2, r0, lsl #1
 2343              	.LVL211:
 2344 08ba 1864     		str	r0, [r3, #64]
 2345 08bc 7047     		bx	lr
 2346              	.LVL212:
 2347              	.L194:
2092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2348              		.loc 1 2092 0
 2349 08be 034B     		ldr	r3, .L196
 2350 08c0 1A6C     		ldr	r2, [r3, #64]
 2351 08c2 42EA4000 		orr	r0, r2, r0, lsl #1
 2352              	.LVL213:
 2353 08c6 1864     		str	r0, [r3, #64]
 2354 08c8 7047     		bx	lr
 2355              	.L197:
 2356 08ca 00BF     		.align	2
 2357              	.L196:
 2358 08cc 00280040 		.word	1073752064
 2359              		.cfi_endproc
 2360              	.LFE147:
 2362              		.align	2
 2363              		.global	RTC_TamperCmd
 2364              		.thumb
 2365              		.thumb_func
 2367              	RTC_TamperCmd:
 2368              	.LFB148:
2105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2369              		.loc 1 2105 0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 0
 2372              		@ frame_needed = 0, uses_anonymous_args = 0
 2373              		@ link register save eliminated.
 2374              	.LVL214:
2110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2375              		.loc 1 2110 0
 2376 08d0 21B1     		cbz	r1, .L199
2113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2377              		.loc 1 2113 0
 2378 08d2 054B     		ldr	r3, .L201
 2379 08d4 1A6C     		ldr	r2, [r3, #64]
 2380 08d6 1043     		orrs	r0, r0, r2
 2381              	.LVL215:
 2382 08d8 1864     		str	r0, [r3, #64]
 2383 08da 7047     		bx	lr
 2384              	.LVL216:
 2385              	.L199:
2118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2386              		.loc 1 2118 0
 2387 08dc 024B     		ldr	r3, .L201
 2388 08de 1A6C     		ldr	r2, [r3, #64]
 2389 08e0 22EA0000 		bic	r0, r2, r0
 2390              	.LVL217:
 2391 08e4 1864     		str	r0, [r3, #64]
 2392 08e6 7047     		bx	lr
 2393              	.L202:
 2394              		.align	2
 2395              	.L201:
 2396 08e8 00280040 		.word	1073752064
 2397              		.cfi_endproc
 2398              	.LFE148:
 2400              		.align	2
 2401              		.global	RTC_TamperFilterConfig
 2402              		.thumb
 2403              		.thumb_func
 2405              	RTC_TamperFilterConfig:
 2406              	.LFB149:
2136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2407              		.loc 1 2136 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
 2412              	.LVL218:
2141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2413              		.loc 1 2141 0
 2414 08ec 044B     		ldr	r3, .L204
 2415 08ee 1A6C     		ldr	r2, [r3, #64]
 2416 08f0 22F4C052 		bic	r2, r2, #6144
 2417 08f4 1A64     		str	r2, [r3, #64]
2144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 2418              		.loc 1 2144 0
 2419 08f6 1A6C     		ldr	r2, [r3, #64]
 2420 08f8 1043     		orrs	r0, r0, r2
 2421              	.LVL219:
 2422 08fa 1864     		str	r0, [r3, #64]
 2423 08fc 7047     		bx	lr
 2424              	.L205:
 2425 08fe 00BF     		.align	2
 2426              	.L204:
 2427 0900 00280040 		.word	1073752064
 2428              		.cfi_endproc
 2429              	.LFE149:
 2431              		.align	2
 2432              		.global	RTC_TamperSamplingFreqConfig
 2433              		.thumb
 2434              		.thumb_func
 2436              	RTC_TamperSamplingFreqConfig:
 2437              	.LFB150:
2170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2438              		.loc 1 2170 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              		@ link register save eliminated.
 2443              	.LVL220:
2175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2444              		.loc 1 2175 0
 2445 0904 044B     		ldr	r3, .L207
 2446 0906 1A6C     		ldr	r2, [r3, #64]
 2447 0908 22F4E062 		bic	r2, r2, #1792
 2448 090c 1A64     		str	r2, [r3, #64]
2178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 2449              		.loc 1 2178 0
 2450 090e 1A6C     		ldr	r2, [r3, #64]
 2451 0910 1043     		orrs	r0, r0, r2
 2452              	.LVL221:
 2453 0912 1864     		str	r0, [r3, #64]
 2454 0914 7047     		bx	lr
 2455              	.L208:
 2456 0916 00BF     		.align	2
 2457              	.L207:
 2458 0918 00280040 		.word	1073752064
 2459              		.cfi_endproc
 2460              	.LFE150:
 2462              		.align	2
 2463              		.global	RTC_TamperPinsPrechargeDuration
 2464              		.thumb
 2465              		.thumb_func
 2467              	RTC_TamperPinsPrechargeDuration:
 2468              	.LFB151:
2193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2469              		.loc 1 2193 0
 2470              		.cfi_startproc
 2471              		@ args = 0, pretend = 0, frame = 0
 2472              		@ frame_needed = 0, uses_anonymous_args = 0
 2473              		@ link register save eliminated.
 2474              	.LVL222:
2198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2475              		.loc 1 2198 0
 2476 091c 044B     		ldr	r3, .L210
 2477 091e 1A6C     		ldr	r2, [r3, #64]
 2478 0920 22F4C042 		bic	r2, r2, #24576
 2479 0924 1A64     		str	r2, [r3, #64]
2201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 2480              		.loc 1 2201 0
 2481 0926 1A6C     		ldr	r2, [r3, #64]
 2482 0928 1043     		orrs	r0, r0, r2
 2483              	.LVL223:
 2484 092a 1864     		str	r0, [r3, #64]
 2485 092c 7047     		bx	lr
 2486              	.L211:
 2487 092e 00BF     		.align	2
 2488              	.L210:
 2489 0930 00280040 		.word	1073752064
 2490              		.cfi_endproc
 2491              	.LFE151:
 2493              		.align	2
 2494              		.global	RTC_TimeStampOnTamperDetectionCmd
 2495              		.thumb
 2496              		.thumb_func
 2498              	RTC_TimeStampOnTamperDetectionCmd:
 2499              	.LFB152:
2213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2500              		.loc 1 2213 0
 2501              		.cfi_startproc
 2502              		@ args = 0, pretend = 0, frame = 0
 2503              		@ frame_needed = 0, uses_anonymous_args = 0
 2504              		@ link register save eliminated.
 2505              	.LVL224:
2217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2506              		.loc 1 2217 0
 2507 0934 28B1     		cbz	r0, .L213
2220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2508              		.loc 1 2220 0
 2509 0936 064B     		ldr	r3, .L215
 2510 0938 1A6C     		ldr	r2, [r3, #64]
 2511 093a 42F08002 		orr	r2, r2, #128
 2512 093e 1A64     		str	r2, [r3, #64]
 2513 0940 7047     		bx	lr
 2514              	.L213:
2225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 2515              		.loc 1 2225 0
 2516 0942 034B     		ldr	r3, .L215
 2517 0944 1A6C     		ldr	r2, [r3, #64]
 2518 0946 22F08002 		bic	r2, r2, #128
 2519 094a 1A64     		str	r2, [r3, #64]
 2520 094c 7047     		bx	lr
 2521              	.L216:
 2522 094e 00BF     		.align	2
 2523              	.L215:
 2524 0950 00280040 		.word	1073752064
 2525              		.cfi_endproc
 2526              	.LFE152:
 2528              		.align	2
 2529              		.global	RTC_TamperPullUpCmd
 2530              		.thumb
 2531              		.thumb_func
 2533              	RTC_TamperPullUpCmd:
 2534              	.LFB153:
2236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2535              		.loc 1 2236 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
 2540              	.LVL225:
2240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 2541              		.loc 1 2240 0
 2542 0954 28B1     		cbz	r0, .L218
2243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2543              		.loc 1 2243 0
 2544 0956 064B     		ldr	r3, .L220
 2545 0958 1A6C     		ldr	r2, [r3, #64]
 2546 095a 22F40042 		bic	r2, r2, #32768
 2547 095e 1A64     		str	r2, [r3, #64]
 2548 0960 7047     		bx	lr
 2549              	.L218:
2248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 2550              		.loc 1 2248 0
 2551 0962 034B     		ldr	r3, .L220
 2552 0964 1A6C     		ldr	r2, [r3, #64]
 2553 0966 42F40042 		orr	r2, r2, #32768
 2554 096a 1A64     		str	r2, [r3, #64]
 2555 096c 7047     		bx	lr
 2556              	.L221:
 2557 096e 00BF     		.align	2
 2558              	.L220:
 2559 0970 00280040 		.word	1073752064
 2560              		.cfi_endproc
 2561              	.LFE153:
 2563              		.align	2
 2564              		.global	RTC_WriteBackupRegister
 2565              		.thumb
 2566              		.thumb_func
 2568              	RTC_WriteBackupRegister:
 2569              	.LFB154:
2277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2570              		.loc 1 2277 0
 2571              		.cfi_startproc
 2572              		@ args = 0, pretend = 0, frame = 8
 2573              		@ frame_needed = 0, uses_anonymous_args = 0
 2574              		@ link register save eliminated.
 2575              	.LVL226:
 2576 0974 82B0     		sub	sp, sp, #8
 2577              		.cfi_def_cfa_offset 8
2278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2578              		.loc 1 2278 0
 2579 0976 0023     		movs	r3, #0
 2580 0978 0193     		str	r3, [sp, #4]
2283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2581              		.loc 1 2283 0
 2582 097a 054B     		ldr	r3, .L223
 2583 097c 0193     		str	r3, [sp, #4]
2284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2584              		.loc 1 2284 0
 2585 097e 019B     		ldr	r3, [sp, #4]
 2586 0980 03EB8000 		add	r0, r3, r0, lsl #2
 2587              	.LVL227:
 2588 0984 0190     		str	r0, [sp, #4]
2287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2589              		.loc 1 2287 0
 2590 0986 019B     		ldr	r3, [sp, #4]
 2591 0988 1960     		str	r1, [r3]
2288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2592              		.loc 1 2288 0
 2593 098a 02B0     		add	sp, sp, #8
 2594              		@ sp needed
 2595 098c 7047     		bx	lr
 2596              	.L224:
 2597 098e 00BF     		.align	2
 2598              	.L223:
 2599 0990 50280040 		.word	1073752144
 2600              		.cfi_endproc
 2601              	.LFE154:
 2603              		.align	2
 2604              		.global	RTC_ReadBackupRegister
 2605              		.thumb
 2606              		.thumb_func
 2608              	RTC_ReadBackupRegister:
 2609              	.LFB155:
2298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2610              		.loc 1 2298 0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 8
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 2614              		@ link register save eliminated.
 2615              	.LVL228:
 2616 0994 82B0     		sub	sp, sp, #8
 2617              		.cfi_def_cfa_offset 8
2299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2618              		.loc 1 2299 0
 2619 0996 0023     		movs	r3, #0
 2620 0998 0193     		str	r3, [sp, #4]
2304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2621              		.loc 1 2304 0
 2622 099a 054B     		ldr	r3, .L226
 2623 099c 0193     		str	r3, [sp, #4]
2305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2624              		.loc 1 2305 0
 2625 099e 019B     		ldr	r3, [sp, #4]
 2626 09a0 03EB8000 		add	r0, r3, r0, lsl #2
 2627              	.LVL229:
 2628 09a4 0190     		str	r0, [sp, #4]
2308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 2629              		.loc 1 2308 0
 2630 09a6 019B     		ldr	r3, [sp, #4]
 2631 09a8 1868     		ldr	r0, [r3]
2309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2632              		.loc 1 2309 0
 2633 09aa 02B0     		add	sp, sp, #8
 2634              		@ sp needed
 2635 09ac 7047     		bx	lr
 2636              	.L227:
 2637 09ae 00BF     		.align	2
 2638              	.L226:
 2639 09b0 50280040 		.word	1073752144
 2640              		.cfi_endproc
 2641              	.LFE155:
 2643              		.align	2
 2644              		.global	RTC_TamperPinSelection
 2645              		.thumb
 2646              		.thumb_func
 2648              	RTC_TamperPinSelection:
 2649              	.LFB156:
2338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2650              		.loc 1 2338 0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 0
 2653              		@ frame_needed = 0, uses_anonymous_args = 0
 2654              		@ link register save eliminated.
 2655              	.LVL230:
2342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 2656              		.loc 1 2342 0
 2657 09b4 044B     		ldr	r3, .L229
 2658 09b6 1A6C     		ldr	r2, [r3, #64]
 2659 09b8 22F48032 		bic	r2, r2, #65536
 2660 09bc 1A64     		str	r2, [r3, #64]
2343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2661              		.loc 1 2343 0
 2662 09be 1A6C     		ldr	r2, [r3, #64]
 2663 09c0 1043     		orrs	r0, r0, r2
 2664              	.LVL231:
 2665 09c2 1864     		str	r0, [r3, #64]
 2666 09c4 7047     		bx	lr
 2667              	.L230:
 2668 09c6 00BF     		.align	2
 2669              	.L229:
 2670 09c8 00280040 		.word	1073752064
 2671              		.cfi_endproc
 2672              	.LFE156:
 2674              		.align	2
 2675              		.global	RTC_TimeStampPinSelection
 2676              		.thumb
 2677              		.thumb_func
 2679              	RTC_TimeStampPinSelection:
 2680              	.LFB157:
2355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2681              		.loc 1 2355 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
 2685              		@ link register save eliminated.
 2686              	.LVL232:
2359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 2687              		.loc 1 2359 0
 2688 09cc 044B     		ldr	r3, .L232
 2689 09ce 1A6C     		ldr	r2, [r3, #64]
 2690 09d0 22F40032 		bic	r2, r2, #131072
 2691 09d4 1A64     		str	r2, [r3, #64]
2360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2692              		.loc 1 2360 0
 2693 09d6 1A6C     		ldr	r2, [r3, #64]
 2694 09d8 1043     		orrs	r0, r0, r2
 2695              	.LVL233:
 2696 09da 1864     		str	r0, [r3, #64]
 2697 09dc 7047     		bx	lr
 2698              	.L233:
 2699 09de 00BF     		.align	2
 2700              	.L232:
 2701 09e0 00280040 		.word	1073752064
 2702              		.cfi_endproc
 2703              	.LFE157:
 2705              		.align	2
 2706              		.global	RTC_OutputTypeConfig
 2707              		.thumb
 2708              		.thumb_func
 2710              	RTC_OutputTypeConfig:
 2711              	.LFB158:
2374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2712              		.loc 1 2374 0
 2713              		.cfi_startproc
 2714              		@ args = 0, pretend = 0, frame = 0
 2715              		@ frame_needed = 0, uses_anonymous_args = 0
 2716              		@ link register save eliminated.
 2717              	.LVL234:
2378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2718              		.loc 1 2378 0
 2719 09e4 044B     		ldr	r3, .L235
 2720 09e6 1A6C     		ldr	r2, [r3, #64]
 2721 09e8 22F48022 		bic	r2, r2, #262144
 2722 09ec 1A64     		str	r2, [r3, #64]
2379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2723              		.loc 1 2379 0
 2724 09ee 1A6C     		ldr	r2, [r3, #64]
 2725 09f0 1043     		orrs	r0, r0, r2
 2726              	.LVL235:
 2727 09f2 1864     		str	r0, [r3, #64]
 2728 09f4 7047     		bx	lr
 2729              	.L236:
 2730 09f6 00BF     		.align	2
 2731              	.L235:
 2732 09f8 00280040 		.word	1073752064
 2733              		.cfi_endproc
 2734              	.LFE158:
 2736              		.align	2
 2737              		.global	RTC_SynchroShiftConfig
 2738              		.thumb
 2739              		.thumb_func
 2741              	RTC_SynchroShiftConfig:
 2742              	.LFB159:
2412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2743              		.loc 1 2412 0
 2744              		.cfi_startproc
 2745              		@ args = 0, pretend = 0, frame = 0
 2746              		@ frame_needed = 0, uses_anonymous_args = 0
 2747              	.LVL236:
 2748 09fc 10B5     		push	{r4, lr}
 2749              		.cfi_def_cfa_offset 8
 2750              		.cfi_offset 4, -8
 2751              		.cfi_offset 14, -4
 2752              	.LVL237:
2421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2753              		.loc 1 2421 0
 2754 09fe 174B     		ldr	r3, .L246
 2755 0a00 CA22     		movs	r2, #202
 2756 0a02 5A62     		str	r2, [r3, #36]
2422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2757              		.loc 1 2422 0
 2758 0a04 5322     		movs	r2, #83
 2759 0a06 5A62     		str	r2, [r3, #36]
2425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 2760              		.loc 1 2425 0
 2761 0a08 DB68     		ldr	r3, [r3, #12]
 2762 0a0a 13F0080F 		tst	r3, #8
 2763 0a0e 02D1     		bne	.L242
 2764 0a10 0AE0     		b	.L239
 2765              	.LVL238:
 2766              	.L240:
2430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 2767              		.loc 1 2430 0
 2768 0a12 0133     		adds	r3, r3, #1
 2769              	.LVL239:
 2770 0a14 01E0     		b	.L238
 2771              	.LVL240:
 2772              	.L242:
 2773 0a16 0023     		movs	r3, #0
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2774              		.loc 1 2428 0
 2775 0a18 104C     		ldr	r4, .L246
 2776              	.LVL241:
 2777              	.L238:
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2778              		.loc 1 2428 0 is_stmt 0 discriminator 1
 2779 0a1a E268     		ldr	r2, [r4, #12]
 2780 0a1c 12F0080F 		tst	r2, #8
 2781 0a20 02D0     		beq	.L239
2428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2782              		.loc 1 2428 0 discriminator 2
 2783 0a22 B3F5805F 		cmp	r3, #4096
 2784 0a26 F4D1     		bne	.L240
 2785              	.LVL242:
 2786              	.L239:
2435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2787              		.loc 1 2435 0 is_stmt 1
 2788 0a28 0C4B     		ldr	r3, .L246
 2789 0a2a DB68     		ldr	r3, [r3, #12]
 2790 0a2c 13F0080F 		tst	r3, #8
 2791 0a30 0DD1     		bne	.L243
2438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2792              		.loc 1 2438 0
 2793 0a32 0A4B     		ldr	r3, .L246
 2794 0a34 9B68     		ldr	r3, [r3, #8]
 2795 0a36 13F0100F 		tst	r3, #16
 2796 0a3a 0AD1     		bne	.L244
2441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 2797              		.loc 1 2441 0
 2798 0a3c 0143     		orrs	r1, r1, r0
 2799              	.LVL243:
 2800 0a3e 074B     		ldr	r3, .L246
 2801 0a40 D962     		str	r1, [r3, #44]
2443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2802              		.loc 1 2443 0
 2803 0a42 FFF7FEFF 		bl	RTC_WaitForSynchro
 2804              	.LVL244:
2445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 2805              		.loc 1 2445 0
 2806 0a46 0030     		adds	r0, r0, #0
 2807 0a48 18BF     		it	ne
 2808 0a4a 0120     		movne	r0, #1
 2809 0a4c 02E0     		b	.L241
 2810              	.LVL245:
 2811              	.L243:
2459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2812              		.loc 1 2459 0
 2813 0a4e 0020     		movs	r0, #0
 2814              	.LVL246:
 2815 0a50 00E0     		b	.L241
 2816              	.LVL247:
 2817              	.L244:
2454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2818              		.loc 1 2454 0
 2819 0a52 0020     		movs	r0, #0
 2820              	.LVL248:
 2821              	.L241:
2463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2822              		.loc 1 2463 0
 2823 0a54 FF22     		movs	r2, #255
 2824 0a56 014B     		ldr	r3, .L246
 2825 0a58 5A62     		str	r2, [r3, #36]
2466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2826              		.loc 1 2466 0
 2827 0a5a 10BD     		pop	{r4, pc}
 2828              	.L247:
 2829              		.align	2
 2830              	.L246:
 2831 0a5c 00280040 		.word	1073752064
 2832              		.cfi_endproc
 2833              	.LFE159:
 2835              		.align	2
 2836              		.global	RTC_ITConfig
 2837              		.thumb
 2838              		.thumb_func
 2840              	RTC_ITConfig:
 2841              	.LFB160:
2531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2842              		.loc 1 2531 0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 0
 2845              		@ frame_needed = 0, uses_anonymous_args = 0
 2846              		@ link register save eliminated.
 2847              	.LVL249:
2537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2848              		.loc 1 2537 0
 2849 0a60 104B     		ldr	r3, .L251
 2850 0a62 CA22     		movs	r2, #202
 2851 0a64 5A62     		str	r2, [r3, #36]
2538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2852              		.loc 1 2538 0
 2853 0a66 5322     		movs	r2, #83
 2854 0a68 5A62     		str	r2, [r3, #36]
2540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2855              		.loc 1 2540 0
 2856 0a6a 51B1     		cbz	r1, .L249
2543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 2857              		.loc 1 2543 0
 2858 0a6c 9968     		ldr	r1, [r3, #8]
 2859              	.LVL250:
 2860 0a6e 20F00402 		bic	r2, r0, #4
 2861 0a72 0A43     		orrs	r2, r2, r1
 2862 0a74 9A60     		str	r2, [r3, #8]
2545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 2863              		.loc 1 2545 0
 2864 0a76 1A6C     		ldr	r2, [r3, #64]
 2865 0a78 00F00400 		and	r0, r0, #4
 2866              	.LVL251:
 2867 0a7c 1043     		orrs	r0, r0, r2
 2868 0a7e 1864     		str	r0, [r3, #64]
 2869 0a80 0CE0     		b	.L250
 2870              	.LVL252:
 2871              	.L249:
2550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 2872              		.loc 1 2550 0
 2873 0a82 084B     		ldr	r3, .L251
 2874 0a84 9A68     		ldr	r2, [r3, #8]
 2875 0a86 20F00401 		bic	r1, r0, #4
 2876              	.LVL253:
 2877 0a8a 22EA0102 		bic	r2, r2, r1
 2878 0a8e 9A60     		str	r2, [r3, #8]
2552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 2879              		.loc 1 2552 0
 2880 0a90 1A6C     		ldr	r2, [r3, #64]
 2881 0a92 00F00400 		and	r0, r0, #4
 2882              	.LVL254:
 2883 0a96 22EA0000 		bic	r0, r2, r0
 2884 0a9a 1864     		str	r0, [r3, #64]
 2885              	.L250:
2555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2886              		.loc 1 2555 0
 2887 0a9c FF22     		movs	r2, #255
 2888 0a9e 014B     		ldr	r3, .L251
 2889 0aa0 5A62     		str	r2, [r3, #36]
 2890 0aa2 7047     		bx	lr
 2891              	.L252:
 2892              		.align	2
 2893              	.L251:
 2894 0aa4 00280040 		.word	1073752064
 2895              		.cfi_endproc
 2896              	.LFE160:
 2898              		.align	2
 2899              		.global	RTC_GetFlagStatus
 2900              		.thumb
 2901              		.thumb_func
 2903              	RTC_GetFlagStatus:
 2904              	.LFB161:
2577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2905              		.loc 1 2577 0
 2906              		.cfi_startproc
 2907              		@ args = 0, pretend = 0, frame = 0
 2908              		@ frame_needed = 0, uses_anonymous_args = 0
 2909              		@ link register save eliminated.
 2910              	.LVL255:
2585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2911              		.loc 1 2585 0
 2912 0aa8 054B     		ldr	r3, .L256
 2913 0aaa DB68     		ldr	r3, [r3, #12]
 2914              	.LVL256:
2588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 2915              		.loc 1 2588 0
 2916 0aac 23F08803 		bic	r3, r3, #136
 2917              	.LVL257:
 2918 0ab0 9B04     		lsls	r3, r3, #18
 2919 0ab2 9B0C     		lsrs	r3, r3, #18
 2920 0ab4 0340     		ands	r3, r3, r0
 2921              	.LVL258:
2597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2922              		.loc 1 2597 0
 2923 0ab6 181C     		adds	r0, r3, #0
 2924              	.LVL259:
 2925 0ab8 18BF     		it	ne
 2926 0aba 0120     		movne	r0, #1
 2927 0abc 7047     		bx	lr
 2928              	.L257:
 2929 0abe 00BF     		.align	2
 2930              	.L256:
 2931 0ac0 00280040 		.word	1073752064
 2932              		.cfi_endproc
 2933              	.LFE161:
 2935              		.align	2
 2936              		.global	RTC_ClearFlag
 2937              		.thumb
 2938              		.thumb_func
 2940              	RTC_ClearFlag:
 2941              	.LFB162:
2613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2942              		.loc 1 2613 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              		@ link register save eliminated.
 2947              	.LVL260:
2618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 2948              		.loc 1 2618 0
 2949 0ac4 80B2     		uxth	r0, r0
 2950              	.LVL261:
 2951 0ac6 40F08002 		orr	r2, r0, #128
 2952 0aca 044B     		ldr	r3, .L259
 2953 0acc D968     		ldr	r1, [r3, #12]
 2954 0ace 01F08001 		and	r1, r1, #128
 2955 0ad2 61EA0202 		orn	r2, r1, r2
 2956 0ad6 DA60     		str	r2, [r3, #12]
 2957 0ad8 7047     		bx	lr
 2958              	.L260:
 2959 0ada 00BF     		.align	2
 2960              	.L259:
 2961 0adc 00280040 		.word	1073752064
 2962              		.cfi_endproc
 2963              	.LFE162:
 2965              		.align	2
 2966              		.global	RTC_GetITStatus
 2967              		.thumb
 2968              		.thumb_func
 2970              	RTC_GetITStatus:
 2971              	.LFB163:
2633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2972              		.loc 1 2633 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 0
 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 2976              		@ link register save eliminated.
 2977              	.LVL262:
2641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 2978              		.loc 1 2641 0
 2979 0ae0 094B     		ldr	r3, .L265
 2980 0ae2 1A6C     		ldr	r2, [r3, #64]
 2981 0ae4 02F00402 		and	r2, r2, #4
 2982              	.LVL263:
2644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 2983              		.loc 1 2644 0
 2984 0ae8 9968     		ldr	r1, [r3, #8]
 2985 0aea 0140     		ands	r1, r1, r0
 2986 0aec 02EAD032 		and	r2, r2, r0, lsr #15
 2987              	.LVL264:
2647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 2988              		.loc 1 2647 0
 2989 0af0 DB68     		ldr	r3, [r3, #12]
 2990 0af2 03EA1010 		and	r0, r3, r0, lsr #4
 2991              	.LVL265:
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 2992              		.loc 1 2650 0
 2993 0af6 0A43     		orrs	r2, r1, r2
 2994              	.LVL266:
 2995 0af8 04D0     		beq	.L263
2650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 2996              		.loc 1 2650 0 is_stmt 0 discriminator 1
 2997 0afa 80B2     		uxth	r0, r0
 2998              	.LVL267:
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 2999              		.loc 1 2656 0 is_stmt 1 discriminator 1
 3000 0afc 0030     		adds	r0, r0, #0
 3001 0afe 18BF     		it	ne
 3002 0b00 0120     		movne	r0, #1
 3003 0b02 7047     		bx	lr
 3004              	.LVL268:
 3005              	.L263:
2656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 3006              		.loc 1 2656 0 is_stmt 0
 3007 0b04 0020     		movs	r0, #0
 3008              	.LVL269:
2659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3009              		.loc 1 2659 0 is_stmt 1
 3010 0b06 7047     		bx	lr
 3011              	.L266:
 3012              		.align	2
 3013              	.L265:
 3014 0b08 00280040 		.word	1073752064
 3015              		.cfi_endproc
 3016              	.LFE163:
 3018              		.align	2
 3019              		.global	RTC_ClearITPendingBit
 3020              		.thumb
 3021              		.thumb_func
 3023              	RTC_ClearITPendingBit:
 3024              	.LFB164:
2673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3025              		.loc 1 2673 0
 3026              		.cfi_startproc
 3027              		@ args = 0, pretend = 0, frame = 0
 3028              		@ frame_needed = 0, uses_anonymous_args = 0
 3029              		@ link register save eliminated.
 3030              	.LVL270:
2683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3031              		.loc 1 2683 0
 3032 0b0c C0F30F10 		ubfx	r0, r0, #4, #16
 3033              	.LVL271:
 3034 0b10 40F08002 		orr	r2, r0, #128
 3035 0b14 034B     		ldr	r3, .L268
 3036 0b16 D968     		ldr	r1, [r3, #12]
 3037 0b18 01F08001 		and	r1, r1, #128
 3038 0b1c 61EA0202 		orn	r2, r1, r2
 3039 0b20 DA60     		str	r2, [r3, #12]
 3040 0b22 7047     		bx	lr
 3041              	.L269:
 3042              		.align	2
 3043              	.L268:
 3044 0b24 00280040 		.word	1073752064
 3045              		.cfi_endproc
 3046              	.LFE164:
 3048              	.Letext0:
 3049              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\mach
 3050              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q1\\arm-none-eabi\\include\\stdi
 3051              		.file 4 "C:\\Users\\Filip\\Eclipse\\Template\\STM32F4xx\\Include/stm32f4xx.h"
 3052              		.file 5 "C:\\Users\\Filip\\Eclipse\\Template\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_rtc.h"
 3053              		.file 6 "C:\\Users\\Filip\\Eclipse\\Template\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:18     .text:00000000 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:22     .text:00000000 RTC_ByteToBcd2
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:66     .text:00000018 RTC_Bcd2ToByte
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:93     .text:0000002c RTC_StructInit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:119    .text:0000003c RTC_WriteProtectionCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:146    .text:00000054 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:150    .text:00000058 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:155    .text:00000058 RTC_EnterInitMode
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:218    .text:000000a0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:222    .text:000000a4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:227    .text:000000a4 RTC_ExitInitMode
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:243    .text:000000b0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:247    .text:000000b4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:252    .text:000000b4 RTC_Init
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:316    .text:000000fc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:320    .text:00000100 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:325    .text:00000100 RTC_WaitForSynchro
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:388    .text:00000148 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:392    .text:0000014c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:397    .text:0000014c RTC_DeInit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:511    .text:000001d8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:516    .text:000001e0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:521    .text:000001e0 RTC_RefClockCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:581    .text:00000220 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:585    .text:00000224 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:590    .text:00000224 RTC_BypassShadowCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:627    .text:0000024c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:631    .text:00000250 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:636    .text:00000250 RTC_SetTime
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:761    .text:000002e4 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:765    .text:000002e8 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:770    .text:000002e8 RTC_TimeStructInit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:796    .text:000002f4 RTC_GetTime
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:853    .text:00000334 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:857    .text:00000338 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:862    .text:00000338 RTC_GetSubSecond
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:881    .text:00000340 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:885    .text:00000344 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:890    .text:00000344 RTC_SetDate
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1005   .text:000003cc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1009   .text:000003d0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1014   .text:000003d0 RTC_DateStructInit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1041   .text:000003e0 RTC_GetDate
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1097   .text:0000041c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1101   .text:00000420 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1106   .text:00000420 RTC_SetAlarm
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1243   .text:000004c0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1247   .text:000004c4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1252   .text:000004c4 RTC_AlarmStructInit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1285   .text:000004d8 RTC_GetAlarm
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1366   .text:00000538 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1370   .text:0000053c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1375   .text:0000053c RTC_AlarmCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1460   .text:0000059c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1464   .text:000005a0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1469   .text:000005a0 RTC_AlarmSubSecondConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1510   .text:000005c8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1514   .text:000005cc $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1519   .text:000005cc RTC_GetAlarmSubSecond
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1543   .text:000005e0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1547   .text:000005e4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1552   .text:000005e4 RTC_WakeUpClockConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1583   .text:00000604 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1587   .text:00000608 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1592   .text:00000608 RTC_SetWakeUpCounter
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1616   .text:0000061c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1620   .text:00000620 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1625   .text:00000620 RTC_GetWakeUpCounter
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1641   .text:00000628 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1645   .text:0000062c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1650   .text:0000062c RTC_WakeUpCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1730   .text:00000688 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1734   .text:0000068c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1739   .text:0000068c RTC_DayLightSavingConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1771   .text:000006ac $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1775   .text:000006b0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1780   .text:000006b0 RTC_GetStoreOperation
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1796   .text:000006bc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1800   .text:000006c0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1805   .text:000006c0 RTC_OutputConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1837   .text:000006e0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1841   .text:000006e4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1846   .text:000006e4 RTC_CoarseCalibConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1900   .text:00000714 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1904   .text:00000718 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1909   .text:00000718 RTC_CoarseCalibCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1969   .text:00000758 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1973   .text:0000075c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:1978   .text:0000075c RTC_CalibOutputCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2015   .text:00000784 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2019   .text:00000788 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2024   .text:00000788 RTC_CalibOutputConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2055   .text:000007a8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2059   .text:000007ac $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2064   .text:000007ac RTC_SmoothCalibConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2143   .text:000007fc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2147   .text:00000800 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2152   .text:00000800 RTC_TimeStampCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2196   .text:0000082c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2200   .text:00000830 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2205   .text:00000830 RTC_GetTimeStamp
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2296   .text:000008a0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2300   .text:000008a4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2305   .text:000008a4 RTC_GetTimeStampSubSecond
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2320   .text:000008ac $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2324   .text:000008b0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2329   .text:000008b0 RTC_TamperTriggerConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2358   .text:000008cc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2362   .text:000008d0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2367   .text:000008d0 RTC_TamperCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2396   .text:000008e8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2400   .text:000008ec $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2405   .text:000008ec RTC_TamperFilterConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2427   .text:00000900 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2431   .text:00000904 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2436   .text:00000904 RTC_TamperSamplingFreqConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2458   .text:00000918 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2462   .text:0000091c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2467   .text:0000091c RTC_TamperPinsPrechargeDuration
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2489   .text:00000930 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2493   .text:00000934 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2498   .text:00000934 RTC_TimeStampOnTamperDetectionCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2524   .text:00000950 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2528   .text:00000954 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2533   .text:00000954 RTC_TamperPullUpCmd
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2559   .text:00000970 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2563   .text:00000974 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2568   .text:00000974 RTC_WriteBackupRegister
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2599   .text:00000990 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2603   .text:00000994 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2608   .text:00000994 RTC_ReadBackupRegister
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2639   .text:000009b0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2643   .text:000009b4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2648   .text:000009b4 RTC_TamperPinSelection
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2670   .text:000009c8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2674   .text:000009cc $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2679   .text:000009cc RTC_TimeStampPinSelection
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2701   .text:000009e0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2705   .text:000009e4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2710   .text:000009e4 RTC_OutputTypeConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2732   .text:000009f8 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2736   .text:000009fc $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2741   .text:000009fc RTC_SynchroShiftConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2831   .text:00000a5c $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2835   .text:00000a60 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2840   .text:00000a60 RTC_ITConfig
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2894   .text:00000aa4 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2898   .text:00000aa8 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2903   .text:00000aa8 RTC_GetFlagStatus
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2931   .text:00000ac0 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2935   .text:00000ac4 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2940   .text:00000ac4 RTC_ClearFlag
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2961   .text:00000adc $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2965   .text:00000ae0 $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:2970   .text:00000ae0 RTC_GetITStatus
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:3014   .text:00000b08 $d
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:3018   .text:00000b0c $t
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:3023   .text:00000b0c RTC_ClearITPendingBit
C:\Users\Filip\AppData\Local\Temp\ccPWrvJJ.s:3044   .text:00000b24 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.2bb9d917777380cc06007ef782f1739f
                           .group:00000000 wm4.stm32f4xx.h.48.ab6cfc2433f704442c75c2d67f633280
                           .group:00000000 wm4.core_cm4.h.32.f824aba4d431a5bb4a51726bd5b62834
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.288.7f55b1a1f5e5bad6ffa2308f97f537d1
                           .group:00000000 wm4.stm32f4xx_conf.h.24.a762e2483b8e31b68046e44b31e1d406
                           .group:00000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:00000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:00000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:00000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:00000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:00000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:00000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:00000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:00000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:00000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:00000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:00000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:00000000 wm4.stm32f4xx_pwr.h.25.41ffcb5dc896ed2d26edf4d9bbbfbe6f
                           .group:00000000 wm4.stm32f4xx_rcc.h.24.a10ec6e94989efb0f8f7f56448e9bb60
                           .group:00000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:00000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:00000000 wm4.stm32f4xx_spi.h.25.980a9e96afe182c8b9cb91058a0693d6
                           .group:00000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:00000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:00000000 wm4.stm32f4xx_usart.h.25.32a7aeff79714f90f8c4da45bf79808c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:00000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:00000000 wm4.stm32f4xx.h.6972.f31ddedd83a17c461a3fab76f77123cb
                           .group:00000000 wm4.stm32f4xx_rtc.h.127.d971ab18652a46b4e6f2fc10767eacb7

NO UNDEFINED SYMBOLS
